
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	70 60 00 20 8d 42 00 00 4d ab 00 00 e1 42 00 00     p`. .B..M....B..
  10:	e1 42 00 00 e1 42 00 00 e1 42 00 00 00 00 00 00     .B...B...B......
	...
  2c:	51 40 00 00 e1 42 00 00 00 00 00 00 09 40 00 00     Q@...B.......@..
  3c:	5d a6 00 00                                         ]...

00000040 <_irq_vector_table>:
  40:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  50:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  60:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  70:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  80:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  90:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  a0:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  b0:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  c0:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  d0:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  e0:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..
  f0:	4d 42 00 00 4d 42 00 00 4d 42 00 00 4d 42 00 00     MB..MB..MB..MB..

Disassembly of section text:

00000100 <__aeabi_ldivmod>:
     100:	b97b      	cbnz	r3, 122 <__aeabi_ldivmod+0x22>
     102:	b972      	cbnz	r2, 122 <__aeabi_ldivmod+0x22>
     104:	2900      	cmp	r1, #0
     106:	bfbe      	ittt	lt
     108:	2000      	movlt	r0, #0
     10a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     10e:	e006      	blt.n	11e <__aeabi_ldivmod+0x1e>
     110:	bf08      	it	eq
     112:	2800      	cmpeq	r0, #0
     114:	bf1c      	itt	ne
     116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     11a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     11e:	f000 b857 	b.w	1d0 <__aeabi_idiv0>
     122:	f1ad 0c08 	sub.w	ip, sp, #8
     126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     12a:	2900      	cmp	r1, #0
     12c:	db09      	blt.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	2b00      	cmp	r3, #0
     130:	db1a      	blt.n	168 <CONFIG_IDLE_STACK_SIZE+0x28>
     132:	f000 f84f 	bl	1d4 <__udivmoddi4>
     136:	f8dd e004 	ldr.w	lr, [sp, #4]
     13a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     13e:	b004      	add	sp, #16
     140:	4770      	bx	lr
     142:	4240      	negs	r0, r0
     144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     148:	2b00      	cmp	r3, #0
     14a:	db1b      	blt.n	184 <CONFIG_IDLE_STACK_SIZE+0x44>
     14c:	f000 f842 	bl	1d4 <__udivmoddi4>
     150:	f8dd e004 	ldr.w	lr, [sp, #4]
     154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     158:	b004      	add	sp, #16
     15a:	4240      	negs	r0, r0
     15c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	4770      	bx	lr
     168:	4252      	negs	r2, r2
     16a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16e:	f000 f831 	bl	1d4 <__udivmoddi4>
     172:	f8dd e004 	ldr.w	lr, [sp, #4]
     176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     17a:	b004      	add	sp, #16
     17c:	4240      	negs	r0, r0
     17e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     182:	4770      	bx	lr
     184:	4252      	negs	r2, r2
     186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     18a:	f000 f823 	bl	1d4 <__udivmoddi4>
     18e:	f8dd e004 	ldr.w	lr, [sp, #4]
     192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     196:	b004      	add	sp, #16
     198:	4252      	negs	r2, r2
     19a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     19e:	4770      	bx	lr

000001a0 <__aeabi_uldivmod>:
     1a0:	b953      	cbnz	r3, 1b8 <__aeabi_uldivmod+0x18>
     1a2:	b94a      	cbnz	r2, 1b8 <__aeabi_uldivmod+0x18>
     1a4:	2900      	cmp	r1, #0
     1a6:	bf08      	it	eq
     1a8:	2800      	cmpeq	r0, #0
     1aa:	bf1c      	itt	ne
     1ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     1b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     1b4:	f000 b80c 	b.w	1d0 <__aeabi_idiv0>
     1b8:	f1ad 0c08 	sub.w	ip, sp, #8
     1bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1c0:	f000 f808 	bl	1d4 <__udivmoddi4>
     1c4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1cc:	b004      	add	sp, #16
     1ce:	4770      	bx	lr

000001d0 <__aeabi_idiv0>:
     1d0:	4770      	bx	lr
     1d2:	bf00      	nop

000001d4 <__udivmoddi4>:
     1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1d8:	4607      	mov	r7, r0
     1da:	468c      	mov	ip, r1
     1dc:	4608      	mov	r0, r1
     1de:	9e09      	ldr	r6, [sp, #36]	; 0x24
     1e0:	4615      	mov	r5, r2
     1e2:	463c      	mov	r4, r7
     1e4:	4619      	mov	r1, r3
     1e6:	2b00      	cmp	r3, #0
     1e8:	f040 80c6 	bne.w	378 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x78>
     1ec:	4282      	cmp	r2, r0
     1ee:	fab2 f782 	clz	r7, r2
     1f2:	d946      	bls.n	282 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x82>
     1f4:	b14f      	cbz	r7, 20a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xa>
     1f6:	f1c7 0e20 	rsb	lr, r7, #32
     1fa:	fa24 fe0e 	lsr.w	lr, r4, lr
     1fe:	fa00 f307 	lsl.w	r3, r0, r7
     202:	40bd      	lsls	r5, r7
     204:	ea4e 0c03 	orr.w	ip, lr, r3
     208:	40bc      	lsls	r4, r7
     20a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     20e:	fa1f fe85 	uxth.w	lr, r5
     212:	fbbc f9f8 	udiv	r9, ip, r8
     216:	0c22      	lsrs	r2, r4, #16
     218:	fb08 c319 	mls	r3, r8, r9, ip
     21c:	fb09 fa0e 	mul.w	sl, r9, lr
     220:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     224:	459a      	cmp	sl, r3
     226:	d928      	bls.n	27a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x7a>
     228:	18eb      	adds	r3, r5, r3
     22a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     22e:	d204      	bcs.n	23a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x3a>
     230:	459a      	cmp	sl, r3
     232:	d902      	bls.n	23a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x3a>
     234:	f1a9 0002 	sub.w	r0, r9, #2
     238:	442b      	add	r3, r5
     23a:	eba3 030a 	sub.w	r3, r3, sl
     23e:	b2a4      	uxth	r4, r4
     240:	fbb3 f2f8 	udiv	r2, r3, r8
     244:	fb08 3312 	mls	r3, r8, r2, r3
     248:	fb02 fe0e 	mul.w	lr, r2, lr
     24c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     250:	45a6      	cmp	lr, r4
     252:	d914      	bls.n	27e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x7e>
     254:	192c      	adds	r4, r5, r4
     256:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     25a:	d203      	bcs.n	264 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x64>
     25c:	45a6      	cmp	lr, r4
     25e:	d901      	bls.n	264 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x64>
     260:	1e93      	subs	r3, r2, #2
     262:	442c      	add	r4, r5
     264:	eba4 040e 	sub.w	r4, r4, lr
     268:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     26c:	b11e      	cbz	r6, 276 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x76>
     26e:	40fc      	lsrs	r4, r7
     270:	2300      	movs	r3, #0
     272:	6034      	str	r4, [r6, #0]
     274:	6073      	str	r3, [r6, #4]
     276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     27a:	4648      	mov	r0, r9
     27c:	e7dd      	b.n	23a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x3a>
     27e:	4613      	mov	r3, r2
     280:	e7f0      	b.n	264 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x64>
     282:	b902      	cbnz	r2, 286 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x86>
     284:	deff      	udf	#255	; 0xff
     286:	bb87      	cbnz	r7, 2ea <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xea>
     288:	1a83      	subs	r3, r0, r2
     28a:	2101      	movs	r1, #1
     28c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     290:	b2aa      	uxth	r2, r5
     292:	fbb3 fcfe 	udiv	ip, r3, lr
     296:	0c20      	lsrs	r0, r4, #16
     298:	fb0e 331c 	mls	r3, lr, ip, r3
     29c:	fb0c f802 	mul.w	r8, ip, r2
     2a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     2a4:	4598      	cmp	r8, r3
     2a6:	d963      	bls.n	370 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x70>
     2a8:	18eb      	adds	r3, r5, r3
     2aa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2ae:	d204      	bcs.n	2ba <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xba>
     2b0:	4598      	cmp	r8, r3
     2b2:	d902      	bls.n	2ba <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xba>
     2b4:	f1ac 0002 	sub.w	r0, ip, #2
     2b8:	442b      	add	r3, r5
     2ba:	eba3 0308 	sub.w	r3, r3, r8
     2be:	b2a4      	uxth	r4, r4
     2c0:	fbb3 fcfe 	udiv	ip, r3, lr
     2c4:	fb0e 331c 	mls	r3, lr, ip, r3
     2c8:	fb0c f202 	mul.w	r2, ip, r2
     2cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2d0:	42a2      	cmp	r2, r4
     2d2:	d94f      	bls.n	374 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x74>
     2d4:	192c      	adds	r4, r5, r4
     2d6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     2da:	d204      	bcs.n	2e6 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xe6>
     2dc:	42a2      	cmp	r2, r4
     2de:	d902      	bls.n	2e6 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xe6>
     2e0:	f1ac 0302 	sub.w	r3, ip, #2
     2e4:	442c      	add	r4, r5
     2e6:	1aa4      	subs	r4, r4, r2
     2e8:	e7be      	b.n	268 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x68>
     2ea:	f1c7 0c20 	rsb	ip, r7, #32
     2ee:	fa20 f80c 	lsr.w	r8, r0, ip
     2f2:	fa00 f307 	lsl.w	r3, r0, r7
     2f6:	fa24 fc0c 	lsr.w	ip, r4, ip
     2fa:	40bd      	lsls	r5, r7
     2fc:	ea4c 0203 	orr.w	r2, ip, r3
     300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     304:	b2ab      	uxth	r3, r5
     306:	fbb8 fcfe 	udiv	ip, r8, lr
     30a:	0c11      	lsrs	r1, r2, #16
     30c:	fb0e 801c 	mls	r0, lr, ip, r8
     310:	fb0c f903 	mul.w	r9, ip, r3
     314:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     318:	4581      	cmp	r9, r0
     31a:	fa04 f407 	lsl.w	r4, r4, r7
     31e:	d923      	bls.n	368 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x68>
     320:	1828      	adds	r0, r5, r0
     322:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     326:	d204      	bcs.n	332 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x32>
     328:	4581      	cmp	r9, r0
     32a:	d902      	bls.n	332 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x32>
     32c:	f1ac 0102 	sub.w	r1, ip, #2
     330:	4428      	add	r0, r5
     332:	eba0 0009 	sub.w	r0, r0, r9
     336:	b292      	uxth	r2, r2
     338:	fbb0 fcfe 	udiv	ip, r0, lr
     33c:	fb0e 001c 	mls	r0, lr, ip, r0
     340:	fb0c f803 	mul.w	r8, ip, r3
     344:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     348:	4598      	cmp	r8, r3
     34a:	d90f      	bls.n	36c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x6c>
     34c:	18eb      	adds	r3, r5, r3
     34e:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     352:	d204      	bcs.n	35e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x5e>
     354:	4598      	cmp	r8, r3
     356:	d902      	bls.n	35e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x5e>
     358:	f1ac 0202 	sub.w	r2, ip, #2
     35c:	442b      	add	r3, r5
     35e:	eba3 0308 	sub.w	r3, r3, r8
     362:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     366:	e791      	b.n	28c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8c>
     368:	4661      	mov	r1, ip
     36a:	e7e2      	b.n	332 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x32>
     36c:	4662      	mov	r2, ip
     36e:	e7f6      	b.n	35e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x5e>
     370:	4660      	mov	r0, ip
     372:	e7a2      	b.n	2ba <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xba>
     374:	4663      	mov	r3, ip
     376:	e7b6      	b.n	2e6 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xe6>
     378:	4283      	cmp	r3, r0
     37a:	d905      	bls.n	388 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x88>
     37c:	b10e      	cbz	r6, 382 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x82>
     37e:	e9c6 7000 	strd	r7, r0, [r6]
     382:	2100      	movs	r1, #0
     384:	4608      	mov	r0, r1
     386:	e776      	b.n	276 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x76>
     388:	fab3 f183 	clz	r1, r3
     38c:	b981      	cbnz	r1, 3b0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xb0>
     38e:	4283      	cmp	r3, r0
     390:	d301      	bcc.n	396 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x96>
     392:	42ba      	cmp	r2, r7
     394:	d80a      	bhi.n	3ac <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xac>
     396:	1abc      	subs	r4, r7, r2
     398:	eb60 0303 	sbc.w	r3, r0, r3
     39c:	2001      	movs	r0, #1
     39e:	469c      	mov	ip, r3
     3a0:	2e00      	cmp	r6, #0
     3a2:	d068      	beq.n	476 <CONFIG_FLASH_SIZE+0x76>
     3a4:	e9c6 4c00 	strd	r4, ip, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e764      	b.n	276 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x76>
     3ac:	4608      	mov	r0, r1
     3ae:	e7f7      	b.n	3a0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa0>
     3b0:	f1c1 0c20 	rsb	ip, r1, #32
     3b4:	408b      	lsls	r3, r1
     3b6:	fa22 f40c 	lsr.w	r4, r2, ip
     3ba:	431c      	orrs	r4, r3
     3bc:	fa02 f501 	lsl.w	r5, r2, r1
     3c0:	fa00 f301 	lsl.w	r3, r0, r1
     3c4:	fa27 f20c 	lsr.w	r2, r7, ip
     3c8:	fa20 fb0c 	lsr.w	fp, r0, ip
     3cc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     3d0:	4313      	orrs	r3, r2
     3d2:	fbbb f8f9 	udiv	r8, fp, r9
     3d6:	fa1f fe84 	uxth.w	lr, r4
     3da:	fb09 bb18 	mls	fp, r9, r8, fp
     3de:	0c1a      	lsrs	r2, r3, #16
     3e0:	fb08 fa0e 	mul.w	sl, r8, lr
     3e4:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     3e8:	4592      	cmp	sl, r2
     3ea:	fa07 f701 	lsl.w	r7, r7, r1
     3ee:	d93e      	bls.n	46e <CONFIG_FLASH_SIZE+0x6e>
     3f0:	18a2      	adds	r2, r4, r2
     3f2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3f6:	d204      	bcs.n	402 <CONFIG_FLASH_SIZE+0x2>
     3f8:	4592      	cmp	sl, r2
     3fa:	d902      	bls.n	402 <CONFIG_FLASH_SIZE+0x2>
     3fc:	f1a8 0002 	sub.w	r0, r8, #2
     400:	4422      	add	r2, r4
     402:	eba2 020a 	sub.w	r2, r2, sl
     406:	b29b      	uxth	r3, r3
     408:	fbb2 f8f9 	udiv	r8, r2, r9
     40c:	fb09 2218 	mls	r2, r9, r8, r2
     410:	fb08 fe0e 	mul.w	lr, r8, lr
     414:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     418:	4596      	cmp	lr, r2
     41a:	d92a      	bls.n	472 <CONFIG_FLASH_SIZE+0x72>
     41c:	18a2      	adds	r2, r4, r2
     41e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     422:	d204      	bcs.n	42e <CONFIG_FLASH_SIZE+0x2e>
     424:	4596      	cmp	lr, r2
     426:	d902      	bls.n	42e <CONFIG_FLASH_SIZE+0x2e>
     428:	f1a8 0302 	sub.w	r3, r8, #2
     42c:	4422      	add	r2, r4
     42e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     432:	fba0 9305 	umull	r9, r3, r0, r5
     436:	eba2 020e 	sub.w	r2, r2, lr
     43a:	429a      	cmp	r2, r3
     43c:	46ce      	mov	lr, r9
     43e:	4698      	mov	r8, r3
     440:	d302      	bcc.n	448 <CONFIG_FLASH_SIZE+0x48>
     442:	d106      	bne.n	452 <CONFIG_FLASH_SIZE+0x52>
     444:	454f      	cmp	r7, r9
     446:	d204      	bcs.n	452 <CONFIG_FLASH_SIZE+0x52>
     448:	ebb9 0e05 	subs.w	lr, r9, r5
     44c:	eb63 0804 	sbc.w	r8, r3, r4
     450:	3801      	subs	r0, #1
     452:	b186      	cbz	r6, 476 <CONFIG_FLASH_SIZE+0x76>
     454:	ebb7 030e 	subs.w	r3, r7, lr
     458:	eb62 0708 	sbc.w	r7, r2, r8
     45c:	fa07 fc0c 	lsl.w	ip, r7, ip
     460:	40cb      	lsrs	r3, r1
     462:	ea4c 0303 	orr.w	r3, ip, r3
     466:	40cf      	lsrs	r7, r1
     468:	e9c6 3700 	strd	r3, r7, [r6]
     46c:	e79c      	b.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     46e:	4640      	mov	r0, r8
     470:	e7c7      	b.n	402 <CONFIG_FLASH_SIZE+0x2>
     472:	4643      	mov	r3, r8
     474:	e7db      	b.n	42e <CONFIG_FLASH_SIZE+0x2e>
     476:	4631      	mov	r1, r6
     478:	e6fd      	b.n	276 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x76>
     47a:	0000      	movs	r0, r0
     47c:	0000      	movs	r0, r0
	...

00000480 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
     480:	2903      	cmp	r1, #3
{
     482:	b573      	push	{r0, r1, r4, r5, r6, lr}
     484:	4614      	mov	r4, r2
     486:	4605      	mov	r5, r0
     488:	461a      	mov	r2, r3
	switch (chan) {
     48a:	d87a      	bhi.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
	switch (attr) {
     48c:	2c04      	cmp	r4, #4
     48e:	d806      	bhi.n	49e <lis2dh_attr_set+0x1e>
     490:	2c02      	cmp	r4, #2
     492:	d870      	bhi.n	576 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8e>
     494:	2c00      	cmp	r4, #0
     496:	d03f      	beq.n	518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>
     498:	f06f 0085 	mvn.w	r0, #133	; 0x85
     49c:	e053      	b.n	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
     49e:	2c06      	cmp	r4, #6
     4a0:	d1fa      	bne.n	498 <lis2dh_attr_set+0x18>
 *
 * @return The converted value, in Gs.
 */
static inline int32_t sensor_ms2_to_g(const struct sensor_value *ms2)
{
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
     4a2:	685b      	ldr	r3, [r3, #4]
     4a4:	6810      	ldr	r0, [r2, #0]
     4a6:	4a3e      	ldr	r2, [pc, #248]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     4a8:	17d9      	asrs	r1, r3, #31
     4aa:	fbc0 3102 	smlal	r3, r1, r0, r2

	if (micro_ms2 > 0) {
     4ae:	2b01      	cmp	r3, #1
     4b0:	f171 0200 	sbcs.w	r2, r1, #0
     4b4:	db22      	blt.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
     4b6:	483b      	ldr	r0, [pc, #236]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     4b8:	1818      	adds	r0, r3, r0
     4ba:	a337      	add	r3, pc, #220	; (adr r3, 598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
     4c0:	f141 0100 	adc.w	r1, r1, #0
	} else {
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
     4c4:	f7ff fe1c 	bl	100 <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
     4c8:	b280      	uxth	r0, r0
     4ca:	2802      	cmp	r0, #2
     4cc:	d01e      	beq.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     4ce:	2804      	cmp	r0, #4
     4d0:	d01e      	beq.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     4d2:	2808      	cmp	r0, #8
     4d4:	d01e      	beq.n	514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
     4d6:	2810      	cmp	r0, #16
     4d8:	d124      	bne.n	524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>
     4da:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
     4dc:	4932      	ldr	r1, [pc, #200]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
	struct lis2dh_data *lis2dh = dev->data;
     4de:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
     4e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
     4e4:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
     4e6:	6852      	ldr	r2, [r2, #4]
     4e8:	6914      	ldr	r4, [r2, #16]
     4ea:	011b      	lsls	r3, r3, #4
     4ec:	2230      	movs	r2, #48	; 0x30
     4ee:	2123      	movs	r1, #35	; 0x23
     4f0:	4628      	mov	r0, r5
     4f2:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
     4f4:	b002      	add	sp, #8
     4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
     4fa:	4760      	bx	ip
     4fc:	482b      	ldr	r0, [pc, #172]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     4fe:	1818      	adds	r0, r3, r0
     500:	f161 0100 	sbc.w	r1, r1, #0
     504:	a324      	add	r3, pc, #144	; (adr r3, 598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     506:	e9d3 2300 	ldrd	r2, r3, [r3]
     50a:	e7db      	b.n	4c4 <lis2dh_attr_set+0x44>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
     50c:	2300      	movs	r3, #0
     50e:	e7e5      	b.n	4dc <lis2dh_attr_set+0x5c>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
     510:	2301      	movs	r3, #1
     512:	e7e3      	b.n	4dc <lis2dh_attr_set+0x5c>
     514:	2302      	movs	r3, #2
     516:	e7e1      	b.n	4dc <lis2dh_attr_set+0x5c>
		return lis2dh_acc_odr_set(dev, val->val1);
     518:	881b      	ldrh	r3, [r3, #0]
	if (freq == 0U) {
     51a:	b11b      	cbz	r3, 524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>
		if (freq == lis2dh_odr_map[i]) {
     51c:	4a24      	ldr	r2, [pc, #144]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
     51e:	3401      	adds	r4, #1
     520:	2c0b      	cmp	r4, #11
     522:	d102      	bne.n	52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
	return -EINVAL;
     524:	f06f 0015 	mvn.w	r0, #21
     528:	e00d      	b.n	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
		if (freq == lis2dh_odr_map[i]) {
     52a:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
     52e:	4299      	cmp	r1, r3
     530:	d1f5      	bne.n	51e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x36>
	struct lis2dh_data *data = dev->data;
     532:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
     534:	6873      	ldr	r3, [r6, #4]
     536:	f10d 0207 	add.w	r2, sp, #7
     53a:	689b      	ldr	r3, [r3, #8]
     53c:	2120      	movs	r1, #32
     53e:	4628      	mov	r0, r5
     540:	4798      	blx	r3
	if (status < 0) {
     542:	2800      	cmp	r0, #0
     544:	da01      	bge.n	54a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x62>
}
     546:	b002      	add	sp, #8
     548:	bd70      	pop	{r4, r5, r6, pc}
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
     54a:	f89d 2007 	ldrb.w	r2, [sp, #7]
     54e:	0711      	lsls	r1, r2, #28
			return i;
     550:	4623      	mov	r3, r4
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
     552:	d40c      	bmi.n	56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
     554:	2c08      	cmp	r4, #8
     556:	d09f      	beq.n	498 <lis2dh_attr_set+0x18>
				      (value & ~LIS2DH_ODR_MASK) |
     558:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
     55c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
     560:	6873      	ldr	r3, [r6, #4]
     562:	b2d2      	uxtb	r2, r2
     564:	68db      	ldr	r3, [r3, #12]
     566:	2120      	movs	r1, #32
     568:	4628      	mov	r0, r5
     56a:	4798      	blx	r3
     56c:	e7eb      	b.n	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
		odr--;
     56e:	2c0a      	cmp	r4, #10
     570:	bf08      	it	eq
     572:	2309      	moveq	r3, #9
     574:	e7f0      	b.n	558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>
		return lis2dh_acc_slope_config(dev, attr, val);
     576:	4621      	mov	r1, r4
}
     578:	b002      	add	sp, #8
     57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return lis2dh_acc_slope_config(dev, attr, val);
     57e:	f004 bf57 	b.w	5430 <lis2dh_acc_slope_config>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     582:	4b0c      	ldr	r3, [pc, #48]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     584:	490c      	ldr	r1, [pc, #48]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
		LOG_WRN("attr_set() not supported on this channel.");
     586:	480d      	ldr	r0, [pc, #52]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
     588:	1ac9      	subs	r1, r1, r3
     58a:	08c9      	lsrs	r1, r1, #3
     58c:	0189      	lsls	r1, r1, #6
     58e:	f041 0102 	orr.w	r1, r1, #2
     592:	f009 fbbf 	bl	9d14 <log_0>
		return -ENOTSUP;
     596:	e77f      	b.n	498 <lis2dh_attr_set+0x18>
     598:	0095a33a 	.word	0x0095a33a
     59c:	00000000 	.word	0x00000000
     5a0:	000f4240 	.word	0x000f4240
     5a4:	004ad19d 	.word	0x004ad19d
     5a8:	20000054 	.word	0x20000054
     5ac:	ffb52e63 	.word	0xffb52e63
     5b0:	0000c4e4 	.word	0x0000c4e4
     5b4:	0000bee4 	.word	0x0000bee4
     5b8:	0000bef4 	.word	0x0000bef4
     5bc:	0000d161 	.word	0x0000d161

000005c0 <boot_log_thread_func>:
 * anywhere else int the code.
 */

/* most simple log processing theread */
void boot_log_thread_func(void *dummy1, void *dummy2, void *dummy3)
{
     5c0:	b510      	push	{r4, lr}
    (void)dummy1;
    (void)dummy2;
    (void)dummy3;

     log_init();
     5c2:	f001 fed3 	bl	236c <log_init>

     while (1) {
             if (log_process(false) == false) {
                    if (boot_log_stop) {
     5c6:	4c09      	ldr	r4, [pc, #36]	; (5ec <boot_log_thread_func+0x2c>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
     5c8:	2000      	movs	r0, #0
     5ca:	f001 ff3f 	bl	244c <z_impl_log_process>
             if (log_process(false) == false) {
     5ce:	2800      	cmp	r0, #0
     5d0:	d1fa      	bne.n	5c8 <boot_log_thread_func+0x8>
                    if (boot_log_stop) {
     5d2:	7823      	ldrb	r3, [r4, #0]
     5d4:	b92b      	cbnz	r3, 5e2 <boot_log_thread_func+0x22>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     5d6:	2100      	movs	r1, #0
     5d8:	f44f 7076 	mov.w	r0, #984	; 0x3d8
     5dc:	f008 faa2 	bl	8b24 <z_impl_k_sleep>
     5e0:	e7f2      	b.n	5c8 <boot_log_thread_func+0x8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     5e2:	4803      	ldr	r0, [pc, #12]	; (5f0 <boot_log_thread_func+0x30>)
                    k_sleep(BOOT_LOG_PROCESSING_INTERVAL);
             }
     }

     k_sem_give(&boot_log_sem);
}
     5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     5e8:	f007 bf7e 	b.w	84e8 <z_impl_k_sem_give>
     5ec:	200029de 	.word	0x200029de
     5f0:	20000200 	.word	0x20000200

000005f4 <zephyr_boot_log_start>:

void zephyr_boot_log_start(void)
{
     5f4:	b510      	push	{r4, lr}
     5f6:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     5f8:	4c0d      	ldr	r4, [pc, #52]	; (630 <zephyr_boot_log_start+0x3c>)
     5fa:	490e      	ldr	r1, [pc, #56]	; (634 <zephyr_boot_log_start+0x40>)
     5fc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
     600:	2300      	movs	r3, #0
     602:	e9cd 2306 	strd	r2, r3, [sp, #24]
     606:	2300      	movs	r3, #0
     608:	f06f 020f 	mvn.w	r2, #15
     60c:	e9cd 2303 	strd	r2, r3, [sp, #12]
     610:	e9cd 3301 	strd	r3, r3, [sp, #4]
     614:	9300      	str	r3, [sp, #0]
     616:	f44f 7240 	mov.w	r2, #768	; 0x300
     61a:	4b07      	ldr	r3, [pc, #28]	; (638 <zephyr_boot_log_start+0x44>)
     61c:	4620      	mov	r0, r4
     61e:	f007 fe0b 	bl	8238 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
     622:	4906      	ldr	r1, [pc, #24]	; (63c <zephyr_boot_log_start+0x48>)
     624:	4620      	mov	r0, r4
                boot_log_thread_func, NULL, NULL, NULL,
                K_HIGHEST_APPLICATION_THREAD_PRIO, 0,
                BOOT_LOG_PROCESSING_INTERVAL);

        k_thread_name_set(&boot_log_thread, "logging");
}
     626:	b008      	add	sp, #32
     628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     62c:	f00b b984 	b.w	b938 <z_impl_k_thread_name_set>
     630:	20000220 	.word	0x20000220
     634:	20003570 	.word	0x20003570
     638:	000005c1 	.word	0x000005c1
     63c:	0000c510 	.word	0x0000c510

00000640 <zephyr_boot_log_stop>:

void zephyr_boot_log_stop(void)
{
    boot_log_stop = true;
     640:	4b04      	ldr	r3, [pc, #16]	; (654 <zephyr_boot_log_stop+0x14>)
     642:	2201      	movs	r2, #1
     644:	701a      	strb	r2, [r3, #0]
	return z_impl_k_sem_take(sem, timeout);
     646:	4804      	ldr	r0, [pc, #16]	; (658 <zephyr_boot_log_stop+0x18>)
     648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     64c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     650:	f007 bf6a 	b.w	8528 <z_impl_k_sem_take>
     654:	200029de 	.word	0x200029de
     658:	20000200 	.word	0x20000200

0000065c <main>:
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     65c:	4b48      	ldr	r3, [pc, #288]	; (780 <FIH_LABEL_FIH_CALL_END_915+0x72>)
     65e:	4a49      	ldr	r2, [pc, #292]	; (784 <FIH_LABEL_FIH_CALL_END_915+0x76>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     660:	4849      	ldr	r0, [pc, #292]	; (788 <FIH_LABEL_FIH_CALL_END_915+0x7a>)
{
     662:	b5f0      	push	{r4, r5, r6, r7, lr}
     664:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     668:	4c48      	ldr	r4, [pc, #288]	; (78c <FIH_LABEL_FIH_CALL_END_915+0x7e>)
     66a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     66e:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     672:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     676:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     67a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     67e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     682:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     686:	4b42      	ldr	r3, [pc, #264]	; (790 <FIH_LABEL_FIH_CALL_END_915+0x82>)
     688:	1ae4      	subs	r4, r4, r3
     68a:	08e4      	lsrs	r4, r4, #3
    BOOT_LOG_INF("Starting bootloader");
     68c:	01a4      	lsls	r4, r4, #6
{
     68e:	b085      	sub	sp, #20
    BOOT_LOG_INF("Starting bootloader");
     690:	f044 0103 	orr.w	r1, r4, #3
     694:	f009 fb3e 	bl	9d14 <log_0>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     698:	f008 fe7a 	bl	9390 <os_heap_init>

    ZEPHYR_BOOT_LOG_START();
     69c:	f7ff ffaa 	bl	5f4 <zephyr_boot_log_start>

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     6a0:	483c      	ldr	r0, [pc, #240]	; (794 <FIH_LABEL_FIH_CALL_END_915+0x86>)
     6a2:	f000 f88b 	bl	7bc <flash_device_get_binding>
     6a6:	b930      	cbnz	r0, 6b6 <main+0x5a>
        BOOT_LOG_ERR("Flash device %s not found",
     6a8:	493a      	ldr	r1, [pc, #232]	; (794 <FIH_LABEL_FIH_CALL_END_915+0x86>)
     6aa:	483b      	ldr	r0, [pc, #236]	; (798 <FIH_LABEL_FIH_CALL_END_915+0x8a>)
     6ac:	f044 0201 	orr.w	r2, r4, #1
     6b0:	f009 fb3d 	bl	9d2e <log_1>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     6b4:	e7fe      	b.n	6b4 <main+0x58>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     6b6:	4839      	ldr	r0, [pc, #228]	; (79c <FIH_LABEL_FIH_CALL_END_915+0x8e>)
     6b8:	f007 fbf0 	bl	7e9c <z_impl_device_get_binding>
     6bc:	4605      	mov	r5, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     6be:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     6c0:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     6c2:	6813      	ldr	r3, [r2, #0]
     6c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     6c8:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
     6ca:	680b      	ldr	r3, [r1, #0]
     6cc:	f44f 7288 	mov.w	r2, #272	; 0x110
     6d0:	211f      	movs	r1, #31
     6d2:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     6d4:	68ab      	ldr	r3, [r5, #8]
     6d6:	a901      	add	r1, sp, #4
     6d8:	685b      	ldr	r3, [r3, #4]
     6da:	4628      	mov	r0, r5
     6dc:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
     6de:	b998      	cbnz	r0, 708 <FIH_LABEL_FIH_CALL_START_902>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     6e0:	9b01      	ldr	r3, [sp, #4]
            ;
    }
#endif

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin(CONFIG_BOOT_SERIAL_DETECT_PORT,
     6e2:	2b00      	cmp	r3, #0
     6e4:	db10      	blt.n	708 <FIH_LABEL_FIH_CALL_START_902>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     6e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     6ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRF_POWER_RESETREAS_RESETPIN_MASK));
     6ee:	b10b      	cbz	r3, 6f4 <main+0x98>
     6f0:	07db      	lsls	r3, r3, #31
     6f2:	d509      	bpl.n	708 <FIH_LABEL_FIH_CALL_START_902>
            !boot_skip_serial_recovery()) {
#ifdef CONFIG_MCUBOOT_INDICATION_LED
        gpio_pin_set(led, LED0_GPIO_PIN, 1);
#endif

        BOOT_LOG_INF("Enter the serial recovery mode");
     6f4:	482a      	ldr	r0, [pc, #168]	; (7a0 <FIH_LABEL_FIH_CALL_END_915+0x92>)
     6f6:	f044 0103 	orr.w	r1, r4, #3
     6fa:	f009 fb0b 	bl	9d14 <log_0>
        rc = boot_console_init();
     6fe:	f002 ffef 	bl	36e0 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     702:	4828      	ldr	r0, [pc, #160]	; (7a4 <FIH_LABEL_FIH_CALL_END_915+0x96>)
     704:	f003 fb7e 	bl	3e04 <boot_serial_start>

00000708 <FIH_LABEL_FIH_CALL_START_902>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     708:	a801      	add	r0, sp, #4
     70a:	f000 fb97 	bl	e3c <boot_go>

0000070e <FIH_LABEL_FIH_CALL_END_915>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     70e:	4b26      	ldr	r3, [pc, #152]	; (7a8 <FIH_LABEL_FIH_CALL_END_915+0x9a>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	4283      	cmp	r3, r0
     714:	d005      	beq.n	722 <FIH_LABEL_FIH_CALL_END_915+0x14>
        BOOT_LOG_ERR("Unable to find bootable image");
     716:	4825      	ldr	r0, [pc, #148]	; (7ac <FIH_LABEL_FIH_CALL_END_915+0x9e>)
     718:	f044 0101 	orr.w	r1, r4, #1
     71c:	f009 fafa 	bl	9d14 <log_0>
        FIH_PANIC;
     720:	e7fe      	b.n	720 <FIH_LABEL_FIH_CALL_END_915+0x12>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     722:	f044 0503 	orr.w	r5, r4, #3
     726:	462a      	mov	r2, r5
     728:	9903      	ldr	r1, [sp, #12]
     72a:	4821      	ldr	r0, [pc, #132]	; (7b0 <FIH_LABEL_FIH_CALL_END_915+0xa2>)
     72c:	f009 faff 	bl	9d2e <log_1>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     730:	4629      	mov	r1, r5
     732:	4820      	ldr	r0, [pc, #128]	; (7b4 <FIH_LABEL_FIH_CALL_END_915+0xa6>)
     734:	f009 faee 	bl	9d14 <log_0>
#endif /* USE_PARTITION_MANAGER && CONFIG_FPROTECT */
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && defined(PM_CPUNET_B0N_ADDRESS)
    pcd_lock_ram();
#endif

    ZEPHYR_BOOT_LOG_STOP();
     738:	f7ff ff82 	bl	640 <zephyr_boot_log_stop>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     73c:	4669      	mov	r1, sp
     73e:	f89d 0008 	ldrb.w	r0, [sp, #8]
     742:	f000 f847 	bl	7d4 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     746:	9b00      	ldr	r3, [sp, #0]
     748:	9d03      	ldr	r5, [sp, #12]
     74a:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     74c:	9b01      	ldr	r3, [sp, #4]
     74e:	891e      	ldrh	r6, [r3, #8]
    sys_clock_disable();
     750:	f009 ff86 	bl	a660 <sys_clock_disable>
                                     rsp->br_image_off +
     754:	19af      	adds	r7, r5, r6
    nrf_cleanup_peripheral();
     756:	f000 ff5b 	bl	1610 <nrf_cleanup_peripheral>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     75a:	f04f 0220 	mov.w	r2, #32
     75e:	f3ef 8311 	mrs	r3, BASEPRI
     762:	f382 8811 	msr	BASEPRI, r2
     766:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     76a:	59ab      	ldr	r3, [r5, r6]
     76c:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     770:	687b      	ldr	r3, [r7, #4]
     772:	4798      	blx	r3

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     774:	4810      	ldr	r0, [pc, #64]	; (7b8 <FIH_LABEL_FIH_CALL_END_915+0xaa>)
     776:	f044 0101 	orr.w	r1, r4, #1
     77a:	f009 facb 	bl	9d14 <log_0>
    while (1)
     77e:	e7fe      	b.n	77e <FIH_LABEL_FIH_CALL_END_915+0x70>
     780:	40010000 	.word	0x40010000
     784:	6e524635 	.word	0x6e524635
     788:	0000c518 	.word	0x0000c518
     78c:	0000bf04 	.word	0x0000bf04
     790:	0000bee4 	.word	0x0000bee4
     794:	0000c52c 	.word	0x0000c52c
     798:	0000c53f 	.word	0x0000c53f
     79c:	0000c559 	.word	0x0000c559
     7a0:	0000c560 	.word	0x0000c560
     7a4:	0000bfd8 	.word	0x0000bfd8
     7a8:	200008bc 	.word	0x200008bc
     7ac:	0000c57f 	.word	0x0000c57f
     7b0:	0000c59d 	.word	0x0000c59d
     7b4:	0000c5c7 	.word	0x0000c5c7
     7b8:	0000c5e7 	.word	0x0000c5e7

000007bc <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     7bc:	b510      	push	{r4, lr}
    if (!flash_dev) {
     7be:	4c04      	ldr	r4, [pc, #16]	; (7d0 <flash_device_get_binding+0x14>)
     7c0:	6823      	ldr	r3, [r4, #0]
     7c2:	b913      	cbnz	r3, 7ca <flash_device_get_binding+0xe>
     7c4:	f007 fb6a 	bl	7e9c <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     7c8:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     7ca:	6820      	ldr	r0, [r4, #0]
     7cc:	bd10      	pop	{r4, pc}
     7ce:	bf00      	nop
     7d0:	200008b8 	.word	0x200008b8

000007d4 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     7d4:	b508      	push	{r3, lr}
     7d6:	460b      	mov	r3, r1
    if (fd_id != FLASH_DEVICE_ID) {
     7d8:	4601      	mov	r1, r0
     7da:	b168      	cbz	r0, 7f8 <flash_device_base+0x24>
     7dc:	4a07      	ldr	r2, [pc, #28]	; (7fc <flash_device_base+0x28>)
     7de:	4b08      	ldr	r3, [pc, #32]	; (800 <CONFIG_ISR_STACK_SIZE>)
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     7e0:	4808      	ldr	r0, [pc, #32]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7e2:	1a9b      	subs	r3, r3, r2
     7e4:	08db      	lsrs	r3, r3, #3
     7e6:	019b      	lsls	r3, r3, #6
     7e8:	f043 0301 	orr.w	r3, r3, #1
     7ec:	2200      	movs	r2, #0
     7ee:	f009 fab2 	bl	9d56 <log_2>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     7f2:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     7f6:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     7f8:	6018      	str	r0, [r3, #0]
    return 0;
     7fa:	e7fc      	b.n	7f6 <flash_device_base+0x22>
     7fc:	0000bee4 	.word	0x0000bee4
     800:	0000bf04 	.word	0x0000bf04
     804:	0000c605 	.word	0x0000c605

00000808 <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     80a:	4a07      	ldr	r2, [pc, #28]	; (828 <flash_area_sector_from_off+0x20>)
{
     80c:	4603      	mov	r3, r0
     80e:	460c      	mov	r4, r1
    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     810:	6810      	ldr	r0, [r2, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     812:	aa01      	add	r2, sp, #4
     814:	4619      	mov	r1, r3
     816:	f00a fcc2 	bl	b19e <z_impl_flash_get_page_info_by_offs>
    if (rc) {
     81a:	b918      	cbnz	r0, 824 <flash_area_sector_from_off+0x1c>
        return rc;
    }

    sector->fs_off = page.start_offset;
     81c:	9b01      	ldr	r3, [sp, #4]
     81e:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     820:	9b02      	ldr	r3, [sp, #8]
     822:	6063      	str	r3, [r4, #4]

    return rc;
}
     824:	b004      	add	sp, #16
     826:	bd10      	pop	{r4, pc}
     828:	200008b8 	.word	0x200008b8

0000082c <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     830:	b0af      	sub	sp, #188	; 0xbc
     832:	e9dd 593a 	ldrd	r5, r9, [sp, #232]	; 0xe8
     836:	4698      	mov	r8, r3
#endif /* EXPECTED_SIG_TLV */
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc = 0;
    fih_int fih_rc = FIH_FAILURE;
     838:	4b3a      	ldr	r3, [pc, #232]	; (924 <FIH_LABEL_FIH_CALL_END_288+0x4e>)
{
     83a:	f8dd b0e0 	ldr.w	fp, [sp, #224]	; 0xe0
     83e:	9f3c      	ldr	r7, [sp, #240]	; 0xf0
    fih_int fih_rc = FIH_FAILURE;
     840:	681e      	ldr	r6, [r3, #0]

#if defined(MCUBOOT_USE_TINYCRYPT)
typedef struct tc_sha256_state_struct bootutil_sha256_context;
static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    tc_sha256_init(ctx);
     842:	a812      	add	r0, sp, #72	; 0x48
{
     844:	4614      	mov	r4, r2
     846:	f000 feb7 	bl	15b8 <tc_sha256_init>
    if (seed && (seed_len > 0)) {
     84a:	b13d      	cbz	r5, 85c <bootutil_img_validate+0x30>
     84c:	f1b9 0f00 	cmp.w	r9, #0
     850:	dd04      	ble.n	85c <bootutil_img_validate+0x30>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return tc_sha256_update(ctx, data, data_len);
     852:	464a      	mov	r2, r9
     854:	4629      	mov	r1, r5
     856:	a812      	add	r0, sp, #72	; 0x48
     858:	f009 f802 	bl	9860 <tc_sha256_update>
    size += hdr->ih_protect_tlv_size;
     85c:	8963      	ldrh	r3, [r4, #10]
    size = hdr_size = hdr->ih_hdr_size;
     85e:	8925      	ldrh	r5, [r4, #8]
     860:	441d      	add	r5, r3
    size += hdr->ih_protect_tlv_size;
     862:	68e3      	ldr	r3, [r4, #12]
    for (off = 0; off < size; off += blk_sz) {
     864:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     868:	441d      	add	r5, r3
    for (off = 0; off < size; off += blk_sz) {
     86a:	454d      	cmp	r5, r9
     86c:	d83b      	bhi.n	8e6 <FIH_LABEL_FIH_CALL_END_288+0x10>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return tc_sha256_final(output, ctx);
     86e:	a912      	add	r1, sp, #72	; 0x48
     870:	a80a      	add	r0, sp, #40	; 0x28
     872:	f009 f81b 	bl	98ac <tc_sha256_final>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     876:	b127      	cbz	r7, 882 <bootutil_img_validate+0x56>
        memcpy(out_hash, hash, 32);
     878:	2220      	movs	r2, #32
     87a:	a90a      	add	r1, sp, #40	; 0x28
     87c:	4638      	mov	r0, r7
     87e:	f00a f9cd 	bl	ac1c <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     882:	2300      	movs	r3, #0
     884:	9300      	str	r3, [sp, #0]
     886:	4642      	mov	r2, r8
     888:	f64f 73ff 	movw	r3, #65535	; 0xffff
     88c:	4621      	mov	r1, r4
     88e:	a804      	add	r0, sp, #16
     890:	f008 fd7f 	bl	9392 <bootutil_tlv_iter_begin>
    if (rc) {
     894:	bb20      	cbnz	r0, 8e0 <FIH_LABEL_FIH_CALL_END_288+0xa>
            if (rc) {
                goto out;
            }

            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     896:	4d24      	ldr	r5, [pc, #144]	; (928 <FIH_LABEL_FIH_CALL_END_288+0x52>)
    int sha256_valid = 0;
     898:	4604      	mov	r4, r0
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     89a:	f10d 030a 	add.w	r3, sp, #10
     89e:	aa02      	add	r2, sp, #8
     8a0:	a903      	add	r1, sp, #12
     8a2:	a804      	add	r0, sp, #16
     8a4:	f008 fdc1 	bl	942a <bootutil_tlv_iter_next>
        if (rc < 0) {
     8a8:	2800      	cmp	r0, #0
     8aa:	db19      	blt.n	8e0 <FIH_LABEL_FIH_CALL_END_288+0xa>
        } else if (rc > 0) {
     8ac:	d131      	bne.n	912 <FIH_LABEL_FIH_CALL_END_288+0x3c>
        if (type == IMAGE_TLV_SHA256) {
     8ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
     8b2:	2b10      	cmp	r3, #16
     8b4:	d1f1      	bne.n	89a <bootutil_img_validate+0x6e>
            if (len != sizeof(hash)) {
     8b6:	f8bd 4008 	ldrh.w	r4, [sp, #8]
     8ba:	2c20      	cmp	r4, #32
     8bc:	d12e      	bne.n	91c <FIH_LABEL_FIH_CALL_END_288+0x46>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     8be:	9903      	ldr	r1, [sp, #12]
     8c0:	4623      	mov	r3, r4
     8c2:	aa12      	add	r2, sp, #72	; 0x48
     8c4:	4640      	mov	r0, r8
     8c6:	f009 fda2 	bl	a40e <flash_area_read>
            if (rc) {
     8ca:	b948      	cbnz	r0, 8e0 <FIH_LABEL_FIH_CALL_END_288+0xa>

000008cc <FIH_LABEL_FIH_CALL_START_271>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     8cc:	4622      	mov	r2, r4
     8ce:	a912      	add	r1, sp, #72	; 0x48
     8d0:	a80a      	add	r0, sp, #40	; 0x28
     8d2:	f008 fdf5 	bl	94c0 <boot_fih_memequal>

000008d6 <FIH_LABEL_FIH_CALL_END_288>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     8d6:	682e      	ldr	r6, [r5, #0]
     8d8:	4286      	cmp	r6, r0
                goto out;
            }

            sha256_valid = 1;
     8da:	f04f 0401 	mov.w	r4, #1
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     8de:	d0dc      	beq.n	89a <bootutil_img_validate+0x6e>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     8e0:	b02f      	add	sp, #188	; 0xbc
     8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        blk_sz = size - off;
     8e6:	f8dd a0e4 	ldr.w	sl, [sp, #228]	; 0xe4
     8ea:	eba5 0309 	sub.w	r3, r5, r9
        if (blk_sz > tmp_buf_sz) {
     8ee:	459a      	cmp	sl, r3
     8f0:	bf28      	it	cs
     8f2:	469a      	movcs	sl, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     8f4:	4653      	mov	r3, sl
     8f6:	465a      	mov	r2, fp
     8f8:	4649      	mov	r1, r9
     8fa:	4640      	mov	r0, r8
     8fc:	f009 fd87 	bl	a40e <flash_area_read>
        if (rc) {
     900:	2800      	cmp	r0, #0
     902:	d1ed      	bne.n	8e0 <FIH_LABEL_FIH_CALL_END_288+0xa>
    return tc_sha256_update(ctx, data, data_len);
     904:	4652      	mov	r2, sl
     906:	4659      	mov	r1, fp
     908:	a812      	add	r0, sp, #72	; 0x48
     90a:	f008 ffa9 	bl	9860 <tc_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     90e:	44d1      	add	r9, sl
     910:	e7ab      	b.n	86a <bootutil_img_validate+0x3e>
    if (rc) {
     912:	2c01      	cmp	r4, #1
     914:	bf0c      	ite	eq
     916:	4630      	moveq	r0, r6
     918:	2001      	movne	r0, #1
     91a:	e7e1      	b.n	8e0 <FIH_LABEL_FIH_CALL_END_288+0xa>
                rc = -1;
     91c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     920:	e7de      	b.n	8e0 <FIH_LABEL_FIH_CALL_END_288+0xa>
     922:	bf00      	nop
     924:	20000000 	.word	0x20000000
     928:	200008bc 	.word	0x200008bc

0000092c <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     930:	b086      	sub	sp, #24
    uint8_t areas[2] = {
     932:	2304      	movs	r3, #4
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     934:	f8df 8070 	ldr.w	r8, [pc, #112]	; 9a8 <boot_read_swap_size+0x7c>
    uint8_t areas[2] = {
     938:	f8ad 3000 	strh.w	r3, [sp]
{
     93c:	460d      	mov	r5, r1
     93e:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     940:	2600      	movs	r6, #0
        rc = flash_area_open(areas[i], fap);
     942:	f817 0b01 	ldrb.w	r0, [r7], #1
     946:	a901      	add	r1, sp, #4
     948:	f002 f9cc 	bl	2ce4 <flash_area_open>
        if (rc != 0) {
     94c:	4604      	mov	r4, r0
     94e:	b9d8      	cbnz	r0, 988 <boot_read_swap_size+0x5c>
        off = boot_magic_off(*fap);
     950:	9801      	ldr	r0, [sp, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
     952:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     954:	2310      	movs	r3, #16
     956:	aa02      	add	r2, sp, #8
     958:	3910      	subs	r1, #16
     95a:	f009 fd58 	bl	a40e <flash_area_read>
        if (rc != 0) {
     95e:	4604      	mov	r4, r0
     960:	b128      	cbz	r0, 96e <boot_read_swap_size+0x42>

    rc = boot_find_status(image_index, &fap);
    if (rc == 0) {
        off = boot_swap_size_off(fap);
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
     962:	9801      	ldr	r0, [sp, #4]
     964:	f009 fd52 	bl	a40c <flash_area_close>
     968:	e00e      	b.n	988 <boot_read_swap_size+0x5c>
     96a:	2601      	movs	r6, #1
     96c:	e7e9      	b.n	942 <boot_read_swap_size+0x16>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     96e:	2210      	movs	r2, #16
     970:	4641      	mov	r1, r8
     972:	a802      	add	r0, sp, #8
     974:	f00a f929 	bl	abca <memcmp>
     978:	b150      	cbz	r0, 990 <boot_read_swap_size+0x64>
        flash_area_close(*fap);
     97a:	9801      	ldr	r0, [sp, #4]
     97c:	f009 fd46 	bl	a40c <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     980:	2e00      	cmp	r6, #0
     982:	d0f2      	beq.n	96a <boot_read_swap_size+0x3e>
    return -1;
     984:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    }

    return rc;
}
     988:	4620      	mov	r0, r4
     98a:	b006      	add	sp, #24
     98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     990:	9801      	ldr	r0, [sp, #4]
     992:	f00a fdd0 	bl	b536 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     996:	2304      	movs	r3, #4
     998:	f1a0 0108 	sub.w	r1, r0, #8
     99c:	462a      	mov	r2, r5
     99e:	9801      	ldr	r0, [sp, #4]
     9a0:	f009 fd35 	bl	a40e <flash_area_read>
     9a4:	4604      	mov	r4, r0
     9a6:	e7dc      	b.n	962 <boot_read_swap_size+0x36>
     9a8:	0000c420 	.word	0x0000c420

000009ac <boot_validate_slot.constprop.0.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     9ac:	b570      	push	{r4, r5, r6, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     9ae:	4b34      	ldr	r3, [pc, #208]	; (a80 <FIH_LABEL_FIH_CALL_END_275+0x7c>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     9b0:	b088      	sub	sp, #32
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9b2:	2101      	movs	r1, #1
boot_validate_slot(struct boot_loader_state *state, int slot,
     9b4:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9b6:	2000      	movs	r0, #0
    fih_int fih_rc = FIH_FAILURE;
     9b8:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9ba:	f008 fce0 	bl	937e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     9be:	a906      	add	r1, sp, #24
     9c0:	b2c0      	uxtb	r0, r0
     9c2:	f002 f98f 	bl	2ce4 <flash_area_open>
    if (rc != 0) {
     9c6:	2800      	cmp	r0, #0
     9c8:	d152      	bne.n	a70 <FIH_LABEL_FIH_CALL_END_275+0x6c>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9ca:	2101      	movs	r1, #1
     9cc:	f008 fcd7 	bl	937e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     9d0:	a907      	add	r1, sp, #28
     9d2:	b2c0      	uxtb	r0, r0
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     9d4:	f104 062c 	add.w	r6, r4, #44	; 0x2c
     9d8:	f002 f984 	bl	2ce4 <flash_area_open>
    if (rc != 0) {
     9dc:	2800      	cmp	r0, #0
     9de:	d033      	beq.n	a48 <FIH_LABEL_FIH_CALL_END_275+0x44>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     9e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if (boot_check_header_erased(state, slot) == 0 ||
     9e2:	f011 0110 	ands.w	r1, r1, #16
     9e6:	d13b      	bne.n	a60 <FIH_LABEL_FIH_CALL_END_275+0x5c>

000009e8 <FIH_LABEL_FIH_CALL_START_219>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     9e8:	f44f 7380 	mov.w	r3, #256	; 0x100
     9ec:	9301      	str	r3, [sp, #4]
     9ee:	4b25      	ldr	r3, [pc, #148]	; (a84 <FIH_LABEL_FIH_CALL_END_275+0x80>)
     9f0:	9300      	str	r3, [sp, #0]
     9f2:	e9cd 1103 	strd	r1, r1, [sp, #12]
     9f6:	9b06      	ldr	r3, [sp, #24]
     9f8:	9102      	str	r1, [sp, #8]
     9fa:	4632      	mov	r2, r6
     9fc:	4608      	mov	r0, r1
     9fe:	f7ff ff15 	bl	82c <bootutil_img_validate>
     a02:	4605      	mov	r5, r0

00000a04 <FIH_LABEL_FIH_CALL_END_275>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a04:	4b20      	ldr	r3, [pc, #128]	; (a88 <FIH_LABEL_FIH_CALL_END_275+0x84>)
     a06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, BOOT_HOOK_REGULAR))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a08:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a0a:	429a      	cmp	r2, r3
     a0c:	d10c      	bne.n	a28 <FIH_LABEL_FIH_CALL_END_275+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a0e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
     a10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (a > UINT32_MAX - b) {
     a12:	43d1      	mvns	r1, r2
     a14:	428b      	cmp	r3, r1
     a16:	d807      	bhi.n	a28 <FIH_LABEL_FIH_CALL_END_275+0x24>
        *dest = a + b;
     a18:	4413      	add	r3, r2
    if (size >= fap->fa_size) {
     a1a:	6882      	ldr	r2, [r0, #8]
     a1c:	429a      	cmp	r2, r3
     a1e:	d903      	bls.n	a28 <FIH_LABEL_FIH_CALL_END_275+0x24>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a20:	4b1a      	ldr	r3, [pc, #104]	; (a8c <FIH_LABEL_FIH_CALL_END_275+0x88>)
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	42ab      	cmp	r3, r5
     a26:	d020      	beq.n	a6a <FIH_LABEL_FIH_CALL_END_275+0x66>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
            flash_area_erase(fap, 0, fap->fa_size);
     a28:	6882      	ldr	r2, [r0, #8]
     a2a:	2100      	movs	r1, #0
     a2c:	f009 fd3e 	bl	a4ac <flash_area_erase>
     a30:	4b17      	ldr	r3, [pc, #92]	; (a90 <FIH_LABEL_FIH_CALL_END_275+0x8c>)
     a32:	4a18      	ldr	r2, [pc, #96]	; (a94 <FIH_LABEL_FIH_CALL_END_275+0x90>)
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a34:	4918      	ldr	r1, [pc, #96]	; (a98 <FIH_LABEL_FIH_CALL_END_275+0x94>)
     a36:	4819      	ldr	r0, [pc, #100]	; (a9c <FIH_LABEL_FIH_CALL_END_275+0x98>)
     a38:	1ad2      	subs	r2, r2, r3
     a3a:	08d2      	lsrs	r2, r2, #3
     a3c:	0192      	lsls	r2, r2, #6
     a3e:	f042 0201 	orr.w	r2, r2, #1
     a42:	f009 f974 	bl	9d2e <log_1>
     a46:	e00f      	b.n	a68 <FIH_LABEL_FIH_CALL_END_275+0x64>
    erased_val = flash_area_erased_val(fap);
     a48:	9807      	ldr	r0, [sp, #28]
     a4a:	f009 fd67 	bl	a51c <flash_area_erased_val>
     a4e:	4605      	mov	r5, r0
    flash_area_close(fap);
     a50:	9807      	ldr	r0, [sp, #28]
     a52:	f009 fcdb 	bl	a40c <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     a56:	4633      	mov	r3, r6
     a58:	f104 0230 	add.w	r2, r4, #48	; 0x30
    for (i = 0; i < len; i++) {
     a5c:	429a      	cmp	r2, r3
     a5e:	d10a      	bne.n	a76 <FIH_LABEL_FIH_CALL_END_275+0x72>
            swap_erase_trailer_sectors(state, fap);
     a60:	9906      	ldr	r1, [sp, #24]
     a62:	4620      	mov	r0, r4
     a64:	f008 fe24 	bl	96b0 <swap_erase_trailer_sectors>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        fih_rc = fih_int_encode(1);
     a68:	2501      	movs	r5, #1
        goto out;
    }

out:
    flash_area_close(fap);
     a6a:	9806      	ldr	r0, [sp, #24]
     a6c:	f009 fcce 	bl	a40c <flash_area_close>

    FIH_RET(fih_rc);
}
     a70:	4628      	mov	r0, r5
     a72:	b008      	add	sp, #32
     a74:	bd70      	pop	{r4, r5, r6, pc}
        if (val != p[i]) {
     a76:	f813 1b01 	ldrb.w	r1, [r3], #1
     a7a:	428d      	cmp	r5, r1
     a7c:	d0ee      	beq.n	a5c <FIH_LABEL_FIH_CALL_END_275+0x58>
     a7e:	e7af      	b.n	9e0 <boot_validate_slot.constprop.0.isra.0+0x34>
     a80:	20000000 	.word	0x20000000
     a84:	200029df 	.word	0x200029df
     a88:	96f3b83d 	.word	0x96f3b83d
     a8c:	200008bc 	.word	0x200008bc
     a90:	0000bee4 	.word	0x0000bee4
     a94:	0000bf04 	.word	0x0000bf04
     a98:	0000c626 	.word	0x0000c626
     a9c:	0000c630 	.word	0x0000c630

00000aa0 <boot_swap_image.isra.0>:
 *                                  function on return.
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
     aa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
     aa2:	460d      	mov	r5, r1
     aa4:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     aa6:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     aa8:	4628      	mov	r0, r5
    size = copy_size = 0;
     aaa:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     aae:	f008 fdbe 	bl	962e <boot_status_is_reset>
     ab2:	b1e8      	cbz	r0, af0 <boot_swap_image.isra.0+0x50>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     ab4:	4e12      	ldr	r6, [pc, #72]	; (b00 <boot_swap_image.isra.0+0x60>)
     ab6:	6823      	ldr	r3, [r4, #0]
     ab8:	42b3      	cmp	r3, r6
     aba:	d103      	bne.n	ac4 <boot_swap_image.isra.0+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     abc:	aa01      	add	r2, sp, #4
     abe:	4620      	mov	r0, r4
     ac0:	f008 fd49 	bl	9556 <boot_read_image_size.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     ac4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     ac6:	42b3      	cmp	r3, r6
     ac8:	d104      	bne.n	ad4 <boot_swap_image.isra.0+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     aca:	466a      	mov	r2, sp
     acc:	2101      	movs	r1, #1
     ace:	4620      	mov	r0, r4
     ad0:	f008 fd41 	bl	9556 <boot_read_image_size.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     ad4:	e9dd 3200 	ldrd	r3, r2, [sp]
     ad8:	4293      	cmp	r3, r2
            copy_size = size;
     ada:	bf88      	it	hi
     adc:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     ade:	9b01      	ldr	r3, [sp, #4]
     ae0:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     ae2:	9a01      	ldr	r2, [sp, #4]
     ae4:	4629      	mov	r1, r5
     ae6:	4620      	mov	r0, r4
     ae8:	f000 fb90 	bl	120c <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
     aec:	b002      	add	sp, #8
     aee:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     af0:	f105 0108 	add.w	r1, r5, #8
     af4:	f7ff ff1a 	bl	92c <boot_read_swap_size>
        copy_size = bs->swap_size;
     af8:	68ab      	ldr	r3, [r5, #8]
     afa:	9301      	str	r3, [sp, #4]
     afc:	e7f1      	b.n	ae2 <boot_swap_image.isra.0+0x42>
     afe:	bf00      	nop
     b00:	96f3b83d 	.word	0x96f3b83d

00000b04 <boot_copy_region>:
{
     b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b08:	f8df b070 	ldr.w	fp, [pc, #112]	; b7c <boot_copy_region+0x78>
     b0c:	4c1c      	ldr	r4, [pc, #112]	; (b80 <boot_copy_region+0x7c>)
     b0e:	4d1d      	ldr	r5, [pc, #116]	; (b84 <boot_copy_region+0x80>)
{
     b10:	4688      	mov	r8, r1
     b12:	4691      	mov	r9, r2
     b14:	469a      	mov	sl, r3
    bytes_copied = 0;
     b16:	2600      	movs	r6, #0
    while (bytes_copied < sz) {
     b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b1a:	429e      	cmp	r6, r3
     b1c:	d301      	bcc.n	b22 <boot_copy_region+0x1e>
    return 0;
     b1e:	2000      	movs	r0, #0
     b20:	e00f      	b.n	b42 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b24:	4a15      	ldr	r2, [pc, #84]	; (b7c <boot_copy_region+0x78>)
        if (sz - bytes_copied > sizeof buf) {
     b26:	1b9f      	subs	r7, r3, r6
     b28:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b2c:	bf28      	it	cs
     b2e:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b32:	463b      	mov	r3, r7
     b34:	eb06 010a 	add.w	r1, r6, sl
     b38:	4640      	mov	r0, r8
     b3a:	f009 fc68 	bl	a40e <flash_area_read>
        if (rc != 0) {
     b3e:	b110      	cbz	r0, b46 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b40:	2001      	movs	r0, #1
}
     b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b46:	990a      	ldr	r1, [sp, #40]	; 0x28
     b48:	463b      	mov	r3, r7
     b4a:	465a      	mov	r2, fp
     b4c:	1871      	adds	r1, r6, r1
     b4e:	4648      	mov	r0, r9
     b50:	f009 fc79 	bl	a446 <flash_area_write>
        if (rc != 0) {
     b54:	2800      	cmp	r0, #0
     b56:	d1f3      	bne.n	b40 <boot_copy_region+0x3c>
     b58:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     b5c:	443e      	add	r6, r7
     b5e:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     b62:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     b66:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     b6a:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     b6e:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     b72:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     b76:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     b7a:	e7cd      	b.n	b18 <boot_copy_region+0x14>
     b7c:	20000920 	.word	0x20000920
     b80:	40010000 	.word	0x40010000
     b84:	6e524635 	.word	0x6e524635

00000b88 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     b88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     b8c:	4b9f      	ldr	r3, [pc, #636]	; (e0c <FIH_LABEL_FIH_CALL_END_2292+0xe0>)
{
     b8e:	4604      	mov	r4, r0
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     b90:	2260      	movs	r2, #96	; 0x60
{
     b92:	460f      	mov	r7, r1
    memset(state, 0, sizeof(struct boot_loader_state));
     b94:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     b96:	681e      	ldr	r6, [r3, #0]
    memset(state, 0, sizeof(struct boot_loader_state));
     b98:	f00a f84b 	bl	ac32 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b9c:	4b9c      	ldr	r3, [pc, #624]	; (e10 <FIH_LABEL_FIH_CALL_END_2292+0xe4>)
     b9e:	6263      	str	r3, [r4, #36]	; 0x24

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ba0:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     ba2:	4b9c      	ldr	r3, [pc, #624]	; (e14 <FIH_LABEL_FIH_CALL_END_2292+0xe8>)
     ba4:	6523      	str	r3, [r4, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ba6:	4608      	mov	r0, r1
     ba8:	f008 fbe9 	bl	937e <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     bac:	f104 0120 	add.w	r1, r4, #32
     bb0:	b2c0      	uxtb	r0, r0
     bb2:	f002 f897 	bl	2ce4 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bb6:	2101      	movs	r1, #1
     bb8:	2000      	movs	r0, #0
     bba:	f008 fbe0 	bl	937e <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     bbe:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     bc2:	b2c0      	uxtb	r0, r0
     bc4:	f002 f88e 	bl	2ce4 <flash_area_open>
    rc = boot_read_sectors(state);
     bc8:	4620      	mov	r0, r4
     bca:	f008 fd05 	bl	95d8 <boot_read_sectors>
    if (rc != 0) {
     bce:	4605      	mov	r5, r0
     bd0:	b998      	cbnz	r0, bfa <context_boot_go+0x72>
    rc = boot_read_image_headers(state, false, NULL);
     bd2:	2200      	movs	r2, #0
     bd4:	4611      	mov	r1, r2
     bd6:	4620      	mov	r0, r4
     bd8:	f008 fca5 	bl	9526 <boot_read_image_headers>
    if (rc != 0) {
     bdc:	4605      	mov	r5, r0
     bde:	b368      	cbz	r0, c3c <context_boot_go+0xb4>
     be0:	4a8d      	ldr	r2, [pc, #564]	; (e18 <FIH_LABEL_FIH_CALL_END_2292+0xec>)
     be2:	4b8e      	ldr	r3, [pc, #568]	; (e1c <FIH_LABEL_FIH_CALL_END_2292+0xf0>)
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     be4:	488e      	ldr	r0, [pc, #568]	; (e20 <FIH_LABEL_FIH_CALL_END_2292+0xf4>)
     be6:	1ad2      	subs	r2, r2, r3
     be8:	08d2      	lsrs	r2, r2, #3
     bea:	0192      	lsls	r2, r2, #6
     bec:	f042 0202 	orr.w	r2, r2, #2
     bf0:	2100      	movs	r1, #0
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     bf2:	f009 f89c 	bl	9d2e <log_1>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bf6:	2301      	movs	r3, #1
     bf8:	e09f      	b.n	d3a <FIH_LABEL_FIH_CALL_END_2292+0xe>
     bfa:	4b88      	ldr	r3, [pc, #544]	; (e1c <FIH_LABEL_FIH_CALL_END_2292+0xf0>)
     bfc:	4a86      	ldr	r2, [pc, #536]	; (e18 <FIH_LABEL_FIH_CALL_END_2292+0xec>)
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     bfe:	4889      	ldr	r0, [pc, #548]	; (e24 <FIH_LABEL_FIH_CALL_END_2292+0xf8>)
     c00:	1ad2      	subs	r2, r2, r3
     c02:	08d2      	lsrs	r2, r2, #3
     c04:	0192      	lsls	r2, r2, #6
     c06:	f042 0202 	orr.w	r2, r2, #2
     c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
     c0e:	f009 f88e 	bl	9d2e <log_1>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c12:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     c14:	429d      	cmp	r5, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c16:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     c1a:	d1da      	bne.n	bd2 <context_boot_go+0x4a>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c1c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     c20:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     c24:	2b04      	cmp	r3, #4
     c26:	f200 808b 	bhi.w	d40 <FIH_LABEL_FIH_CALL_END_2292+0x14>
     c2a:	2b01      	cmp	r3, #1
     c2c:	f200 808f 	bhi.w	d4e <FIH_LABEL_FIH_CALL_END_2292+0x22>
     c30:	f000 80a2 	beq.w	d78 <FIH_LABEL_FIH_CALL_END_2292+0x4c>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c34:	23ff      	movs	r3, #255	; 0xff
     c36:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c3a:	e09d      	b.n	d78 <FIH_LABEL_FIH_CALL_END_2292+0x4c>
    if (boot_slots_compatible(state)) {
     c3c:	4620      	mov	r0, r4
     c3e:	f000 f9c3 	bl	fc8 <boot_slots_compatible>
     c42:	2800      	cmp	r0, #0
     c44:	d0d7      	beq.n	bf6 <context_boot_go+0x6e>
        boot_status_reset(bs);
     c46:	4668      	mov	r0, sp
     c48:	f008 fce8 	bl	961c <boot_status_reset>
        rc = swap_read_status(state, bs);
     c4c:	4669      	mov	r1, sp
     c4e:	4620      	mov	r0, r4
     c50:	f008 fd83 	bl	975a <swap_read_status>
        if (rc != 0) {
     c54:	b148      	cbz	r0, c6a <context_boot_go+0xe2>
     c56:	4a70      	ldr	r2, [pc, #448]	; (e18 <FIH_LABEL_FIH_CALL_END_2292+0xec>)
     c58:	4b70      	ldr	r3, [pc, #448]	; (e1c <FIH_LABEL_FIH_CALL_END_2292+0xf0>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c5a:	4873      	ldr	r0, [pc, #460]	; (e28 <FIH_LABEL_FIH_CALL_END_2292+0xfc>)
     c5c:	1ad2      	subs	r2, r2, r3
     c5e:	08d2      	lsrs	r2, r2, #3
     c60:	0192      	lsls	r2, r2, #6
     c62:	f042 0202 	orr.w	r2, r2, #2
     c66:	4629      	mov	r1, r5
     c68:	e7c3      	b.n	bf2 <context_boot_go+0x6a>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     c6a:	4668      	mov	r0, sp
     c6c:	f008 fcdf 	bl	962e <boot_status_is_reset>
     c70:	f080 0101 	eor.w	r1, r0, #1
     c74:	466a      	mov	r2, sp
     c76:	b2c9      	uxtb	r1, r1
     c78:	4620      	mov	r0, r4
     c7a:	f008 fc54 	bl	9526 <boot_read_image_headers>
        if (rc != 0) {
     c7e:	4602      	mov	r2, r0
     c80:	2800      	cmp	r0, #0
     c82:	d1ad      	bne.n	be0 <context_boot_go+0x58>
        if (!boot_status_is_reset(bs)) {
     c84:	4668      	mov	r0, sp
     c86:	f008 fcd2 	bl	962e <boot_status_is_reset>
     c8a:	4605      	mov	r5, r0
     c8c:	bb90      	cbnz	r0, cf4 <context_boot_go+0x16c>
    rc = boot_swap_image(state, bs);
     c8e:	4669      	mov	r1, sp
     c90:	4620      	mov	r0, r4
     c92:	f7ff ff05 	bl	aa0 <boot_swap_image.isra.0>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c9a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     c9e:	3b03      	subs	r3, #3
     ca0:	2b01      	cmp	r3, #1
     ca2:	d806      	bhi.n	cb2 <context_boot_go+0x12a>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     ca4:	4628      	mov	r0, r5
     ca6:	f008 fda6 	bl	97f6 <swap_set_image_ok>
        if (rc != 0) {
     caa:	b110      	cbz	r0, cb2 <context_boot_go+0x12a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cac:	23ff      	movs	r3, #255	; 0xff
     cae:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cb6:	3b02      	subs	r3, #2
     cb8:	2b02      	cmp	r3, #2
     cba:	d811      	bhi.n	ce0 <context_boot_go+0x158>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cbc:	2000      	movs	r0, #0
     cbe:	f008 fd88 	bl	97d2 <swap_set_copy_done>
        if (rc != 0) {
     cc2:	b168      	cbz	r0, ce0 <context_boot_go+0x158>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cc4:	23ff      	movs	r3, #255	; 0xff
     cc6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cca:	4953      	ldr	r1, [pc, #332]	; (e18 <FIH_LABEL_FIH_CALL_END_2292+0xec>)
     ccc:	4b53      	ldr	r3, [pc, #332]	; (e1c <FIH_LABEL_FIH_CALL_END_2292+0xf0>)
        BOOT_LOG_ERR("panic!");
     cce:	4857      	ldr	r0, [pc, #348]	; (e2c <FIH_LABEL_FIH_CALL_END_2292+0x100>)
     cd0:	1ac9      	subs	r1, r1, r3
     cd2:	08c9      	lsrs	r1, r1, #3
     cd4:	0189      	lsls	r1, r1, #6
     cd6:	f041 0101 	orr.w	r1, r1, #1
     cda:	f009 f81b 	bl	9d14 <log_0>
        while (1) {}
     cde:	e7fe      	b.n	cde <context_boot_go+0x156>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     ce0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     ce4:	2bff      	cmp	r3, #255	; 0xff
     ce6:	d0f0      	beq.n	cca <context_boot_go+0x142>
            rc = boot_read_image_headers(state, false, bs);
     ce8:	466a      	mov	r2, sp
     cea:	2100      	movs	r1, #0
     cec:	4620      	mov	r0, r4
     cee:	f008 fc1a 	bl	9526 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cf2:	e780      	b.n	bf6 <context_boot_go+0x6e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     cf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cf8:	2b01      	cmp	r3, #1
     cfa:	d114      	bne.n	d26 <FIH_LABEL_FIH_CALL_START_2273>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     cfc:	4610      	mov	r0, r2
     cfe:	f006 f8ef 	bl	6ee0 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d02:	1e83      	subs	r3, r0, #2
     d04:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d06:	4605      	mov	r5, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d08:	d80a      	bhi.n	d20 <FIH_LABEL_FIH_CALL_END_2208+0x10>

00000d0a <FIH_LABEL_FIH_CALL_START_2185>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d0a:	4620      	mov	r0, r4
     d0c:	f7ff fe4e 	bl	9ac <boot_validate_slot.constprop.0.isra.0>

00000d10 <FIH_LABEL_FIH_CALL_END_2208>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d10:	4b47      	ldr	r3, [pc, #284]	; (e30 <FIH_LABEL_FIH_CALL_END_2292+0x104>)
     d12:	681b      	ldr	r3, [r3, #0]
     d14:	4298      	cmp	r0, r3
     d16:	d003      	beq.n	d20 <FIH_LABEL_FIH_CALL_END_2208+0x10>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     d18:	2801      	cmp	r0, #1
     d1a:	bf0c      	ite	eq
     d1c:	2501      	moveq	r5, #1
     d1e:	2505      	movne	r5, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d20:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
     d24:	e77a      	b.n	c1c <context_boot_go+0x94>

00000d26 <FIH_LABEL_FIH_CALL_START_2273>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d26:	4620      	mov	r0, r4
     d28:	f7ff fe40 	bl	9ac <boot_validate_slot.constprop.0.isra.0>

00000d2c <FIH_LABEL_FIH_CALL_END_2292>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d2c:	4b40      	ldr	r3, [pc, #256]	; (e30 <FIH_LABEL_FIH_CALL_END_2292+0x104>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d32:	bf0c      	ite	eq
     d34:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d38:	2305      	movne	r3, #5
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d3a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d3e:	e76d      	b.n	c1c <context_boot_go+0x94>
        switch (BOOT_SWAP_TYPE(state)) {
     d40:	2b05      	cmp	r3, #5
     d42:	f47f af77 	bne.w	c34 <context_boot_go+0xac>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d46:	2000      	movs	r0, #0
     d48:	f008 fd55 	bl	97f6 <swap_set_image_ok>
     d4c:	e011      	b.n	d72 <FIH_LABEL_FIH_CALL_END_2292+0x46>
        rc = boot_swap_image(state, bs);
     d4e:	4669      	mov	r1, sp
     d50:	4620      	mov	r0, r4
     d52:	f7ff fea5 	bl	aa0 <boot_swap_image.isra.0>
    swap_type = BOOT_SWAP_TYPE(state);
     d56:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d5a:	1eda      	subs	r2, r3, #3
     d5c:	2a01      	cmp	r2, #1
     d5e:	d81a      	bhi.n	d96 <FIH_LABEL_FIH_CALL_END_2292+0x6a>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d60:	2000      	movs	r0, #0
     d62:	f008 fd48 	bl	97f6 <swap_set_image_ok>
        if (rc != 0) {
     d66:	2800      	cmp	r0, #0
     d68:	f47f af64 	bne.w	c34 <context_boot_go+0xac>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d6c:	2000      	movs	r0, #0
     d6e:	f008 fd30 	bl	97d2 <swap_set_copy_done>
        if (rc != 0) {
     d72:	2800      	cmp	r0, #0
     d74:	f47f af5e 	bne.w	c34 <context_boot_go+0xac>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d78:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d7c:	2bff      	cmp	r3, #255	; 0xff
     d7e:	d10d      	bne.n	d9c <FIH_LABEL_FIH_CALL_END_2292+0x70>
     d80:	4925      	ldr	r1, [pc, #148]	; (e18 <FIH_LABEL_FIH_CALL_END_2292+0xec>)
     d82:	4b26      	ldr	r3, [pc, #152]	; (e1c <FIH_LABEL_FIH_CALL_END_2292+0xf0>)
            BOOT_LOG_ERR("panic!");
     d84:	4829      	ldr	r0, [pc, #164]	; (e2c <FIH_LABEL_FIH_CALL_END_2292+0x100>)
     d86:	1ac9      	subs	r1, r1, r3
     d88:	08c9      	lsrs	r1, r1, #3
     d8a:	0189      	lsls	r1, r1, #6
     d8c:	f041 0101 	orr.w	r1, r1, #1
     d90:	f008 ffc0 	bl	9d14 <log_0>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     d94:	e7fe      	b.n	d94 <FIH_LABEL_FIH_CALL_END_2292+0x68>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d96:	2b02      	cmp	r3, #2
     d98:	d1ee      	bne.n	d78 <FIH_LABEL_FIH_CALL_END_2292+0x4c>
     d9a:	e7e7      	b.n	d6c <FIH_LABEL_FIH_CALL_END_2292+0x40>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     d9c:	2b01      	cmp	r3, #1
     d9e:	d112      	bne.n	dc6 <FIH_LABEL_FIH_CALL_END_2292+0x9a>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
     da0:	6822      	ldr	r2, [r4, #0]
     da2:	4b24      	ldr	r3, [pc, #144]	; (e34 <FIH_LABEL_FIH_CALL_END_2292+0x108>)
     da4:	429a      	cmp	r2, r3
     da6:	d123      	bne.n	df0 <FIH_LABEL_FIH_CALL_END_2292+0xc4>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     da8:	2210      	movs	r2, #16
     daa:	2100      	movs	r1, #0
     dac:	4668      	mov	r0, sp
     dae:	f009 ff40 	bl	ac32 <memset>
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, active_slot)->fa_device_id;
     db2:	6a23      	ldr	r3, [r4, #32]
     db4:	785a      	ldrb	r2, [r3, #1]
     db6:	713a      	strb	r2, [r7, #4]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     db8:	685b      	ldr	r3, [r3, #4]
     dba:	60bb      	str	r3, [r7, #8]

    fill_rsp(state, NULL, rsp);

    fih_rc = FIH_SUCCESS;
     dbc:	4b1c      	ldr	r3, [pc, #112]	; (e30 <FIH_LABEL_FIH_CALL_END_2292+0x104>)
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     dbe:	603c      	str	r4, [r7, #0]
    fih_rc = FIH_SUCCESS;
     dc0:	681e      	ldr	r6, [r3, #0]
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     dc2:	2500      	movs	r5, #0
     dc4:	e007      	b.n	dd6 <FIH_LABEL_FIH_CALL_END_2292+0xaa>
            rc = boot_read_image_headers(state, false, &bs);
     dc6:	466a      	mov	r2, sp
     dc8:	2100      	movs	r1, #0
     dca:	4620      	mov	r0, r4
     dcc:	f008 fbab 	bl	9526 <boot_read_image_headers>
            if (rc != 0) {
     dd0:	4605      	mov	r5, r0
     dd2:	2800      	cmp	r0, #0
     dd4:	d0e4      	beq.n	da0 <FIH_LABEL_FIH_CALL_END_2292+0x74>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     dd6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     dd8:	f009 fb18 	bl	a40c <flash_area_close>
     ddc:	6a20      	ldr	r0, [r4, #32]
     dde:	f009 fb15 	bl	a40c <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     de2:	2d00      	cmp	r5, #0
     de4:	bf14      	ite	ne
     de6:	4628      	movne	r0, r5
     de8:	4630      	moveq	r0, r6
     dea:	b004      	add	sp, #16
     dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     df0:	4a0a      	ldr	r2, [pc, #40]	; (e1c <FIH_LABEL_FIH_CALL_END_2292+0xf0>)
     df2:	4b09      	ldr	r3, [pc, #36]	; (e18 <FIH_LABEL_FIH_CALL_END_2292+0xec>)
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
     df4:	4810      	ldr	r0, [pc, #64]	; (e38 <FIH_LABEL_FIH_CALL_END_2292+0x10c>)
     df6:	1a9b      	subs	r3, r3, r2
     df8:	08db      	lsrs	r3, r3, #3
     dfa:	019b      	lsls	r3, r3, #6
     dfc:	f043 0301 	orr.w	r3, r3, #1
     e00:	2200      	movs	r2, #0
     e02:	4621      	mov	r1, r4
     e04:	f008 ffa7 	bl	9d56 <log_2>
            rc = BOOT_EBADIMAGE;
     e08:	2503      	movs	r5, #3
            goto out;
     e0a:	e7e4      	b.n	dd6 <FIH_LABEL_FIH_CALL_END_2292+0xaa>
     e0c:	20000000 	.word	0x20000000
     e10:	20000d20 	.word	0x20000d20
     e14:	20001520 	.word	0x20001520
     e18:	0000bf04 	.word	0x0000bf04
     e1c:	0000bee4 	.word	0x0000bee4
     e20:	0000c690 	.word	0x0000c690
     e24:	0000c653 	.word	0x0000c653
     e28:	0000c6b7 	.word	0x0000c6b7
     e2c:	0000c6dc 	.word	0x0000c6dc
     e30:	200008bc 	.word	0x200008bc
     e34:	96f3b83d 	.word	0x96f3b83d
     e38:	0000c6e3 	.word	0x0000c6e3

00000e3c <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     e3c:	b508      	push	{r3, lr}
     e3e:	4601      	mov	r1, r0

00000e40 <FIH_LABEL_FIH_CALL_START_3196>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     e40:	4801      	ldr	r0, [pc, #4]	; (e48 <FIH_LABEL_FIH_CALL_END_3212+0x2>)
     e42:	f7ff fea1 	bl	b88 <context_boot_go>

00000e46 <FIH_LABEL_FIH_CALL_END_3212>:
    FIH_RET(fih_rc);
}
     e46:	bd08      	pop	{r3, pc}
     e48:	200008c0 	.word	0x200008c0

00000e4c <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     e4e:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     e50:	461c      	mov	r4, r3
     e52:	b333      	cbz	r3, ea2 <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     e54:	6a43      	ldr	r3, [r0, #36]	; 0x24
     e56:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     e58:	7963      	ldrb	r3, [r4, #5]
     e5a:	2b01      	cmp	r3, #1
     e5c:	d115      	bne.n	e8a <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     e5e:	bb01      	cbnz	r1, ea2 <boot_read_image_header+0x56>
     e60:	4b1f      	ldr	r3, [pc, #124]	; (ee0 <boot_read_image_header+0x94>)
     e62:	6822      	ldr	r2, [r4, #0]
     e64:	681b      	ldr	r3, [r3, #0]
    off = 0;
     e66:	429a      	cmp	r2, r3
     e68:	bf98      	it	ls
     e6a:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     e6c:	2000      	movs	r0, #0
     e6e:	f008 fa86 	bl	937e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     e72:	a901      	add	r1, sp, #4
     e74:	b2c0      	uxtb	r0, r0
     e76:	f001 ff35 	bl	2ce4 <flash_area_open>
    if (rc != 0) {
     e7a:	b1f0      	cbz	r0, eba <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     e7c:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     e7e:	9801      	ldr	r0, [sp, #4]
     e80:	f009 fac4 	bl	a40c <flash_area_close>
    return rc;
}
     e84:	4628      	mov	r0, r5
     e86:	b002      	add	sp, #8
     e88:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     e8a:	2b02      	cmp	r3, #2
     e8c:	d109      	bne.n	ea2 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     e8e:	6823      	ldr	r3, [r4, #0]
     e90:	2b01      	cmp	r3, #1
     e92:	d908      	bls.n	ea6 <boot_read_image_header+0x5a>
     e94:	4a12      	ldr	r2, [pc, #72]	; (ee0 <boot_read_image_header+0x94>)
     e96:	6812      	ldr	r2, [r2, #0]
     e98:	4293      	cmp	r3, r2
     e9a:	d802      	bhi.n	ea2 <boot_read_image_header+0x56>
                if (slot == 0) {
     e9c:	fab1 f181 	clz	r1, r1
     ea0:	0949      	lsrs	r1, r1, #5
    off = 0;
     ea2:	2500      	movs	r5, #0
     ea4:	e7e2      	b.n	e6c <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     ea6:	d1fc      	bne.n	ea2 <boot_read_image_header+0x56>
                if (slot == 0) {
     ea8:	2900      	cmp	r1, #0
     eaa:	d0df      	beq.n	e6c <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     eac:	2901      	cmp	r1, #1
     eae:	d1f8      	bne.n	ea2 <boot_read_image_header+0x56>
     eb0:	7921      	ldrb	r1, [r4, #4]
     eb2:	3902      	subs	r1, #2
     eb4:	bf18      	it	ne
     eb6:	2101      	movne	r1, #1
     eb8:	e7f3      	b.n	ea2 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     eba:	4629      	mov	r1, r5
     ebc:	9801      	ldr	r0, [sp, #4]
     ebe:	2320      	movs	r3, #32
     ec0:	4632      	mov	r2, r6
     ec2:	f009 faa4 	bl	a40e <flash_area_read>
    if (rc != 0) {
     ec6:	4605      	mov	r5, r0
     ec8:	2800      	cmp	r0, #0
     eca:	d1d7      	bne.n	e7c <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     ecc:	2c00      	cmp	r4, #0
     ece:	d0d6      	beq.n	e7e <boot_read_image_header+0x32>
     ed0:	6835      	ldr	r5, [r6, #0]
     ed2:	4804      	ldr	r0, [pc, #16]	; (ee4 <boot_read_image_header+0x98>)
     ed4:	1a2d      	subs	r5, r5, r0
     ed6:	bf18      	it	ne
     ed8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
     edc:	e7cf      	b.n	e7e <boot_read_image_header+0x32>
     ede:	bf00      	nop
     ee0:	20000004 	.word	0x20000004
     ee4:	96f3b83d 	.word	0x96f3b83d

00000ee8 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     eec:	4607      	mov	r7, r0
     eee:	b085      	sub	sp, #20
     ef0:	460c      	mov	r4, r1
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     ef2:	4601      	mov	r1, r0
     ef4:	2000      	movs	r0, #0
{
     ef6:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     ef8:	f008 fae9 	bl	94ce <boot_status_entries>
    if (max_entries < 0) {
     efc:	1e05      	subs	r5, r0, #0
     efe:	db58      	blt.n	fb2 <swap_read_status_bytes+0xca>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     f00:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     f02:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     f04:	f008 faf0 	bl	94e8 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     f08:	fa5f f984 	uxtb.w	r9, r4
     f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
     f10:	fb09 0808 	mla	r8, r9, r8, r0
    erased_sections = 0;
     f14:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     f18:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     f1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for (i = max_entries; i > 0; i--) {
     f20:	b9cd      	cbnz	r5, f56 <swap_read_status_bytes+0x6e>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     f22:	f1ba 0f01 	cmp.w	sl, #1
     f26:	dd09      	ble.n	f3c <swap_read_status_bytes+0x54>
     f28:	4924      	ldr	r1, [pc, #144]	; (fbc <swap_read_status_bytes+0xd4>)
     f2a:	4b25      	ldr	r3, [pc, #148]	; (fc0 <swap_read_status_bytes+0xd8>)
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     f2c:	4825      	ldr	r0, [pc, #148]	; (fc4 <swap_read_status_bytes+0xdc>)
     f2e:	1ac9      	subs	r1, r1, r3
     f30:	08c9      	lsrs	r1, r1, #3
     f32:	0189      	lsls	r1, r1, #6
     f34:	f041 0101 	orr.w	r1, r1, #1
     f38:	f008 feec 	bl	9d14 <log_0>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     f3c:	1c63      	adds	r3, r4, #1
     f3e:	d006      	beq.n	f4e <swap_read_status_bytes+0x66>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     f40:	2cff      	cmp	r4, #255	; 0xff
     f42:	dc2a      	bgt.n	f9a <swap_read_status_bytes+0xb2>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f44:	3401      	adds	r4, #1
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f46:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f4a:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f4c:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     f4e:	4628      	mov	r0, r5
     f50:	b005      	add	sp, #20
     f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     f56:	1e6b      	subs	r3, r5, #1
     f58:	9300      	str	r3, [sp, #0]
     f5a:	f10d 020f 	add.w	r2, sp, #15
     f5e:	2301      	movs	r3, #1
     f60:	4641      	mov	r1, r8
     f62:	4638      	mov	r0, r7
     f64:	f009 fa53 	bl	a40e <flash_area_read>
        if (rc < 0) {
     f68:	1e03      	subs	r3, r0, #0
     f6a:	9301      	str	r3, [sp, #4]
     f6c:	db23      	blt.n	fb6 <swap_read_status_bytes+0xce>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     f6e:	2201      	movs	r2, #1
     f70:	f10d 010f 	add.w	r1, sp, #15
     f74:	4638      	mov	r0, r7
     f76:	f00a faef 	bl	b558 <bootutil_buffer_is_erased>
     f7a:	9b01      	ldr	r3, [sp, #4]
     f7c:	b140      	cbz	r0, f90 <swap_read_status_bytes+0xa8>
            if (rc != last_rc) {
     f7e:	455b      	cmp	r3, fp
     f80:	d001      	beq.n	f86 <swap_read_status_bytes+0x9e>
                erased_sections++;
     f82:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     f86:	9d00      	ldr	r5, [sp, #0]
     f88:	eba8 0809 	sub.w	r8, r8, r9
     f8c:	469b      	mov	fp, r3
     f8e:	e7c7      	b.n	f20 <swap_read_status_bytes+0x38>
     f90:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
     f94:	bf08      	it	eq
     f96:	462c      	moveq	r4, r5
     f98:	e7f5      	b.n	f86 <swap_read_status_bytes+0x9e>
        bs->op = BOOT_STATUS_OP_SWAP;
     f9a:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f9c:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
     fa0:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fa2:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fa4:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fa8:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     faa:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fac:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fae:	7134      	strb	r4, [r6, #4]
     fb0:	e7cd      	b.n	f4e <swap_read_status_bytes+0x66>
        return BOOT_EBADARGS;
     fb2:	2507      	movs	r5, #7
     fb4:	e7cb      	b.n	f4e <swap_read_status_bytes+0x66>
            return BOOT_EFLASH;
     fb6:	2501      	movs	r5, #1
     fb8:	e7c9      	b.n	f4e <swap_read_status_bytes+0x66>
     fba:	bf00      	nop
     fbc:	0000bf04 	.word	0x0000bf04
     fc0:	0000bee4 	.word	0x0000bee4
     fc4:	0000c703 	.word	0x0000c703

00000fc8 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
     fc8:	6a81      	ldr	r1, [r0, #40]	; 0x28
     fca:	6d42      	ldr	r2, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     fcc:	4291      	cmp	r1, r2
{
     fce:	b538      	push	{r3, r4, r5, lr}
    if ((num_sectors_pri != num_sectors_sec) &&
     fd0:	d00e      	beq.n	ff0 <boot_slots_compatible+0x28>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     fd2:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     fd4:	428b      	cmp	r3, r1
     fd6:	d00b      	beq.n	ff0 <boot_slots_compatible+0x28>
     fd8:	491d      	ldr	r1, [pc, #116]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     fda:	4b1e      	ldr	r3, [pc, #120]	; (1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     fdc:	481e      	ldr	r0, [pc, #120]	; (1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
     fde:	1ac9      	subs	r1, r1, r3
     fe0:	08c9      	lsrs	r1, r1, #3
     fe2:	0189      	lsls	r1, r1, #6
     fe4:	f041 0102 	orr.w	r1, r1, #2
        }
    }

    if (num_sectors_pri > num_sectors_sec) {
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     fe8:	f008 fe94 	bl	9d14 <log_0>
            return 0;
     fec:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     fee:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     ff0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
     ff4:	d928      	bls.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
     ff6:	4916      	ldr	r1, [pc, #88]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     ff8:	4b16      	ldr	r3, [pc, #88]	; (1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     ffa:	4818      	ldr	r0, [pc, #96]	; (105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
     ffc:	1ac9      	subs	r1, r1, r3
     ffe:	08c9      	lsrs	r1, r1, #3
    1000:	0189      	lsls	r1, r1, #6
    1002:	f041 0102 	orr.w	r1, r1, #2
    1006:	e7ef      	b.n	fe8 <boot_slots_compatible+0x20>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    1008:	6a44      	ldr	r4, [r0, #36]	; 0x24
    100a:	6d05      	ldr	r5, [r0, #80]	; 0x50
    100c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    1010:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    1014:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
    1016:	686d      	ldr	r5, [r5, #4]
    1018:	42ac      	cmp	r4, r5
    101a:	d008      	beq.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    101c:	490c      	ldr	r1, [pc, #48]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
    101e:	4b0d      	ldr	r3, [pc, #52]	; (1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1020:	480f      	ldr	r0, [pc, #60]	; (1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
    1022:	1ac9      	subs	r1, r1, r3
    1024:	08c9      	lsrs	r1, r1, #3
    1026:	0189      	lsls	r1, r1, #6
    1028:	f041 0102 	orr.w	r1, r1, #2
    102c:	e7dc      	b.n	fe8 <boot_slots_compatible+0x20>
    for (i = 0; i < num_sectors_sec; i++) {
    102e:	3301      	adds	r3, #1
    1030:	429a      	cmp	r2, r3
    1032:	d1e9      	bne.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    if (num_sectors_pri > num_sectors_sec) {
    1034:	4291      	cmp	r1, r2
    1036:	d905      	bls.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
    1038:	6a43      	ldr	r3, [r0, #36]	; 0x24
    103a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    103e:	6853      	ldr	r3, [r2, #4]
    1040:	42a3      	cmp	r3, r4
    1042:	d1eb      	bne.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    return 1;
    1044:	2001      	movs	r0, #1
    1046:	e7d2      	b.n	fee <boot_slots_compatible+0x26>
    for (i = 0; i < num_sectors_sec; i++) {
    1048:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    104a:	461c      	mov	r4, r3
    104c:	e7f0      	b.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    104e:	bf00      	nop
    1050:	0000bf04 	.word	0x0000bf04
    1054:	0000bee4 	.word	0x0000bee4
    1058:	0000c721 	.word	0x0000c721
    105c:	0000c754 	.word	0x0000c754
    1060:	0000c77e 	.word	0x0000c77e

00001064 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
    1064:	b510      	push	{r4, lr}
    1066:	b08a      	sub	sp, #40	; 0x28
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1068:	a901      	add	r1, sp, #4
    106a:	2004      	movs	r0, #4
    106c:	f00a fad7 	bl	b61e <boot_read_swap_state_by_id>
    1070:	4c2f      	ldr	r4, [pc, #188]	; (1130 <swap_status_source+0xcc>)
    1072:	4b30      	ldr	r3, [pc, #192]	; (1134 <swap_status_source+0xd0>)
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1074:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1078:	4a2f      	ldr	r2, [pc, #188]	; (1138 <swap_status_source+0xd4>)
    107a:	9205      	str	r2, [sp, #20]
    107c:	1ae4      	subs	r4, r4, r3
    107e:	08e4      	lsrs	r4, r4, #3
    1080:	01a4      	lsls	r4, r4, #6
    1082:	2901      	cmp	r1, #1
    1084:	f044 0303 	orr.w	r3, r4, #3
    1088:	d047      	beq.n	111a <swap_status_source+0xb6>
    108a:	4a2c      	ldr	r2, [pc, #176]	; (113c <swap_status_source+0xd8>)
    108c:	482c      	ldr	r0, [pc, #176]	; (1140 <swap_status_source+0xdc>)
    108e:	2903      	cmp	r1, #3
    1090:	bf08      	it	eq
    1092:	4602      	moveq	r2, r0
    1094:	9206      	str	r2, [sp, #24]
    1096:	f89d 2005 	ldrb.w	r2, [sp, #5]
    109a:	9207      	str	r2, [sp, #28]
    109c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    10a0:	9208      	str	r2, [sp, #32]
    10a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    10a6:	4827      	ldr	r0, [pc, #156]	; (1144 <swap_status_source+0xe0>)
    10a8:	9209      	str	r2, [sp, #36]	; 0x24
    10aa:	a905      	add	r1, sp, #20
    10ac:	2205      	movs	r2, #5
    10ae:	f008 fe87 	bl	9dc0 <log_n>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    10b2:	a903      	add	r1, sp, #12
    10b4:	2002      	movs	r0, #2
    10b6:	f00a fab2 	bl	b61e <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    10ba:	f89d 100c 	ldrb.w	r1, [sp, #12]
    10be:	4a22      	ldr	r2, [pc, #136]	; (1148 <swap_status_source+0xe4>)
    10c0:	9205      	str	r2, [sp, #20]
    10c2:	2901      	cmp	r1, #1
    10c4:	f044 0303 	orr.w	r3, r4, #3
    10c8:	d029      	beq.n	111e <swap_status_source+0xba>
    10ca:	4a1c      	ldr	r2, [pc, #112]	; (113c <swap_status_source+0xd8>)
    10cc:	481c      	ldr	r0, [pc, #112]	; (1140 <swap_status_source+0xdc>)
    10ce:	2903      	cmp	r1, #3
    10d0:	bf08      	it	eq
    10d2:	4602      	moveq	r2, r0
    10d4:	9206      	str	r2, [sp, #24]
    10d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
    10da:	9207      	str	r2, [sp, #28]
    10dc:	f89d 200e 	ldrb.w	r2, [sp, #14]
    10e0:	9208      	str	r2, [sp, #32]
    10e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    10e6:	9209      	str	r2, [sp, #36]	; 0x24
    10e8:	4816      	ldr	r0, [pc, #88]	; (1144 <swap_status_source+0xe0>)
    10ea:	2205      	movs	r2, #5
    10ec:	a905      	add	r1, sp, #20
    10ee:	f008 fe67 	bl	9dc0 <log_n>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    10f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    10f6:	2b01      	cmp	r3, #1
    10f8:	d113      	bne.n	1122 <swap_status_source+0xbe>
    10fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    10fe:	2b03      	cmp	r3, #3
    1100:	d10f      	bne.n	1122 <swap_status_source+0xbe>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    1102:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1106:	2b01      	cmp	r3, #1
    1108:	d00b      	beq.n	1122 <swap_status_source+0xbe>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    110a:	4810      	ldr	r0, [pc, #64]	; (114c <swap_status_source+0xe8>)
    110c:	f044 0103 	orr.w	r1, r4, #3
    1110:	f008 fe00 	bl	9d14 <log_0>
        return source;
    1114:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    1116:	b00a      	add	sp, #40	; 0x28
    1118:	bd10      	pop	{r4, pc}
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    111a:	4a0d      	ldr	r2, [pc, #52]	; (1150 <swap_status_source+0xec>)
    111c:	e7ba      	b.n	1094 <swap_status_source+0x30>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    111e:	4a0c      	ldr	r2, [pc, #48]	; (1150 <swap_status_source+0xec>)
    1120:	e7d8      	b.n	10d4 <swap_status_source+0x70>
    BOOT_LOG_INF("Boot source: none");
    1122:	480c      	ldr	r0, [pc, #48]	; (1154 <swap_status_source+0xf0>)
    1124:	f044 0103 	orr.w	r1, r4, #3
    1128:	f008 fdf4 	bl	9d14 <log_0>
    return BOOT_STATUS_SOURCE_NONE;
    112c:	2000      	movs	r0, #0
    112e:	e7f2      	b.n	1116 <swap_status_source+0xb2>
    1130:	0000bf04 	.word	0x0000bf04
    1134:	0000bee4 	.word	0x0000bee4
    1138:	0000c7a5 	.word	0x0000c7a5
    113c:	0000c7b9 	.word	0x0000c7b9
    1140:	0000c7b3 	.word	0x0000c7b3
    1144:	0000c7c2 	.word	0x0000c7c2
    1148:	0000c7fe 	.word	0x0000c7fe
    114c:	0000c80e 	.word	0x0000c80e
    1150:	0000c7bd 	.word	0x0000c7bd
    1154:	0000c828 	.word	0x0000c828

00001158 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    1158:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    115a:	684b      	ldr	r3, [r1, #4]
{
    115c:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    115e:	4a23      	ldr	r2, [pc, #140]	; (11ec <fixup_revert+0x94>)
    1160:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1164:	4293      	cmp	r3, r2
{
    1166:	b088      	sub	sp, #32
    1168:	4606      	mov	r6, r0
    116a:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    116c:	d139      	bne.n	11e2 <fixup_revert+0x8a>
        bs->op != BOOT_STATUS_OP_MOVE ||
    116e:	680b      	ldr	r3, [r1, #0]
    1170:	2b01      	cmp	r3, #1
    1172:	d136      	bne.n	11e2 <fixup_revert+0x8a>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1174:	a901      	add	r1, sp, #4
    1176:	4620      	mov	r0, r4
    1178:	f005 fe62 	bl	6e40 <boot_read_swap_state>
    117c:	4a1c      	ldr	r2, [pc, #112]	; (11f0 <fixup_revert+0x98>)
    117e:	4b1d      	ldr	r3, [pc, #116]	; (11f4 <fixup_revert+0x9c>)
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1180:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1184:	1a9b      	subs	r3, r3, r2
    1186:	08db      	lsrs	r3, r3, #3
    1188:	4a1b      	ldr	r2, [pc, #108]	; (11f8 <fixup_revert+0xa0>)
    118a:	9203      	str	r2, [sp, #12]
    118c:	019b      	lsls	r3, r3, #6
    118e:	2901      	cmp	r1, #1
    1190:	f043 0303 	orr.w	r3, r3, #3
    1194:	d027      	beq.n	11e6 <fixup_revert+0x8e>
    1196:	4a19      	ldr	r2, [pc, #100]	; (11fc <fixup_revert+0xa4>)
    1198:	4819      	ldr	r0, [pc, #100]	; (1200 <fixup_revert+0xa8>)
    119a:	2903      	cmp	r1, #3
    119c:	bf08      	it	eq
    119e:	4602      	moveq	r2, r0
    11a0:	9204      	str	r2, [sp, #16]
    11a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    11a6:	9205      	str	r2, [sp, #20]
    11a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    11ac:	9206      	str	r2, [sp, #24]
    11ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
    11b2:	9207      	str	r2, [sp, #28]
    11b4:	4813      	ldr	r0, [pc, #76]	; (1204 <fixup_revert+0xac>)
    11b6:	2205      	movs	r2, #5
    11b8:	a903      	add	r1, sp, #12
    11ba:	f008 fe01 	bl	9dc0 <log_n>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    11be:	f89d 3004 	ldrb.w	r3, [sp, #4]
    11c2:	2b03      	cmp	r3, #3
    11c4:	d10d      	bne.n	11e2 <fixup_revert+0x8a>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    11c6:	4621      	mov	r1, r4
    11c8:	4630      	mov	r0, r6
    11ca:	f008 fa71 	bl	96b0 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    11ce:	4620      	mov	r0, r4
    11d0:	f00a fa1c 	bl	b60c <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    11d4:	68a9      	ldr	r1, [r5, #8]
    11d6:	4620      	mov	r0, r4
    11d8:	f008 f996 	bl	9508 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    11dc:	4620      	mov	r0, r4
    11de:	f005 fe21 	bl	6e24 <boot_write_magic>
        assert(rc == 0);
    }
}
    11e2:	b008      	add	sp, #32
    11e4:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    11e6:	4a08      	ldr	r2, [pc, #32]	; (1208 <fixup_revert+0xb0>)
    11e8:	e7da      	b.n	11a0 <fixup_revert+0x48>
    11ea:	bf00      	nop
    11ec:	04000100 	.word	0x04000100
    11f0:	0000bee4 	.word	0x0000bee4
    11f4:	0000bf04 	.word	0x0000bf04
    11f8:	0000c7fe 	.word	0x0000c7fe
    11fc:	0000c7b9 	.word	0x0000c7b9
    1200:	0000c7b3 	.word	0x0000c7b3
    1204:	0000c7c2 	.word	0x0000c7c2
    1208:	0000c7bd 	.word	0x0000c7bd

0000120c <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    120c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1210:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1212:	460c      	mov	r4, r1
    1214:	685e      	ldr	r6, [r3, #4]
    1216:	b089      	sub	sp, #36	; 0x24
    1218:	4605      	mov	r5, r0
    121a:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    121c:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    121e:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    1220:	429a      	cmp	r2, r3
    1222:	4608      	mov	r0, r1
    1224:	f101 0101 	add.w	r1, r1, #1
    1228:	d8f9      	bhi.n	121e <swap_run+0x12>
    122a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 13d8 <swap_run+0x1cc>
    122e:	f8c8 0000 	str.w	r0, [r8]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    1232:	4620      	mov	r0, r4
    1234:	f008 f9fb 	bl	962e <boot_status_is_reset>
    1238:	b1e8      	cbz	r0, 1276 <swap_run+0x6a>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    123a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    123c:	f008 f942 	bl	94c4 <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1240:	6aab      	ldr	r3, [r5, #40]	; 0x28
        sz = 0;
    1242:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1244:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    1246:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    1248:	4282      	cmp	r2, r0
    124a:	d201      	bcs.n	1250 <swap_run+0x44>
                break;
            }
            first_trailer_idx--;
    124c:	3b01      	subs	r3, #1
            sz += sector_sz;
    124e:	e7fa      	b.n	1246 <swap_run+0x3a>
        }

        if (g_last_idx >= first_trailer_idx) {
    1250:	f8d8 2000 	ldr.w	r2, [r8]
    1254:	429a      	cmp	r2, r3
    1256:	d30e      	bcc.n	1276 <swap_run+0x6a>
    1258:	4b60      	ldr	r3, [pc, #384]	; (13dc <swap_run+0x1d0>)
    125a:	4961      	ldr	r1, [pc, #388]	; (13e0 <swap_run+0x1d4>)
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    125c:	4861      	ldr	r0, [pc, #388]	; (13e4 <swap_run+0x1d8>)
    125e:	1ac9      	subs	r1, r1, r3
    1260:	08c9      	lsrs	r1, r1, #3
    1262:	0189      	lsls	r1, r1, #6
    1264:	f041 0102 	orr.w	r1, r1, #2
    1268:	f008 fd54 	bl	9d14 <log_0>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    126c:	2301      	movs	r3, #1
    126e:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    1270:	b009      	add	sp, #36	; 0x24
    1272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1276:	a906      	add	r1, sp, #24
    1278:	2004      	movs	r0, #4
    127a:	f001 fd33 	bl	2ce4 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    127e:	a907      	add	r1, sp, #28
    1280:	2002      	movs	r0, #2
    1282:	f001 fd2f 	bl	2ce4 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1286:	9a07      	ldr	r2, [sp, #28]
    1288:	4621      	mov	r1, r4
    128a:	4628      	mov	r0, r5
    128c:	f7ff ff64 	bl	1158 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1290:	7963      	ldrb	r3, [r4, #5]
    1292:	2b01      	cmp	r3, #1
    1294:	d106      	bne.n	12a4 <swap_run+0x98>
        idx = g_last_idx;
    1296:	f8d8 7000 	ldr.w	r7, [r8]
            if (idx <= (g_last_idx - bs->idx + 1)) {
    129a:	f8d8 3000 	ldr.w	r3, [r8]
        while (idx > 0) {
    129e:	b997      	cbnz	r7, 12c6 <swap_run+0xba>
        bs->idx = BOOT_STATUS_IDX_0;
    12a0:	2301      	movs	r3, #1
    12a2:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    12a4:	f04f 0302 	mov.w	r3, #2
    12a8:	7163      	strb	r3, [r4, #5]
    idx = 1;
    12aa:	2701      	movs	r7, #1
    while (idx <= g_last_idx) {
    12ac:	f8d8 3000 	ldr.w	r3, [r8]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12b0:	f8dd a018 	ldr.w	sl, [sp, #24]
    while (idx <= g_last_idx) {
    12b4:	429f      	cmp	r7, r3
    12b6:	d944      	bls.n	1342 <swap_run+0x136>
    flash_area_close(fap_pri);
    12b8:	4650      	mov	r0, sl
    12ba:	f009 f8a7 	bl	a40c <flash_area_close>
    flash_area_close(fap_sec);
    12be:	9807      	ldr	r0, [sp, #28]
    12c0:	f009 f8a4 	bl	a40c <flash_area_close>
    12c4:	e7d4      	b.n	1270 <swap_run+0x64>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    12c6:	6821      	ldr	r1, [r4, #0]
    12c8:	3301      	adds	r3, #1
    12ca:	1a5b      	subs	r3, r3, r1
    12cc:	429f      	cmp	r7, r3
    12ce:	d836      	bhi.n	133e <swap_run+0x132>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    12d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12d2:	f8dd 9018 	ldr.w	r9, [sp, #24]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    12d6:	6813      	ldr	r3, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    12d8:	f852 0037 	ldr.w	r0, [r2, r7, lsl #3]
    12dc:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
    if (bs->idx == BOOT_STATUS_IDX_0) {
    12e0:	2901      	cmp	r1, #1
    12e2:	f852 2c08 	ldr.w	r2, [r2, #-8]
    12e6:	eba0 0a03 	sub.w	sl, r0, r3
    12ea:	eba2 0b03 	sub.w	fp, r2, r3
    12ee:	d112      	bne.n	1316 <swap_run+0x10a>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    12f0:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12f2:	9b07      	ldr	r3, [sp, #28]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    12f4:	2a02      	cmp	r2, #2
    12f6:	d00a      	beq.n	130e <swap_run+0x102>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    12f8:	4649      	mov	r1, r9
    12fa:	4628      	mov	r0, r5
    12fc:	9303      	str	r3, [sp, #12]
    12fe:	f008 f9d7 	bl	96b0 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    1302:	4622      	mov	r2, r4
    1304:	4649      	mov	r1, r9
    1306:	4628      	mov	r0, r5
    1308:	f008 fa08 	bl	971c <swap_status_init>
    130c:	9b03      	ldr	r3, [sp, #12]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    130e:	4619      	mov	r1, r3
    1310:	4628      	mov	r0, r5
    1312:	f008 f9cd 	bl	96b0 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    1316:	4632      	mov	r2, r6
    1318:	4651      	mov	r1, sl
    131a:	4648      	mov	r0, r9
    131c:	f008 f9c6 	bl	96ac <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    1320:	465b      	mov	r3, fp
    1322:	464a      	mov	r2, r9
    1324:	4649      	mov	r1, r9
    1326:	e9cd a600 	strd	sl, r6, [sp]
    132a:	4628      	mov	r0, r5
    132c:	f7ff fbea 	bl	b04 <boot_copy_region>
    rc = boot_write_status(state, bs);
    1330:	4621      	mov	r1, r4
    1332:	4628      	mov	r0, r5
    1334:	f008 f988 	bl	9648 <boot_write_status>
    bs->idx++;
    1338:	6823      	ldr	r3, [r4, #0]
    133a:	3301      	adds	r3, #1
    133c:	6023      	str	r3, [r4, #0]
            idx--;
    133e:	3f01      	subs	r7, #1
    1340:	e7ab      	b.n	129a <swap_run+0x8e>
        if (idx >= bs->idx) {
    1342:	6823      	ldr	r3, [r4, #0]
    1344:	429f      	cmp	r7, r3
    1346:	d345      	bcc.n	13d4 <swap_run+0x1c8>
    1348:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    134a:	f8dd b01c 	ldr.w	fp, [sp, #28]
    134e:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
    1352:	9104      	str	r1, [sp, #16]
    1354:	00fb      	lsls	r3, r7, #3
           BOOT_IMG(state, slot).sectors[0].fs_off;
    1356:	6811      	ldr	r1, [r2, #0]
    1358:	9103      	str	r1, [sp, #12]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    135a:	3b08      	subs	r3, #8
    135c:	6d29      	ldr	r1, [r5, #80]	; 0x50
    135e:	58c8      	ldr	r0, [r1, r3]
    1360:	6809      	ldr	r1, [r1, #0]
    1362:	eba0 0901 	sub.w	r9, r0, r1
    if (bs->state == BOOT_STATUS_STATE_0) {
    1366:	7921      	ldrb	r1, [r4, #4]
    1368:	2901      	cmp	r1, #1
    136a:	d131      	bne.n	13d0 <swap_run+0x1c4>
    136c:	58d1      	ldr	r1, [r2, r3]
    136e:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1370:	4632      	mov	r2, r6
    1372:	1ac9      	subs	r1, r1, r3
    1374:	4650      	mov	r0, sl
    1376:	9105      	str	r1, [sp, #20]
    1378:	f008 f998 	bl	96ac <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    137c:	9905      	ldr	r1, [sp, #20]
    137e:	9100      	str	r1, [sp, #0]
    1380:	464b      	mov	r3, r9
    1382:	4652      	mov	r2, sl
    1384:	4659      	mov	r1, fp
    1386:	9601      	str	r6, [sp, #4]
    1388:	4628      	mov	r0, r5
    138a:	f7ff fbbb 	bl	b04 <boot_copy_region>
        rc = boot_write_status(state, bs);
    138e:	4621      	mov	r1, r4
    1390:	4628      	mov	r0, r5
    1392:	f008 f959 	bl	9648 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1396:	f04f 0302 	mov.w	r3, #2
    139a:	7123      	strb	r3, [r4, #4]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    139c:	4632      	mov	r2, r6
    139e:	4649      	mov	r1, r9
    13a0:	4658      	mov	r0, fp
    13a2:	f008 f983 	bl	96ac <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    13a6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    13aa:	4651      	mov	r1, sl
    13ac:	1a9b      	subs	r3, r3, r2
    13ae:	e9cd 9600 	strd	r9, r6, [sp]
    13b2:	465a      	mov	r2, fp
    13b4:	4628      	mov	r0, r5
    13b6:	f7ff fba5 	bl	b04 <boot_copy_region>
        rc = boot_write_status(state, bs);
    13ba:	4621      	mov	r1, r4
    13bc:	4628      	mov	r0, r5
    13be:	f008 f943 	bl	9648 <boot_write_status>
        bs->idx++;
    13c2:	6823      	ldr	r3, [r4, #0]
    13c4:	3301      	adds	r3, #1
    13c6:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    13c8:	f04f 0301 	mov.w	r3, #1
    13cc:	7123      	strb	r3, [r4, #4]
    13ce:	e001      	b.n	13d4 <swap_run+0x1c8>
    if (bs->state == BOOT_STATUS_STATE_1) {
    13d0:	2902      	cmp	r1, #2
    13d2:	d0e3      	beq.n	139c <swap_run+0x190>
        idx++;
    13d4:	3701      	adds	r7, #1
    13d6:	e769      	b.n	12ac <swap_run+0xa0>
    13d8:	20000004 	.word	0x20000004
    13dc:	0000bee4 	.word	0x0000bee4
    13e0:	0000bf04 	.word	0x0000bf04
    13e4:	0000c83a 	.word	0x0000c83a

000013e8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    13e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13ec:	b09d      	sub	sp, #116	; 0x74
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    13ee:	6803      	ldr	r3, [r0, #0]
    13f0:	9302      	str	r3, [sp, #8]
    13f2:	6843      	ldr	r3, [r0, #4]
    13f4:	9303      	str	r3, [sp, #12]
    13f6:	6883      	ldr	r3, [r0, #8]
    13f8:	9304      	str	r3, [sp, #16]
    13fa:	68c3      	ldr	r3, [r0, #12]
    13fc:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    13fe:	6903      	ldr	r3, [r0, #16]
    1400:	9306      	str	r3, [sp, #24]
    1402:	6943      	ldr	r3, [r0, #20]
    1404:	9307      	str	r3, [sp, #28]
    1406:	6983      	ldr	r3, [r0, #24]
    1408:	9308      	str	r3, [sp, #32]
    140a:	69c3      	ldr	r3, [r0, #28]
    140c:	9309      	str	r3, [sp, #36]	; 0x24
    140e:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    1412:	e9dd e205 	ldrd	lr, r2, [sp, #20]
    1416:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    141a:	4698      	mov	r8, r3
    141c:	f8df a190 	ldr.w	sl, [pc, #400]	; 15b0 <compress+0x1c8>
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    1420:	9b04      	ldr	r3, [sp, #16]
    1422:	9300      	str	r3, [sp, #0]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    1424:	2700      	movs	r7, #0
	n = (((unsigned int)(*((*c)++))) << 24);
    1426:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    1428:	ab0c      	add	r3, sp, #48	; 0x30
    142a:	ba2d      	rev	r5, r5
    142c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    142e:	f85a 3b04 	ldr.w	r3, [sl], #4
    1432:	eb05 0903 	add.w	r9, r5, r3
    1436:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    143a:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    143e:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    1442:	444d      	add	r5, r9
    1444:	ea2b 0302 	bic.w	r3, fp, r2
    1448:	ea02 090c 	and.w	r9, r2, ip
    144c:	ea83 0309 	eor.w	r3, r3, r9
    1450:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    1452:	9d00      	ldr	r5, [sp, #0]
    1454:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    1458:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    145a:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    145c:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    1460:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    1464:	4025      	ands	r5, r4
    1466:	ea06 0909 	and.w	r9, r6, r9
    146a:	ea85 0509 	eor.w	r5, r5, r9
    146e:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    1472:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    1474:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    1476:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    1478:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    147c:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    147e:	f8dd e000 	ldr.w	lr, [sp]
    1482:	46d8      	mov	r8, fp
    1484:	f040 8085 	bne.w	1592 <compress+0x1aa>
    1488:	494a      	ldr	r1, [pc, #296]	; (15b4 <compress+0x1cc>)
    148a:	910a      	str	r1, [sp, #40]	; 0x28
    148c:	f04f 0a10 	mov.w	sl, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    1490:	4651      	mov	r1, sl
    1492:	f10a 0a01 	add.w	sl, sl, #1
    1496:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    149a:	f00a 070f 	and.w	r7, sl, #15
    149e:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    14a2:	f001 090f 	and.w	r9, r1, #15
		s0 = work_space[(i+1)&0x0f];
    14a6:	f857 7c40 	ldr.w	r7, [r7, #-64]
    14aa:	9701      	str	r7, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
    14ac:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = sigma0(s0);
    14b0:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    14b4:	f101 070e 	add.w	r7, r1, #14
    14b8:	f007 070f 	and.w	r7, r7, #15
    14bc:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    14c0:	3109      	adds	r1, #9
		s1 = work_space[(i+14)&0x0f];
    14c2:	f857 7c40 	ldr.w	r7, [r7, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    14c6:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    14ca:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    14ce:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    14d2:	f001 010f 	and.w	r1, r1, #15
    14d6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    14da:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    14de:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    14e2:	f859 ec40 	ldr.w	lr, [r9, #-64]
    14e6:	f851 1c40 	ldr.w	r1, [r1, #-64]
    14ea:	4471      	add	r1, lr
		s0 = sigma0(s0);
    14ec:	f8dd e004 	ldr.w	lr, [sp, #4]
    14f0:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    14f4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    14f8:	4441      	add	r1, r8
		s1 = sigma1(s1);
    14fa:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    14fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    1500:	4471      	add	r1, lr
    1502:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    1506:	f857 eb04 	ldr.w	lr, [r7], #4
    150a:	970a      	str	r7, [sp, #40]	; 0x28
	return (((a) >> n) | ((a) << (32 - n)));
    150c:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    1510:	ea05 0802 	and.w	r8, r5, r2
    1514:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    1518:	ea2c 0705 	bic.w	r7, ip, r5
    151c:	ea87 0708 	eor.w	r7, r7, r8
    1520:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    1524:	444f      	add	r7, r9
    1526:	4477      	add	r7, lr
    1528:	4439      	add	r1, r7
    152a:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    152c:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    1530:	ea84 0b06 	eor.w	fp, r4, r6
    1534:	ea0b 0b03 	and.w	fp, fp, r3
    1538:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    153c:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    1540:	f8dd 8000 	ldr.w	r8, [sp]
    1544:	9600      	str	r6, [sp, #0]
		t2 = Sigma0(a) + Maj(a, b, c);
    1546:	ea8b 0e0e 	eor.w	lr, fp, lr
    154a:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    154e:	4477      	add	r7, lr
	for ( ; i < 64; ++i) {
    1550:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    1554:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    1556:	46e3      	mov	fp, ip
    1558:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    155a:	d121      	bne.n	15a0 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    155c:	9f02      	ldr	r7, [sp, #8]
    155e:	440f      	add	r7, r1
    1560:	9903      	ldr	r1, [sp, #12]
    1562:	6007      	str	r7, [r0, #0]
    1564:	4419      	add	r1, r3
    1566:	9b04      	ldr	r3, [sp, #16]
    1568:	6041      	str	r1, [r0, #4]
    156a:	4423      	add	r3, r4
    156c:	6083      	str	r3, [r0, #8]
    156e:	9b05      	ldr	r3, [sp, #20]
    1570:	4433      	add	r3, r6
    1572:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    1574:	9b06      	ldr	r3, [sp, #24]
    1576:	4443      	add	r3, r8
    1578:	6103      	str	r3, [r0, #16]
    157a:	9b07      	ldr	r3, [sp, #28]
    157c:	442b      	add	r3, r5
    157e:	6143      	str	r3, [r0, #20]
    1580:	9b08      	ldr	r3, [sp, #32]
    1582:	4413      	add	r3, r2
    1584:	6183      	str	r3, [r0, #24]
    1586:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1588:	4463      	add	r3, ip
    158a:	61c3      	str	r3, [r0, #28]
}
    158c:	b01d      	add	sp, #116	; 0x74
    158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1592:	46e3      	mov	fp, ip
    1594:	9600      	str	r6, [sp, #0]
    1596:	4694      	mov	ip, r2
    1598:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    159a:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    159c:	461c      	mov	r4, r3
    159e:	e742      	b.n	1426 <compress+0x3e>
    15a0:	4694      	mov	ip, r2
    15a2:	4626      	mov	r6, r4
    15a4:	462a      	mov	r2, r5
    15a6:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    15a8:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    15aa:	460b      	mov	r3, r1
    15ac:	e770      	b.n	1490 <compress+0xa8>
    15ae:	bf00      	nop
    15b0:	0000bfe0 	.word	0x0000bfe0
    15b4:	0000c020 	.word	0x0000c020

000015b8 <tc_sha256_init>:
{
    15b8:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    15ba:	4604      	mov	r4, r0
    15bc:	b1c8      	cbz	r0, 15f2 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    15be:	2270      	movs	r2, #112	; 0x70
    15c0:	2100      	movs	r1, #0
    15c2:	f008 f9d2 	bl	996a <_set>
	s->iv[1] = 0xbb67ae85;
    15c6:	4b0b      	ldr	r3, [pc, #44]	; (15f4 <tc_sha256_init+0x3c>)
    15c8:	4a0b      	ldr	r2, [pc, #44]	; (15f8 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    15ca:	490c      	ldr	r1, [pc, #48]	; (15fc <tc_sha256_init+0x44>)
	s->iv[5] = 0x9b05688c;
    15cc:	480c      	ldr	r0, [pc, #48]	; (1600 <tc_sha256_init+0x48>)
	s->iv[1] = 0xbb67ae85;
    15ce:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    15d2:	4b0c      	ldr	r3, [pc, #48]	; (1604 <tc_sha256_init+0x4c>)
    15d4:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    15d8:	4b0b      	ldr	r3, [pc, #44]	; (1608 <tc_sha256_init+0x50>)
    15da:	e9c4 0304 	strd	r0, r3, [r4, #16]
	s->iv[6] = 0x1f83d9ab;
    15de:	4b0b      	ldr	r3, [pc, #44]	; (160c <tc_sha256_init+0x54>)
    15e0:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    15e2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    15e6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    15ea:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    15ee:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
    15f0:	2001      	movs	r0, #1
}
    15f2:	bd10      	pop	{r4, pc}
    15f4:	bb67ae85 	.word	0xbb67ae85
    15f8:	6a09e667 	.word	0x6a09e667
    15fc:	3c6ef372 	.word	0x3c6ef372
    1600:	510e527f 	.word	0x510e527f
    1604:	a54ff53a 	.word	0xa54ff53a
    1608:	9b05688c 	.word	0x9b05688c
    160c:	1f83d9ab 	.word	0x1f83d9ab

00001610 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1610:	4a14      	ldr	r2, [pc, #80]	; (1664 <nrf_cleanup_peripheral+0x54>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1616:	2101      	movs	r1, #1
    1618:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    161a:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    161e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1622:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    1626:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1628:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    162c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1630:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
    1634:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1636:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    163a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    163e:	f5a2 3208 	sub.w	r2, r2, #139264	; 0x22000
    1642:	2100      	movs	r1, #0
    1644:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1648:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    164c:	f502 3218 	add.w	r2, r2, #155648	; 0x26000
    1650:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1654:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    165c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
}
    1660:	4770      	bx	lr
    1662:	bf00      	nop
    1664:	4000b000 	.word	0x4000b000

00001668 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    166c:	4605      	mov	r5, r0
    166e:	9807      	ldr	r0, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    1670:	b910      	cbnz	r0, 1678 <base64_encode+0x10>
		*olen = 0;
    1672:	6010      	str	r0, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	n = slen / 3 + (slen % 3 != 0);
    1678:	2403      	movs	r4, #3
    167a:	fbb0 f4f4 	udiv	r4, r0, r4
    167e:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    1682:	42b8      	cmp	r0, r7
    1684:	bf18      	it	ne
    1686:	3401      	addne	r4, #1
	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    1688:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    168c:	d305      	bcc.n	169a <base64_encode+0x32>
		*olen = BASE64_SIZE_T_MAX;
    168e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1692:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    1694:	f06f 000b 	mvn.w	r0, #11
    1698:	e7ec      	b.n	1674 <base64_encode+0xc>
	n *= 4;
    169a:	00a4      	lsls	r4, r4, #2
	if ((dlen < n + 1) || (!dst)) {
    169c:	3401      	adds	r4, #1
    169e:	428c      	cmp	r4, r1
    16a0:	d800      	bhi.n	16a4 <base64_encode+0x3c>
    16a2:	b90d      	cbnz	r5, 16a8 <base64_encode+0x40>
		*olen = n + 1;
    16a4:	6014      	str	r4, [r2, #0]
    16a6:	e7f5      	b.n	1694 <base64_encode+0x2c>
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    16a8:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 1768 <base64_encode+0x100>
    16ac:	462e      	mov	r6, r5
	for (i = 0, p = dst; i < n; i += 3) {
    16ae:	2400      	movs	r4, #0
    16b0:	42bc      	cmp	r4, r7
    16b2:	4631      	mov	r1, r6
    16b4:	469c      	mov	ip, r3
    16b6:	f106 0604 	add.w	r6, r6, #4
    16ba:	f103 0303 	add.w	r3, r3, #3
    16be:	d32c      	bcc.n	171a <base64_encode+0xb2>
	if (i < slen) {
    16c0:	4284      	cmp	r4, r0
    16c2:	d225      	bcs.n	1710 <base64_encode+0xa8>
		C1 = *src++;
    16c4:	f89c 6000 	ldrb.w	r6, [ip]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    16c8:	4f27      	ldr	r7, [pc, #156]	; (1768 <base64_encode+0x100>)
		C2 = ((i + 1) < slen) ? *src++ : 0;
    16ca:	3401      	adds	r4, #1
    16cc:	4284      	cmp	r4, r0
    16ce:	bf38      	it	cc
    16d0:	f89c 3001 	ldrbcc.w	r3, [ip, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    16d4:	ea4f 0ca6 	mov.w	ip, r6, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    16d8:	bf28      	it	cs
    16da:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    16dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
    16e0:	f881 c000 	strb.w	ip, [r1]
		if ((i + 1) < slen) {
    16e4:	4284      	cmp	r4, r0
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    16e6:	eb07 1c13 	add.w	ip, r7, r3, lsr #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    16ea:	bf3c      	itt	cc
    16ec:	009b      	lslcc	r3, r3, #2
    16ee:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    16f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    16f6:	f006 0630 	and.w	r6, r6, #48	; 0x30
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    16fa:	bf38      	it	cc
    16fc:	5cfb      	ldrbcc	r3, [r7, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    16fe:	f81c 6006 	ldrb.w	r6, [ip, r6]
    1702:	704e      	strb	r6, [r1, #1]
			*p++ = '=';
    1704:	bf28      	it	cs
    1706:	233d      	movcs	r3, #61	; 0x3d
    1708:	708b      	strb	r3, [r1, #2]
		*p++ = '=';
    170a:	233d      	movs	r3, #61	; 0x3d
    170c:	70cb      	strb	r3, [r1, #3]
    170e:	3104      	adds	r1, #4
	*olen = p - dst;
    1710:	1b4d      	subs	r5, r1, r5
	*p = 0U;
    1712:	2000      	movs	r0, #0
	*olen = p - dst;
    1714:	6015      	str	r5, [r2, #0]
	*p = 0U;
    1716:	7008      	strb	r0, [r1, #0]
	return 0;
    1718:	e7ac      	b.n	1674 <base64_encode+0xc>
		C1 = *src++;
    171a:	f813 cc03 	ldrb.w	ip, [r3, #-3]
		C2 = *src++;
    171e:	f813 1c02 	ldrb.w	r1, [r3, #-2]
		C3 = *src++;
    1722:	f813 8c01 	ldrb.w	r8, [r3, #-1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1726:	ea4f 09ac 	mov.w	r9, ip, asr #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    172a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    172e:	f81e 9009 	ldrb.w	r9, [lr, r9]
    1732:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1736:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
    173a:	eb0e 1911 	add.w	r9, lr, r1, lsr #4
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    173e:	0089      	lsls	r1, r1, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1740:	f819 c00c 	ldrb.w	ip, [r9, ip]
    1744:	f806 cc03 	strb.w	ip, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1748:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    174c:	eb0e 1c98 	add.w	ip, lr, r8, lsr #6
		*p++ = base64_enc_map[C3 & 0x3F];
    1750:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1754:	f81c 1001 	ldrb.w	r1, [ip, r1]
    1758:	f806 1c02 	strb.w	r1, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    175c:	f81e 1008 	ldrb.w	r1, [lr, r8]
    1760:	f806 1c01 	strb.w	r1, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    1764:	3403      	adds	r4, #3
    1766:	e7a3      	b.n	16b0 <base64_encode+0x48>
    1768:	0000c8e4 	.word	0x0000c8e4

0000176c <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    176c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1770:	468c      	mov	ip, r1
    1772:	9e07      	ldr	r6, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1774:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1898 <base64_decode+0x12c>
	for (i = n = j = 0U; i < slen; i++) {
    1778:	2100      	movs	r1, #0
{
    177a:	4607      	mov	r7, r0
	for (i = n = j = 0U; i < slen; i++) {
    177c:	460d      	mov	r5, r1
    177e:	4608      	mov	r0, r1
    1780:	42b5      	cmp	r5, r6
    1782:	d30a      	bcc.n	179a <base64_decode+0x2e>
    1784:	462e      	mov	r6, r5
    1786:	e004      	b.n	1792 <base64_decode+0x26>
			++i;
    1788:	3501      	adds	r5, #1
		while (i < slen && src[i] == ' ') {
    178a:	42ae      	cmp	r6, r5
			++x;
    178c:	f10e 0e01 	add.w	lr, lr, #1
		while (i < slen && src[i] == ' ') {
    1790:	d105      	bne.n	179e <base64_decode+0x32>
		}

		n++;
	}

	if (n == 0) {
    1792:	bb90      	cbnz	r0, 17fa <base64_decode+0x8e>
		*olen = 0;
    1794:	6010      	str	r0, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    1796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		x = 0U;
    179a:	f04f 0e00 	mov.w	lr, #0
		while (i < slen && src[i] == ' ') {
    179e:	5d5c      	ldrb	r4, [r3, r5]
    17a0:	2c20      	cmp	r4, #32
    17a2:	d0f1      	beq.n	1788 <base64_decode+0x1c>
		if (i == slen) {
    17a4:	42ae      	cmp	r6, r5
    17a6:	d0f4      	beq.n	1792 <base64_decode+0x26>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    17a8:	eba6 0905 	sub.w	r9, r6, r5
    17ac:	f1b9 0f01 	cmp.w	r9, #1
    17b0:	d013      	beq.n	17da <base64_decode+0x6e>
    17b2:	2c0d      	cmp	r4, #13
    17b4:	d111      	bne.n	17da <base64_decode+0x6e>
    17b6:	eb03 0905 	add.w	r9, r3, r5
    17ba:	f899 9001 	ldrb.w	r9, [r9, #1]
    17be:	f1b9 0f0a 	cmp.w	r9, #10
		if (src[i] == '\n') {
    17c2:	d018      	beq.n	17f6 <base64_decode+0x8a>
		if (x != 0U) {
    17c4:	f1be 0f00 	cmp.w	lr, #0
    17c8:	d104      	bne.n	17d4 <base64_decode+0x68>
		if (src[i] == '=' && ++j > 2) {
    17ca:	2c3d      	cmp	r4, #61	; 0x3d
    17cc:	d107      	bne.n	17de <base64_decode+0x72>
    17ce:	3101      	adds	r1, #1
    17d0:	2902      	cmp	r1, #2
    17d2:	d907      	bls.n	17e4 <base64_decode+0x78>
			return -EINVAL;
    17d4:	f06f 0015 	mvn.w	r0, #21
    17d8:	e7dd      	b.n	1796 <base64_decode+0x2a>
		if (src[i] == '\n') {
    17da:	2c0a      	cmp	r4, #10
    17dc:	e7f1      	b.n	17c2 <base64_decode+0x56>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    17de:	f014 0f80 	tst.w	r4, #128	; 0x80
    17e2:	d1f7      	bne.n	17d4 <base64_decode+0x68>
    17e4:	f818 4004 	ldrb.w	r4, [r8, r4]
    17e8:	2c7f      	cmp	r4, #127	; 0x7f
    17ea:	d0f3      	beq.n	17d4 <base64_decode+0x68>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    17ec:	2c3f      	cmp	r4, #63	; 0x3f
    17ee:	d801      	bhi.n	17f4 <base64_decode+0x88>
    17f0:	2900      	cmp	r1, #0
    17f2:	d1ef      	bne.n	17d4 <base64_decode+0x68>
		n++;
    17f4:	3001      	adds	r0, #1
	for (i = n = j = 0U; i < slen; i++) {
    17f6:	3501      	adds	r5, #1
    17f8:	e7c2      	b.n	1780 <base64_decode+0x14>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    17fa:	f04f 0e06 	mov.w	lr, #6
    17fe:	f000 0507 	and.w	r5, r0, #7
    1802:	08c4      	lsrs	r4, r0, #3
    1804:	fb0e f505 	mul.w	r5, lr, r5
    1808:	fb0e f404 	mul.w	r4, lr, r4
    180c:	3507      	adds	r5, #7
	n -= j;
    180e:	1a64      	subs	r4, r4, r1
    1810:	eb04 04d5 	add.w	r4, r4, r5, lsr #3
	if (dst == NULL || dlen < n) {
    1814:	b18f      	cbz	r7, 183a <base64_decode+0xce>
    1816:	4564      	cmp	r4, ip
    1818:	d80f      	bhi.n	183a <base64_decode+0xce>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    181a:	2400      	movs	r4, #0
		j -= (base64_dec_map[*src] == 64U);
    181c:	f8df e078 	ldr.w	lr, [pc, #120]	; 1898 <base64_decode+0x12c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1820:	f8df 8078 	ldr.w	r8, [pc, #120]	; 189c <base64_decode+0x130>
    1824:	469c      	mov	ip, r3
    1826:	441e      	add	r6, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1828:	2003      	movs	r0, #3
	if (dst == NULL || dlen < n) {
    182a:	463b      	mov	r3, r7
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    182c:	4621      	mov	r1, r4
    182e:	4566      	cmp	r6, ip
    1830:	d107      	bne.n	1842 <base64_decode+0xd6>
	*olen = p - dst;
    1832:	1bdb      	subs	r3, r3, r7
    1834:	6013      	str	r3, [r2, #0]
	return 0;
    1836:	2000      	movs	r0, #0
    1838:	e7ad      	b.n	1796 <base64_decode+0x2a>
		*olen = n;
    183a:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    183c:	f06f 000b 	mvn.w	r0, #11
    1840:	e7a9      	b.n	1796 <base64_decode+0x2a>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1842:	f81c 9b01 	ldrb.w	r9, [ip], #1
    1846:	f1a9 050a 	sub.w	r5, r9, #10
    184a:	b2ed      	uxtb	r5, r5
    184c:	2d16      	cmp	r5, #22
    184e:	d803      	bhi.n	1858 <base64_decode+0xec>
    1850:	fa28 f505 	lsr.w	r5, r8, r5
    1854:	07ed      	lsls	r5, r5, #31
    1856:	d4ea      	bmi.n	182e <base64_decode+0xc2>
		j -= (base64_dec_map[*src] == 64U);
    1858:	f81e 5009 	ldrb.w	r5, [lr, r9]
		if (++n == 4) {
    185c:	3101      	adds	r1, #1
		j -= (base64_dec_map[*src] == 64U);
    185e:	2d40      	cmp	r5, #64	; 0x40
    1860:	bf08      	it	eq
    1862:	3801      	subeq	r0, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1864:	f005 053f 	and.w	r5, r5, #63	; 0x3f
		if (++n == 4) {
    1868:	2904      	cmp	r1, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    186a:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
		if (++n == 4) {
    186e:	d1de      	bne.n	182e <base64_decode+0xc2>
			if (j > 0) {
    1870:	b178      	cbz	r0, 1892 <base64_decode+0x126>
				*p++ = (unsigned char)(x >> 16);
    1872:	0c21      	lsrs	r1, r4, #16
			if (j > 1) {
    1874:	2801      	cmp	r0, #1
				*p++ = (unsigned char)(x >> 16);
    1876:	7019      	strb	r1, [r3, #0]
			if (j > 1) {
    1878:	d102      	bne.n	1880 <base64_decode+0x114>
				*p++ = (unsigned char)(x >> 16);
    187a:	3301      	adds	r3, #1
			n = 0;
    187c:	2100      	movs	r1, #0
    187e:	e7d6      	b.n	182e <base64_decode+0xc2>
			if (j > 2) {
    1880:	2802      	cmp	r0, #2
				*p++ = (unsigned char)(x >> 8);
    1882:	ea4f 2114 	mov.w	r1, r4, lsr #8
    1886:	7059      	strb	r1, [r3, #1]
				*p++ = (unsigned char)(x);
    1888:	bf16      	itet	ne
    188a:	709c      	strbne	r4, [r3, #2]
				*p++ = (unsigned char)(x >> 8);
    188c:	3302      	addeq	r3, #2
				*p++ = (unsigned char)(x);
    188e:	3303      	addne	r3, #3
    1890:	e7f4      	b.n	187c <base64_decode+0x110>
			n = 0;
    1892:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1894:	e7cb      	b.n	182e <base64_decode+0xc2>
    1896:	bf00      	nop
    1898:	0000c864 	.word	0x0000c864
    189c:	00400009 	.word	0x00400009

000018a0 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    18a0:	4b01      	ldr	r3, [pc, #4]	; (18a8 <__printk_hook_install+0x8>)
    18a2:	6018      	str	r0, [r3, #0]
}
    18a4:	4770      	bx	lr
    18a6:	bf00      	nop
    18a8:	20000008 	.word	0x20000008

000018ac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    18ac:	b530      	push	{r4, r5, lr}
    18ae:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    18b0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    18b4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    18b6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    18b8:	a901      	add	r1, sp, #4
    18ba:	4805      	ldr	r0, [pc, #20]	; (18d0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    18bc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    18be:	f000 f8e9 	bl	1a94 <cbvprintf>

	if (ctx.count < ctx.max) {
    18c2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    18c6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    18c8:	bfb8      	it	lt
    18ca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    18cc:	b005      	add	sp, #20
    18ce:	bd30      	pop	{r4, r5, pc}
    18d0:	00009a07 	.word	0x00009a07

000018d4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    18d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    18d8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    18dc:	f019 0808 	ands.w	r8, r9, #8
{
    18e0:	4604      	mov	r4, r0
    18e2:	4693      	mov	fp, r2
	if (processing) {
    18e4:	d00d      	beq.n	1902 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    18e6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    18e8:	bf0c      	ite	eq
    18ea:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    18ee:	f049 0920 	orrne.w	r9, r9, #32
    18f2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    18f6:	f38b 8811 	msr	BASEPRI, fp
    18fa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    18fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1902:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1906:	2902      	cmp	r1, #2
    1908:	d107      	bne.n	191a <process_event+0x46>
			evt = process_recheck(mgr);
    190a:	4620      	mov	r0, r4
    190c:	f008 f8a8 	bl	9a60 <process_recheck>
		if (evt == EVT_NOP) {
    1910:	2800      	cmp	r0, #0
    1912:	d0f0      	beq.n	18f6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1914:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1916:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1918:	d14e      	bne.n	19b8 <process_event+0xe4>
			res = mgr->last_res;
    191a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    191c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    191e:	2f00      	cmp	r7, #0
    1920:	da15      	bge.n	194e <process_event+0x7a>
		*clients = mgr->clients;
    1922:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1924:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1928:	e9c4 8800 	strd	r8, r8, [r4]
    192c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1930:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1932:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1934:	8b21      	ldrh	r1, [r4, #24]
    1936:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    193a:	45ca      	cmp	sl, r9
    193c:	d002      	beq.n	1944 <process_event+0x70>
		if (do_monitors
    193e:	68a3      	ldr	r3, [r4, #8]
    1940:	2b00      	cmp	r3, #0
    1942:	d15a      	bne.n	19fa <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    1944:	b90d      	cbnz	r5, 194a <process_event+0x76>
		    || (transit != NULL)) {
    1946:	2e00      	cmp	r6, #0
    1948:	d071      	beq.n	1a2e <process_event+0x15a>
    194a:	2300      	movs	r3, #0
    194c:	e056      	b.n	19fc <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    194e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1952:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1954:	2a01      	cmp	r2, #1
    1956:	d81e      	bhi.n	1996 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1958:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    195c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    195e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1960:	b289      	uxth	r1, r1
    1962:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1966:	d10a      	bne.n	197e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1968:	b13d      	cbz	r5, 197a <process_event+0xa6>
    196a:	8b63      	ldrh	r3, [r4, #26]
    196c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    196e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1970:	3301      	adds	r3, #1
    1972:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1974:	2a00      	cmp	r2, #0
    1976:	d1fa      	bne.n	196e <process_event+0x9a>
    1978:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    197a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    197e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1980:	4620      	mov	r0, r4
    1982:	f008 f86d 	bl	9a60 <process_recheck>
    1986:	4606      	mov	r6, r0
    1988:	2800      	cmp	r0, #0
    198a:	d0d3      	beq.n	1934 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    198c:	8b23      	ldrh	r3, [r4, #24]
    198e:	f043 0320 	orr.w	r3, r3, #32
    1992:	8323      	strh	r3, [r4, #24]
    1994:	e7cd      	b.n	1932 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1996:	2b04      	cmp	r3, #4
    1998:	d10c      	bne.n	19b4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    199a:	f021 0107 	bic.w	r1, r1, #7
    199e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    19a0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    19a2:	4620      	mov	r0, r4
    19a4:	f008 f85c 	bl	9a60 <process_recheck>
    19a8:	4605      	mov	r5, r0
    19aa:	2800      	cmp	r0, #0
    19ac:	d0c1      	beq.n	1932 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    19ae:	f041 0120 	orr.w	r1, r1, #32
    19b2:	8321      	strh	r1, [r4, #24]
    19b4:	2500      	movs	r5, #0
    19b6:	e7bc      	b.n	1932 <process_event+0x5e>
		} else if (evt == EVT_START) {
    19b8:	2803      	cmp	r0, #3
    19ba:	d109      	bne.n	19d0 <process_event+0xfc>
			transit = mgr->transitions->start;
    19bc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19be:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    19c2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19c4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    19c8:	8323      	strh	r3, [r4, #24]
}
    19ca:	2500      	movs	r5, #0
		res = 0;
    19cc:	462f      	mov	r7, r5
    19ce:	e7b1      	b.n	1934 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    19d0:	2804      	cmp	r0, #4
    19d2:	d106      	bne.n	19e2 <process_event+0x10e>
			transit = mgr->transitions->stop;
    19d4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19d6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    19da:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19dc:	f043 0304 	orr.w	r3, r3, #4
    19e0:	e7f2      	b.n	19c8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    19e2:	2805      	cmp	r0, #5
    19e4:	d106      	bne.n	19f4 <process_event+0x120>
			transit = mgr->transitions->reset;
    19e6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19e8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    19ec:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19ee:	f043 0305 	orr.w	r3, r3, #5
    19f2:	e7e9      	b.n	19c8 <process_event+0xf4>
    19f4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    19f6:	462e      	mov	r6, r5
    19f8:	e7e8      	b.n	19cc <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    19fa:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    19fc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1a00:	8321      	strh	r1, [r4, #24]
    1a02:	f38b 8811 	msr	BASEPRI, fp
    1a06:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1a0a:	b9fb      	cbnz	r3, 1a4c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    1a0c:	bb85      	cbnz	r5, 1a70 <process_event+0x19c>
			if (transit != NULL) {
    1a0e:	b116      	cbz	r6, 1a16 <process_event+0x142>
				transit(mgr, transition_complete);
    1a10:	491f      	ldr	r1, [pc, #124]	; (1a90 <process_event+0x1bc>)
    1a12:	4620      	mov	r0, r4
    1a14:	47b0      	blx	r6
	__asm__ volatile(
    1a16:	f04f 0320 	mov.w	r3, #32
    1a1a:	f3ef 8b11 	mrs	fp, BASEPRI
    1a1e:	f383 8811 	msr	BASEPRI, r3
    1a22:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1a26:	8b23      	ldrh	r3, [r4, #24]
    1a28:	f023 0308 	bic.w	r3, r3, #8
    1a2c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1a2e:	8b23      	ldrh	r3, [r4, #24]
    1a30:	06da      	lsls	r2, r3, #27
    1a32:	d525      	bpl.n	1a80 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1a34:	f023 0310 	bic.w	r3, r3, #16
    1a38:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1a3a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1a3c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1a40:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1a44:	2900      	cmp	r1, #0
    1a46:	f47f af5e 	bne.w	1906 <process_event+0x32>
out:
    1a4a:	e754      	b.n	18f6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1a4c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1a4e:	2900      	cmp	r1, #0
    1a50:	d0dc      	beq.n	1a0c <process_event+0x138>
	return node->next;
    1a52:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1a56:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1a5a:	463b      	mov	r3, r7
    1a5c:	4652      	mov	r2, sl
    1a5e:	4620      	mov	r0, r4
    1a60:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1a62:	f1b9 0f00 	cmp.w	r9, #0
    1a66:	d0d1      	beq.n	1a0c <process_event+0x138>
    1a68:	4649      	mov	r1, r9
    1a6a:	f8d9 9000 	ldr.w	r9, [r9]
    1a6e:	e7f2      	b.n	1a56 <process_event+0x182>
    1a70:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1a72:	463b      	mov	r3, r7
    1a74:	4652      	mov	r2, sl
    1a76:	4620      	mov	r0, r4
    1a78:	682d      	ldr	r5, [r5, #0]
    1a7a:	f008 f80d 	bl	9a98 <notify_one>
    1a7e:	e7c5      	b.n	1a0c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1a80:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1a84:	bf1e      	ittt	ne
    1a86:	f023 0320 	bicne.w	r3, r3, #32
    1a8a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1a8c:	2102      	movne	r1, #2
    1a8e:	e7d5      	b.n	1a3c <process_event+0x168>
    1a90:	00009ac5 	.word	0x00009ac5

00001a94 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a98:	b091      	sub	sp, #68	; 0x44
    1a9a:	468b      	mov	fp, r1
    1a9c:	9002      	str	r0, [sp, #8]
    1a9e:	4692      	mov	sl, r2
    1aa0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1aa2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1aa4:	f89a 0000 	ldrb.w	r0, [sl]
    1aa8:	b908      	cbnz	r0, 1aae <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1aaa:	4628      	mov	r0, r5
    1aac:	e35f      	b.n	216e <cbvprintf+0x6da>
		if (*fp != '%') {
    1aae:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1ab0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    1ab4:	d007      	beq.n	1ac6 <cbvprintf+0x32>
			OUTC('%');
    1ab6:	9b02      	ldr	r3, [sp, #8]
    1ab8:	4659      	mov	r1, fp
    1aba:	4798      	blx	r3
    1abc:	2800      	cmp	r0, #0
    1abe:	f2c0 8356 	blt.w	216e <cbvprintf+0x6da>
    1ac2:	3501      	adds	r5, #1
			break;
    1ac4:	e212      	b.n	1eec <cbvprintf+0x458>
		} state = {
    1ac6:	2218      	movs	r2, #24
    1ac8:	2100      	movs	r1, #0
    1aca:	a80a      	add	r0, sp, #40	; 0x28
    1acc:	f009 f8b1 	bl	ac32 <memset>
	if (*sp == '%') {
    1ad0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1ad4:	2b25      	cmp	r3, #37	; 0x25
    1ad6:	d078      	beq.n	1bca <cbvprintf+0x136>
    1ad8:	2200      	movs	r2, #0
    1ada:	4610      	mov	r0, r2
    1adc:	4696      	mov	lr, r2
    1ade:	4694      	mov	ip, r2
    1ae0:	4616      	mov	r6, r2
    1ae2:	4639      	mov	r1, r7
		switch (*sp) {
    1ae4:	f817 3b01 	ldrb.w	r3, [r7], #1
    1ae8:	2b2b      	cmp	r3, #43	; 0x2b
    1aea:	f000 809d 	beq.w	1c28 <cbvprintf+0x194>
    1aee:	f200 8094 	bhi.w	1c1a <cbvprintf+0x186>
    1af2:	2b20      	cmp	r3, #32
    1af4:	f000 809b 	beq.w	1c2e <cbvprintf+0x19a>
    1af8:	2b23      	cmp	r3, #35	; 0x23
    1afa:	f000 809b 	beq.w	1c34 <cbvprintf+0x1a0>
    1afe:	b12e      	cbz	r6, 1b0c <cbvprintf+0x78>
    1b00:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1b04:	f046 0604 	orr.w	r6, r6, #4
    1b08:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1b0c:	f1bc 0f00 	cmp.w	ip, #0
    1b10:	d005      	beq.n	1b1e <cbvprintf+0x8a>
    1b12:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1b16:	f046 0608 	orr.w	r6, r6, #8
    1b1a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1b1e:	f1be 0f00 	cmp.w	lr, #0
    1b22:	d005      	beq.n	1b30 <cbvprintf+0x9c>
    1b24:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1b28:	f046 0610 	orr.w	r6, r6, #16
    1b2c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1b30:	b128      	cbz	r0, 1b3e <cbvprintf+0xaa>
    1b32:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1b36:	f040 0020 	orr.w	r0, r0, #32
    1b3a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1b3e:	b12a      	cbz	r2, 1b4c <cbvprintf+0xb8>
    1b40:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1b48:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1b4c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1b50:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1b54:	2844      	cmp	r0, #68	; 0x44
    1b56:	d103      	bne.n	1b60 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1b58:	f36f 1286 	bfc	r2, #6, #1
    1b5c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1b60:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1b64:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1b6a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1b6e:	d17b      	bne.n	1c68 <cbvprintf+0x1d4>
		conv->width_star = true;
    1b70:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b74:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    1b78:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1b7a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1b7e:	781a      	ldrb	r2, [r3, #0]
    1b80:	2a2e      	cmp	r2, #46	; 0x2e
    1b82:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b86:	bf0c      	ite	eq
    1b88:	2101      	moveq	r1, #1
    1b8a:	2100      	movne	r1, #0
    1b8c:	f361 0241 	bfi	r2, r1, #1, #1
    1b90:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1b94:	d174      	bne.n	1c80 <cbvprintf+0x1ec>
	if (*sp == '*') {
    1b96:	785a      	ldrb	r2, [r3, #1]
    1b98:	2a2a      	cmp	r2, #42	; 0x2a
    1b9a:	d06a      	beq.n	1c72 <cbvprintf+0x1de>
	++sp;
    1b9c:	3301      	adds	r3, #1
	size_t val = 0;
    1b9e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1ba0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1ba2:	4618      	mov	r0, r3
    1ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
    1ba8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1bac:	2f09      	cmp	r7, #9
    1bae:	f240 808e 	bls.w	1cce <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1bb2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1bb6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1bb8:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1bbc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1bc0:	f361 0241 	bfi	r2, r1, #1, #1
    1bc4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1bc8:	e05a      	b.n	1c80 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1bca:	f10a 0702 	add.w	r7, sl, #2
    1bce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1bd2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1bd6:	07d9      	lsls	r1, r3, #31
    1bd8:	f140 8149 	bpl.w	1e6e <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1bdc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1be0:	f1b9 0f00 	cmp.w	r9, #0
    1be4:	da07      	bge.n	1bf6 <cbvprintf+0x162>
				conv->flag_dash = true;
    1be6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1bea:	f042 0204 	orr.w	r2, r2, #4
    1bee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1bf2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1bf6:	075a      	lsls	r2, r3, #29
    1bf8:	f140 8142 	bpl.w	1e80 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1bfc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1c00:	f1b8 0f00 	cmp.w	r8, #0
    1c04:	f280 8141 	bge.w	1e8a <cbvprintf+0x3f6>
				conv->prec_present = false;
    1c08:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1c0c:	f36f 0341 	bfc	r3, #1, #1
    1c10:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1c14:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1c18:	e137      	b.n	1e8a <cbvprintf+0x3f6>
		switch (*sp) {
    1c1a:	2b2d      	cmp	r3, #45	; 0x2d
    1c1c:	d00c      	beq.n	1c38 <cbvprintf+0x1a4>
    1c1e:	2b30      	cmp	r3, #48	; 0x30
    1c20:	f47f af6d 	bne.w	1afe <cbvprintf+0x6a>
			conv->flag_zero = true;
    1c24:	2201      	movs	r2, #1
	} while (loop);
    1c26:	e75c      	b.n	1ae2 <cbvprintf+0x4e>
			conv->flag_plus = true;
    1c28:	f04f 0c01 	mov.w	ip, #1
    1c2c:	e759      	b.n	1ae2 <cbvprintf+0x4e>
			conv->flag_space = true;
    1c2e:	f04f 0e01 	mov.w	lr, #1
    1c32:	e756      	b.n	1ae2 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1c34:	2001      	movs	r0, #1
    1c36:	e754      	b.n	1ae2 <cbvprintf+0x4e>
		switch (*sp) {
    1c38:	2601      	movs	r6, #1
    1c3a:	e752      	b.n	1ae2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1c3c:	fb0c 0202 	mla	r2, ip, r2, r0
    1c40:	3a30      	subs	r2, #48	; 0x30
    1c42:	4633      	mov	r3, r6
    1c44:	461e      	mov	r6, r3
    1c46:	f816 0b01 	ldrb.w	r0, [r6], #1
    1c4a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1c4e:	2f09      	cmp	r7, #9
    1c50:	d9f4      	bls.n	1c3c <cbvprintf+0x1a8>
	if (sp != wp) {
    1c52:	4299      	cmp	r1, r3
    1c54:	d093      	beq.n	1b7e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1c56:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1c5a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1c5c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1c5e:	f362 0141 	bfi	r1, r2, #1, #1
    1c62:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1c66:	e78a      	b.n	1b7e <cbvprintf+0xea>
    1c68:	460b      	mov	r3, r1
	size_t val = 0;
    1c6a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1c6c:	f04f 0c0a 	mov.w	ip, #10
    1c70:	e7e8      	b.n	1c44 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1c72:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1c76:	f042 0204 	orr.w	r2, r2, #4
    1c7a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1c7e:	3302      	adds	r3, #2
	switch (*sp) {
    1c80:	461f      	mov	r7, r3
    1c82:	f817 2b01 	ldrb.w	r2, [r7], #1
    1c86:	2a6c      	cmp	r2, #108	; 0x6c
    1c88:	d041      	beq.n	1d0e <cbvprintf+0x27a>
    1c8a:	d825      	bhi.n	1cd8 <cbvprintf+0x244>
    1c8c:	2a68      	cmp	r2, #104	; 0x68
    1c8e:	d02b      	beq.n	1ce8 <cbvprintf+0x254>
    1c90:	2a6a      	cmp	r2, #106	; 0x6a
    1c92:	d046      	beq.n	1d22 <cbvprintf+0x28e>
    1c94:	2a4c      	cmp	r2, #76	; 0x4c
    1c96:	d04c      	beq.n	1d32 <cbvprintf+0x29e>
    1c98:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1c9a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c9e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1ca2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1ca6:	2a78      	cmp	r2, #120	; 0x78
    1ca8:	f200 80d9 	bhi.w	1e5e <cbvprintf+0x3ca>
    1cac:	2a57      	cmp	r2, #87	; 0x57
    1cae:	d84d      	bhi.n	1d4c <cbvprintf+0x2b8>
    1cb0:	2a41      	cmp	r2, #65	; 0x41
    1cb2:	d003      	beq.n	1cbc <cbvprintf+0x228>
    1cb4:	3a45      	subs	r2, #69	; 0x45
    1cb6:	2a02      	cmp	r2, #2
    1cb8:	f200 80d1 	bhi.w	1e5e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1cbc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1cc0:	2204      	movs	r2, #4
    1cc2:	f362 0302 	bfi	r3, r2, #0, #3
    1cc6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1cca:	2301      	movs	r3, #1
			break;
    1ccc:	e09e      	b.n	1e0c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1cce:	fb06 2101 	mla	r1, r6, r1, r2
    1cd2:	3930      	subs	r1, #48	; 0x30
    1cd4:	4603      	mov	r3, r0
    1cd6:	e764      	b.n	1ba2 <cbvprintf+0x10e>
	switch (*sp) {
    1cd8:	2a74      	cmp	r2, #116	; 0x74
    1cda:	d026      	beq.n	1d2a <cbvprintf+0x296>
    1cdc:	2a7a      	cmp	r2, #122	; 0x7a
    1cde:	d1db      	bne.n	1c98 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1ce0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1ce4:	2206      	movs	r2, #6
    1ce6:	e00d      	b.n	1d04 <cbvprintf+0x270>
		if (*++sp == 'h') {
    1ce8:	785a      	ldrb	r2, [r3, #1]
    1cea:	2a68      	cmp	r2, #104	; 0x68
    1cec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1cf0:	d106      	bne.n	1d00 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1cf2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1cf4:	f361 02c6 	bfi	r2, r1, #3, #4
    1cf8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1cfc:	1c9f      	adds	r7, r3, #2
    1cfe:	e7cc      	b.n	1c9a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1d00:	4613      	mov	r3, r2
    1d02:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1d04:	f362 03c6 	bfi	r3, r2, #3, #4
    1d08:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1d0c:	e7c5      	b.n	1c9a <cbvprintf+0x206>
		if (*++sp == 'l') {
    1d0e:	785a      	ldrb	r2, [r3, #1]
    1d10:	2a6c      	cmp	r2, #108	; 0x6c
    1d12:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1d16:	d101      	bne.n	1d1c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1d18:	2104      	movs	r1, #4
    1d1a:	e7eb      	b.n	1cf4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1d1c:	4613      	mov	r3, r2
    1d1e:	2203      	movs	r2, #3
    1d20:	e7f0      	b.n	1d04 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1d22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1d26:	2205      	movs	r2, #5
    1d28:	e7ec      	b.n	1d04 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1d2a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1d2e:	2207      	movs	r2, #7
    1d30:	e7e8      	b.n	1d04 <cbvprintf+0x270>
		conv->unsupported = true;
    1d32:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1d36:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1d3a:	f023 0302 	bic.w	r3, r3, #2
    1d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1d42:	f043 0302 	orr.w	r3, r3, #2
    1d46:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1d4a:	e7a6      	b.n	1c9a <cbvprintf+0x206>
	switch (conv->specifier) {
    1d4c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1d50:	2920      	cmp	r1, #32
    1d52:	f200 8084 	bhi.w	1e5e <cbvprintf+0x3ca>
    1d56:	a001      	add	r0, pc, #4	; (adr r0, 1d5c <cbvprintf+0x2c8>)
    1d58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1d5c:	00001e21 	.word	0x00001e21
    1d60:	00001e5f 	.word	0x00001e5f
    1d64:	00001e5f 	.word	0x00001e5f
    1d68:	00001e5f 	.word	0x00001e5f
    1d6c:	00001e5f 	.word	0x00001e5f
    1d70:	00001e5f 	.word	0x00001e5f
    1d74:	00001e5f 	.word	0x00001e5f
    1d78:	00001e5f 	.word	0x00001e5f
    1d7c:	00001e5f 	.word	0x00001e5f
    1d80:	00001cbd 	.word	0x00001cbd
    1d84:	00001e5f 	.word	0x00001e5f
    1d88:	00001e21 	.word	0x00001e21
    1d8c:	00001de1 	.word	0x00001de1
    1d90:	00001cbd 	.word	0x00001cbd
    1d94:	00001cbd 	.word	0x00001cbd
    1d98:	00001cbd 	.word	0x00001cbd
    1d9c:	00001e5f 	.word	0x00001e5f
    1da0:	00001de1 	.word	0x00001de1
    1da4:	00001e5f 	.word	0x00001e5f
    1da8:	00001e5f 	.word	0x00001e5f
    1dac:	00001e5f 	.word	0x00001e5f
    1db0:	00001e5f 	.word	0x00001e5f
    1db4:	00001e29 	.word	0x00001e29
    1db8:	00001e21 	.word	0x00001e21
    1dbc:	00001e45 	.word	0x00001e45
    1dc0:	00001e5f 	.word	0x00001e5f
    1dc4:	00001e5f 	.word	0x00001e5f
    1dc8:	00001e45 	.word	0x00001e45
    1dcc:	00001e5f 	.word	0x00001e5f
    1dd0:	00001e21 	.word	0x00001e21
    1dd4:	00001e5f 	.word	0x00001e5f
    1dd8:	00001e5f 	.word	0x00001e5f
    1ddc:	00001e21 	.word	0x00001e21
		conv->specifier_cat = SPECIFIER_SINT;
    1de0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1de4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1de6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1dea:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1dee:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1df0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1df4:	bf02      	ittt	eq
    1df6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1dfa:	f041 0101 	orreq.w	r1, r1, #1
    1dfe:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1e02:	2a63      	cmp	r2, #99	; 0x63
    1e04:	d131      	bne.n	1e6a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1e06:	3b00      	subs	r3, #0
    1e08:	bf18      	it	ne
    1e0a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1e0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1e10:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1e14:	430b      	orrs	r3, r1
    1e16:	f363 0241 	bfi	r2, r3, #1, #1
    1e1a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1e1e:	e6d8      	b.n	1bd2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1e20:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1e24:	2002      	movs	r0, #2
    1e26:	e7de      	b.n	1de6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1e28:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1e2c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1e30:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1e34:	2103      	movs	r1, #3
    1e36:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1e3a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1e3c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1e40:	4143      	adcs	r3, r0
    1e42:	e7e3      	b.n	1e0c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1e44:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1e48:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1e4a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1e4e:	f361 0202 	bfi	r2, r1, #0, #3
    1e52:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1e56:	bf14      	ite	ne
    1e58:	2301      	movne	r3, #1
    1e5a:	2300      	moveq	r3, #0
    1e5c:	e7d6      	b.n	1e0c <cbvprintf+0x378>
		conv->invalid = true;
    1e5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1e62:	f043 0301 	orr.w	r3, r3, #1
    1e66:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1e6a:	2300      	movs	r3, #0
    1e6c:	e7ce      	b.n	1e0c <cbvprintf+0x378>
		} else if (conv->width_present) {
    1e6e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1e72:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1e74:	bfb4      	ite	lt
    1e76:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1e7a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    1e7e:	e6ba      	b.n	1bf6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1e80:	079b      	lsls	r3, r3, #30
    1e82:	f57f aec7 	bpl.w	1c14 <cbvprintf+0x180>
			precision = conv->prec_value;
    1e86:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1e8a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1e8e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1e90:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1e94:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1e98:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1e9c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1e9e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1ea2:	d138      	bne.n	1f16 <cbvprintf+0x482>
			switch (length_mod) {
    1ea4:	1ecb      	subs	r3, r1, #3
    1ea6:	2b04      	cmp	r3, #4
    1ea8:	d822      	bhi.n	1ef0 <cbvprintf+0x45c>
    1eaa:	e8df f003 	tbb	[pc, r3]
    1eae:	0903      	.short	0x0903
    1eb0:	2109      	.short	0x2109
    1eb2:	21          	.byte	0x21
    1eb3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1eb4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1eb8:	17da      	asrs	r2, r3, #31
    1eba:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    1ebe:	e006      	b.n	1ece <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    1ec0:	3407      	adds	r4, #7
    1ec2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1ec6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1eca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1ece:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1ed2:	f013 0603 	ands.w	r6, r3, #3
    1ed6:	d056      	beq.n	1f86 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    1ed8:	9802      	ldr	r0, [sp, #8]
    1eda:	463b      	mov	r3, r7
    1edc:	4652      	mov	r2, sl
    1ede:	4659      	mov	r1, fp
    1ee0:	f007 feb9 	bl	9c56 <outs>
    1ee4:	2800      	cmp	r0, #0
    1ee6:	f2c0 8142 	blt.w	216e <cbvprintf+0x6da>
    1eea:	4405      	add	r5, r0
			continue;
    1eec:	46ba      	mov	sl, r7
    1eee:	e5d9      	b.n	1aa4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1ef0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1ef4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1ef6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1efa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1efe:	d105      	bne.n	1f0c <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    1f00:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1f04:	930a      	str	r3, [sp, #40]	; 0x28
    1f06:	2300      	movs	r3, #0
    1f08:	930b      	str	r3, [sp, #44]	; 0x2c
    1f0a:	e7e0      	b.n	1ece <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    1f0c:	2902      	cmp	r1, #2
    1f0e:	d1de      	bne.n	1ece <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    1f10:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1f14:	e7d0      	b.n	1eb8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1f16:	2b02      	cmp	r3, #2
    1f18:	d123      	bne.n	1f62 <cbvprintf+0x4ce>
			switch (length_mod) {
    1f1a:	1ecb      	subs	r3, r1, #3
    1f1c:	2b04      	cmp	r3, #4
    1f1e:	d813      	bhi.n	1f48 <cbvprintf+0x4b4>
    1f20:	e8df f003 	tbb	[pc, r3]
    1f24:	120a0a03 	.word	0x120a0a03
    1f28:	12          	.byte	0x12
    1f29:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1f2a:	6822      	ldr	r2, [r4, #0]
    1f2c:	920a      	str	r2, [sp, #40]	; 0x28
    1f2e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1f30:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1f32:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1f34:	4604      	mov	r4, r0
    1f36:	e7ca      	b.n	1ece <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    1f38:	1de0      	adds	r0, r4, #7
    1f3a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1f3e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    1f42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    1f46:	e7f5      	b.n	1f34 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    1f48:	f854 3b04 	ldr.w	r3, [r4], #4
    1f4c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1f4e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1f50:	f04f 0300 	mov.w	r3, #0
    1f54:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1f56:	d0d3      	beq.n	1f00 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    1f58:	2902      	cmp	r1, #2
    1f5a:	d1b8      	bne.n	1ece <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    1f5c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1f60:	e7d0      	b.n	1f04 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    1f62:	2b04      	cmp	r3, #4
    1f64:	d109      	bne.n	1f7a <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    1f66:	1de3      	adds	r3, r4, #7
    1f68:	f023 0307 	bic.w	r3, r3, #7
    1f6c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1f70:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f74:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1f78:	e7a9      	b.n	1ece <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1f7a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1f7c:	bf04      	itt	eq
    1f7e:	f854 3b04 	ldreq.w	r3, [r4], #4
    1f82:	930a      	streq	r3, [sp, #40]	; 0x28
    1f84:	e7a3      	b.n	1ece <cbvprintf+0x43a>
		switch (conv->specifier) {
    1f86:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1f8a:	2878      	cmp	r0, #120	; 0x78
    1f8c:	d8ae      	bhi.n	1eec <cbvprintf+0x458>
    1f8e:	2862      	cmp	r0, #98	; 0x62
    1f90:	d822      	bhi.n	1fd8 <cbvprintf+0x544>
    1f92:	2825      	cmp	r0, #37	; 0x25
    1f94:	f43f ad8f 	beq.w	1ab6 <cbvprintf+0x22>
    1f98:	2858      	cmp	r0, #88	; 0x58
    1f9a:	d1a7      	bne.n	1eec <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1f9c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1fa0:	9300      	str	r3, [sp, #0]
    1fa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1fa6:	ab04      	add	r3, sp, #16
    1fa8:	aa0c      	add	r2, sp, #48	; 0x30
    1faa:	f007 fe0e 	bl	9bca <encode_uint>
    1fae:	4682      	mov	sl, r0
			if (precision >= 0) {
    1fb0:	f1b8 0f00 	cmp.w	r8, #0
    1fb4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1fb8:	db0c      	blt.n	1fd4 <cbvprintf+0x540>
				conv->flag_zero = false;
    1fba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1fbe:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1fc2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1fc6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1fc8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1fcc:	d902      	bls.n	1fd4 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    1fce:	eba8 0303 	sub.w	r3, r8, r3
    1fd2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1fd4:	4680      	mov	r8, r0
    1fd6:	e03d      	b.n	2054 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    1fd8:	3863      	subs	r0, #99	; 0x63
    1fda:	2815      	cmp	r0, #21
    1fdc:	d886      	bhi.n	1eec <cbvprintf+0x458>
    1fde:	a201      	add	r2, pc, #4	; (adr r2, 1fe4 <cbvprintf+0x550>)
    1fe0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1fe4:	00002065 	.word	0x00002065
    1fe8:	000020c9 	.word	0x000020c9
    1fec:	00001eed 	.word	0x00001eed
    1ff0:	00001eed 	.word	0x00001eed
    1ff4:	00001eed 	.word	0x00001eed
    1ff8:	00001eed 	.word	0x00001eed
    1ffc:	000020c9 	.word	0x000020c9
    2000:	00001eed 	.word	0x00001eed
    2004:	00001eed 	.word	0x00001eed
    2008:	00001eed 	.word	0x00001eed
    200c:	00001eed 	.word	0x00001eed
    2010:	00002123 	.word	0x00002123
    2014:	000020f1 	.word	0x000020f1
    2018:	000020f5 	.word	0x000020f5
    201c:	00001eed 	.word	0x00001eed
    2020:	00001eed 	.word	0x00001eed
    2024:	0000203d 	.word	0x0000203d
    2028:	00001eed 	.word	0x00001eed
    202c:	000020f1 	.word	0x000020f1
    2030:	00001eed 	.word	0x00001eed
    2034:	00001eed 	.word	0x00001eed
    2038:	000020f1 	.word	0x000020f1
			if (precision >= 0) {
    203c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    2040:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    2044:	db0a      	blt.n	205c <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    2046:	4641      	mov	r1, r8
    2048:	4650      	mov	r0, sl
    204a:	f008 fda9 	bl	aba0 <strnlen>
			bpe = bps + len;
    204e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    2052:	2600      	movs	r6, #0
		if (bps == NULL) {
    2054:	f1ba 0f00 	cmp.w	sl, #0
    2058:	d10c      	bne.n	2074 <cbvprintf+0x5e0>
    205a:	e747      	b.n	1eec <cbvprintf+0x458>
				len = strlen(bps);
    205c:	4650      	mov	r0, sl
    205e:	f008 fd98 	bl	ab92 <strlen>
    2062:	e7f4      	b.n	204e <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2066:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    206a:	2600      	movs	r6, #0
			bps = buf;
    206c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    2070:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    2074:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    2078:	b106      	cbz	r6, 207c <cbvprintf+0x5e8>
			nj_len += 1U;
    207a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    207c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2080:	06d0      	lsls	r0, r2, #27
    2082:	d568      	bpl.n	2156 <cbvprintf+0x6c2>
			nj_len += 2U;
    2084:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    2086:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    2088:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    208a:	bf48      	it	mi
    208c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    208e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    2090:	bf48      	it	mi
    2092:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    2094:	f1b9 0f00 	cmp.w	r9, #0
    2098:	dd76      	ble.n	2188 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    209a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    209e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    20a2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    20a6:	9303      	str	r3, [sp, #12]
    20a8:	0753      	lsls	r3, r2, #29
    20aa:	d46d      	bmi.n	2188 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    20ac:	0650      	lsls	r0, r2, #25
    20ae:	d561      	bpl.n	2174 <cbvprintf+0x6e0>
					if (sign != 0) {
    20b0:	b146      	cbz	r6, 20c4 <cbvprintf+0x630>
						OUTC(sign);
    20b2:	9b02      	ldr	r3, [sp, #8]
    20b4:	4659      	mov	r1, fp
    20b6:	4630      	mov	r0, r6
    20b8:	4798      	blx	r3
    20ba:	2800      	cmp	r0, #0
    20bc:	db57      	blt.n	216e <cbvprintf+0x6da>
						sign = 0;
    20be:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    20c0:	3501      	adds	r5, #1
						sign = 0;
    20c2:	461e      	mov	r6, r3
					pad = '0';
    20c4:	2330      	movs	r3, #48	; 0x30
    20c6:	e056      	b.n	2176 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    20c8:	071e      	lsls	r6, r3, #28
    20ca:	d40f      	bmi.n	20ec <cbvprintf+0x658>
				sign = ' ';
    20cc:	f013 0610 	ands.w	r6, r3, #16
    20d0:	bf18      	it	ne
    20d2:	2620      	movne	r6, #32
			sint = value->sint;
    20d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    20d8:	2b00      	cmp	r3, #0
    20da:	f6bf af5f 	bge.w	1f9c <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    20de:	4252      	negs	r2, r2
    20e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    20e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    20e8:	262d      	movs	r6, #45	; 0x2d
    20ea:	e757      	b.n	1f9c <cbvprintf+0x508>
				sign = '+';
    20ec:	262b      	movs	r6, #43	; 0x2b
    20ee:	e7f1      	b.n	20d4 <cbvprintf+0x640>
		switch (conv->specifier) {
    20f0:	2600      	movs	r6, #0
    20f2:	e753      	b.n	1f9c <cbvprintf+0x508>
			if (value->ptr != NULL) {
    20f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    20f6:	b340      	cbz	r0, 214a <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    20f8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    20fc:	9300      	str	r3, [sp, #0]
    20fe:	aa0c      	add	r2, sp, #48	; 0x30
    2100:	ab04      	add	r3, sp, #16
    2102:	2100      	movs	r1, #0
    2104:	f007 fd61 	bl	9bca <encode_uint>
				conv->altform_0c = true;
    2108:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    210c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2110:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2114:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2118:	4682      	mov	sl, r0
				conv->altform_0c = true;
    211a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    211e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    2120:	e746      	b.n	1fb0 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    2122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    2124:	2907      	cmp	r1, #7
    2126:	f63f aee1 	bhi.w	1eec <cbvprintf+0x458>
    212a:	e8df f001 	tbb	[pc, r1]
    212e:	040c      	.short	0x040c
    2130:	08080c06 	.word	0x08080c06
    2134:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    2136:	701d      	strb	r5, [r3, #0]
		break;
    2138:	e6d8      	b.n	1eec <cbvprintf+0x458>
		*(short *)dp = (short)count;
    213a:	801d      	strh	r5, [r3, #0]
		break;
    213c:	e6d6      	b.n	1eec <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    213e:	17ea      	asrs	r2, r5, #31
    2140:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    2144:	e6d2      	b.n	1eec <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2146:	601d      	str	r5, [r3, #0]
		break;
    2148:	e6d0      	b.n	1eec <cbvprintf+0x458>
			bps = "(nil)";
    214a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2214 <cbvprintf+0x780>
    214e:	4606      	mov	r6, r0
			bpe = bps + 5;
    2150:	f10a 0805 	add.w	r8, sl, #5
    2154:	e78e      	b.n	2074 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    2156:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    2158:	bf48      	it	mi
    215a:	3301      	addmi	r3, #1
    215c:	e793      	b.n	2086 <cbvprintf+0x5f2>
					OUTC(pad);
    215e:	4618      	mov	r0, r3
    2160:	9303      	str	r3, [sp, #12]
    2162:	4659      	mov	r1, fp
    2164:	9b02      	ldr	r3, [sp, #8]
    2166:	4798      	blx	r3
    2168:	2800      	cmp	r0, #0
    216a:	9b03      	ldr	r3, [sp, #12]
    216c:	da04      	bge.n	2178 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    216e:	b011      	add	sp, #68	; 0x44
    2170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2174:	2320      	movs	r3, #32
    2176:	444d      	add	r5, r9
    2178:	464a      	mov	r2, r9
				while (width-- > 0) {
    217a:	2a00      	cmp	r2, #0
    217c:	eba5 0109 	sub.w	r1, r5, r9
    2180:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2184:	dceb      	bgt.n	215e <cbvprintf+0x6ca>
    2186:	460d      	mov	r5, r1
		if (sign != 0) {
    2188:	b136      	cbz	r6, 2198 <cbvprintf+0x704>
			OUTC(sign);
    218a:	9b02      	ldr	r3, [sp, #8]
    218c:	4659      	mov	r1, fp
    218e:	4630      	mov	r0, r6
    2190:	4798      	blx	r3
    2192:	2800      	cmp	r0, #0
    2194:	dbeb      	blt.n	216e <cbvprintf+0x6da>
    2196:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2198:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    219c:	06d9      	lsls	r1, r3, #27
    219e:	d401      	bmi.n	21a4 <cbvprintf+0x710>
    21a0:	071a      	lsls	r2, r3, #28
    21a2:	d506      	bpl.n	21b2 <cbvprintf+0x71e>
				OUTC('0');
    21a4:	9b02      	ldr	r3, [sp, #8]
    21a6:	4659      	mov	r1, fp
    21a8:	2030      	movs	r0, #48	; 0x30
    21aa:	4798      	blx	r3
    21ac:	2800      	cmp	r0, #0
    21ae:	dbde      	blt.n	216e <cbvprintf+0x6da>
    21b0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    21b2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    21b6:	06db      	lsls	r3, r3, #27
    21b8:	d507      	bpl.n	21ca <cbvprintf+0x736>
				OUTC(conv->specifier);
    21ba:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    21be:	9b02      	ldr	r3, [sp, #8]
    21c0:	4659      	mov	r1, fp
    21c2:	4798      	blx	r3
    21c4:	2800      	cmp	r0, #0
    21c6:	dbd2      	blt.n	216e <cbvprintf+0x6da>
    21c8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    21ca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    21cc:	442e      	add	r6, r5
    21ce:	1b73      	subs	r3, r6, r5
    21d0:	2b00      	cmp	r3, #0
    21d2:	dc16      	bgt.n	2202 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    21d4:	9802      	ldr	r0, [sp, #8]
    21d6:	4643      	mov	r3, r8
    21d8:	4652      	mov	r2, sl
    21da:	4659      	mov	r1, fp
    21dc:	f007 fd3b 	bl	9c56 <outs>
    21e0:	2800      	cmp	r0, #0
    21e2:	dbc4      	blt.n	216e <cbvprintf+0x6da>
    21e4:	4405      	add	r5, r0
		while (width > 0) {
    21e6:	44a9      	add	r9, r5
    21e8:	eba9 0305 	sub.w	r3, r9, r5
    21ec:	2b00      	cmp	r3, #0
    21ee:	f77f ae7d 	ble.w	1eec <cbvprintf+0x458>
			OUTC(' ');
    21f2:	9b02      	ldr	r3, [sp, #8]
    21f4:	4659      	mov	r1, fp
    21f6:	2020      	movs	r0, #32
    21f8:	4798      	blx	r3
    21fa:	2800      	cmp	r0, #0
    21fc:	dbb7      	blt.n	216e <cbvprintf+0x6da>
    21fe:	3501      	adds	r5, #1
			--width;
    2200:	e7f2      	b.n	21e8 <cbvprintf+0x754>
				OUTC('0');
    2202:	9b02      	ldr	r3, [sp, #8]
    2204:	4659      	mov	r1, fp
    2206:	2030      	movs	r0, #48	; 0x30
    2208:	4798      	blx	r3
    220a:	2800      	cmp	r0, #0
    220c:	dbaf      	blt.n	216e <cbvprintf+0x6da>
    220e:	3501      	adds	r5, #1
    2210:	e7dd      	b.n	21ce <cbvprintf+0x73a>
    2212:	bf00      	nop
    2214:	0000c924 	.word	0x0000c924

00002218 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    2218:	b508      	push	{r3, lr}
    221a:	4604      	mov	r4, r0
    221c:	f04f 0220 	mov.w	r2, #32
    2220:	f3ef 8311 	mrs	r3, BASEPRI
    2224:	f382 8811 	msr	BASEPRI, r2
    2228:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    222c:	f008 fa18 	bl	a660 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    2230:	4620      	mov	r0, r4
    2232:	f002 fbad 	bl	4990 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2236:	4803      	ldr	r0, [pc, #12]	; (2244 <sys_reboot+0x2c>)
    2238:	f007 fbf8 	bl	9a2c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    223c:	f001 ff96 	bl	416c <arch_cpu_idle>
    2240:	e7fc      	b.n	223c <sys_reboot+0x24>
    2242:	bf00      	nop
    2244:	0000c92a 	.word	0x0000c92a

00002248 <log_core_init>:
	return IS_ENABLED(CONFIG_LOG_TIMESTAMP_64BIT) ?
		k_uptime_get() : k_uptime_get_32();
}

void log_core_init(void)
{
    2248:	b510      	push	{r4, lr}
	uint32_t freq;

	panic_mode = false;
    224a:	4b0b      	ldr	r3, [pc, #44]	; (2278 <log_core_init+0x30>)
    224c:	2200      	movs	r2, #0
    224e:	701a      	strb	r2, [r3, #0]
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = default_lf_get_timestamp;
		freq = 1000U;
	} else {
		timestamp_func = default_get_timestamp;
    2250:	4b0a      	ldr	r3, [pc, #40]	; (227c <log_core_init+0x34>)
    2252:	4a0b      	ldr	r2, [pc, #44]	; (2280 <log_core_init+0x38>)
    2254:	601a      	str	r2, [r3, #0]
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    2256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    225a:	f000 fc8f 	bl	2b7c <log_output_timestamp_freq_set>
			sys_clock_hw_cycles_per_sec());
		if (IS_ENABLED(CONFIG_LOG2_MODE_DEFERRED)) {
			z_log_msg2_init();
		}
	} else if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED)) {
		log_msg_pool_init();
    225e:	f000 fa41 	bl	26e4 <log_msg_pool_init>
		log_list_init(&list);
    2262:	4808      	ldr	r0, [pc, #32]	; (2284 <log_core_init+0x3c>)
    2264:	f007 fd0e 	bl	9c84 <log_list_init>
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    2268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    226c:	4906      	ldr	r1, [pc, #24]	; (2288 <log_core_init+0x40>)
    226e:	4807      	ldr	r0, [pc, #28]	; (228c <log_core_init+0x44>)
    2270:	2304      	movs	r3, #4
    2272:	2228      	movs	r2, #40	; 0x28
    2274:	f009 bb16 	b.w	b8a4 <k_mem_slab_init>
    2278:	20002ae0 	.word	0x20002ae0
    227c:	2000000c 	.word	0x2000000c
    2280:	00009cc3 	.word	0x00009cc3
    2284:	20001d2c 	.word	0x20001d2c
    2288:	200069b0 	.word	0x200069b0
    228c:	20001d34 	.word	0x20001d34

00002290 <get_msg>:
		}
	}
}

union log_msgs get_msg(void)
{
    2290:	b510      	push	{r4, lr}
    2292:	f04f 0320 	mov.w	r3, #32
    2296:	f3ef 8411 	mrs	r4, BASEPRI
    229a:	f383 8811 	msr	BASEPRI, r3
    229e:	f3bf 8f6f 	isb	sy
		return msg;
	}

	int key = irq_lock();

	msg.msg = log_list_head_get(&list);
    22a2:	4804      	ldr	r0, [pc, #16]	; (22b4 <get_msg+0x24>)
    22a4:	f007 fcfe 	bl	9ca4 <log_list_head_get>
	__asm__ volatile(
    22a8:	f384 8811 	msr	BASEPRI, r4
    22ac:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return msg;
}
    22b0:	bd10      	pop	{r4, pc}
    22b2:	bf00      	nop
    22b4:	20001d2c 	.word	0x20001d2c

000022b8 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    22b8:	4b06      	ldr	r3, [pc, #24]	; (22d4 <z_log_dropped+0x1c>)
    22ba:	f3bf 8f5b 	dmb	ish
    22be:	e853 2f00 	ldrex	r2, [r3]
    22c2:	3201      	adds	r2, #1
    22c4:	e843 2100 	strex	r1, r2, [r3]
    22c8:	2900      	cmp	r1, #0
    22ca:	d1f8      	bne.n	22be <z_log_dropped+0x6>
    22cc:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(void)
{
	atomic_inc(&dropped_cnt);
}
    22d0:	4770      	bx	lr
    22d2:	bf00      	nop
    22d4:	20001d24 	.word	0x20001d24

000022d8 <z_log_dropped_read_and_clear>:

uint32_t z_log_dropped_read_and_clear(void)
{
	return atomic_set(&dropped_cnt, 0);
}
    22d8:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    22da:	4b06      	ldr	r3, [pc, #24]	; (22f4 <z_log_dropped_read_and_clear+0x1c>)
    22dc:	f3bf 8f5b 	dmb	ish
    22e0:	4602      	mov	r2, r0
    22e2:	e853 0f00 	ldrex	r0, [r3]
    22e6:	e843 2100 	strex	r1, r2, [r3]
    22ea:	2900      	cmp	r1, #0
    22ec:	d1f9      	bne.n	22e2 <z_log_dropped_read_and_clear+0xa>
    22ee:	f3bf 8f5b 	dmb	ish
    22f2:	4770      	bx	lr
    22f4:	20001d24 	.word	0x20001d24

000022f8 <dropped_notify>:
{
    22f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    22fa:	f7ff ffed 	bl	22d8 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    22fe:	4c0a      	ldr	r4, [pc, #40]	; (2328 <dropped_notify+0x30>)
    2300:	4d0a      	ldr	r5, [pc, #40]	; (232c <dropped_notify+0x34>)
    2302:	1b2d      	subs	r5, r5, r4
    2304:	4607      	mov	r7, r0
    2306:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2308:	2600      	movs	r6, #0
    230a:	42ae      	cmp	r6, r5
    230c:	db00      	blt.n	2310 <dropped_notify+0x18>
}
    230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2310:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2312:	795b      	ldrb	r3, [r3, #5]
    2314:	b12b      	cbz	r3, 2322 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    2316:	6823      	ldr	r3, [r4, #0]
    2318:	691b      	ldr	r3, [r3, #16]
    231a:	b113      	cbz	r3, 2322 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    231c:	4639      	mov	r1, r7
    231e:	4620      	mov	r0, r4
    2320:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2322:	3601      	adds	r6, #1
    2324:	3410      	adds	r4, #16
    2326:	e7f0      	b.n	230a <dropped_notify+0x12>
    2328:	0000bf4c 	.word	0x0000bf4c
    232c:	0000bf5c 	.word	0x0000bf5c

00002330 <log_source_name_get>:
    2330:	4a04      	ldr	r2, [pc, #16]	; (2344 <log_source_name_get+0x14>)
    2332:	4b05      	ldr	r3, [pc, #20]	; (2348 <log_source_name_get+0x18>)
    2334:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2336:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    233a:	bf34      	ite	cc
    233c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    2340:	2000      	movcs	r0, #0
}
    2342:	4770      	bx	lr
    2344:	0000bee4 	.word	0x0000bee4
    2348:	0000bf4c 	.word	0x0000bf4c

0000234c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    234c:	4a05      	ldr	r2, [pc, #20]	; (2364 <log_backend_enable+0x18>)
	backend->cb->id = id;
    234e:	6843      	ldr	r3, [r0, #4]
    2350:	1a80      	subs	r0, r0, r2
    2352:	1100      	asrs	r0, r0, #4
	backend->cb->active = true;
    2354:	2201      	movs	r2, #1
    2356:	3001      	adds	r0, #1
	backend->cb->ctx = ctx;
    2358:	6019      	str	r1, [r3, #0]

	log_backend_id_set(backend, id);
    235a:	7118      	strb	r0, [r3, #4]
	backend->cb->active = true;
    235c:	715a      	strb	r2, [r3, #5]
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    235e:	4b02      	ldr	r3, [pc, #8]	; (2368 <log_backend_enable+0x1c>)
    2360:	701a      	strb	r2, [r3, #0]
}
    2362:	4770      	bx	lr
    2364:	0000bf4c 	.word	0x0000bf4c
    2368:	20002adf 	.word	0x20002adf

0000236c <log_init>:
{
    236c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    236e:	4b12      	ldr	r3, [pc, #72]	; (23b8 <log_init+0x4c>)
    2370:	f3bf 8f5b 	dmb	ish
    2374:	e853 5f00 	ldrex	r5, [r3]
    2378:	1c6a      	adds	r2, r5, #1
    237a:	e843 2100 	strex	r1, r2, [r3]
    237e:	2900      	cmp	r1, #0
    2380:	d1f8      	bne.n	2374 <log_init+0x8>
    2382:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2386:	b92d      	cbnz	r5, 2394 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    2388:	4c0c      	ldr	r4, [pc, #48]	; (23bc <log_init+0x50>)
    238a:	4e0d      	ldr	r6, [pc, #52]	; (23c0 <log_init+0x54>)
    238c:	1b36      	subs	r6, r6, r4
    238e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    2390:	42b5      	cmp	r5, r6
    2392:	db00      	blt.n	2396 <log_init+0x2a>
}
    2394:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2396:	7b23      	ldrb	r3, [r4, #12]
    2398:	b153      	cbz	r3, 23b0 <log_init+0x44>
			if (backend->api->init != NULL) {
    239a:	6823      	ldr	r3, [r4, #0]
    239c:	699b      	ldr	r3, [r3, #24]
    239e:	b10b      	cbz	r3, 23a4 <log_init+0x38>
				backend->api->init(backend);
    23a0:	4620      	mov	r0, r4
    23a2:	4798      	blx	r3
			log_backend_enable(backend,
    23a4:	6863      	ldr	r3, [r4, #4]
    23a6:	2204      	movs	r2, #4
    23a8:	6819      	ldr	r1, [r3, #0]
    23aa:	4620      	mov	r0, r4
    23ac:	f7ff ffce 	bl	234c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    23b0:	3501      	adds	r5, #1
    23b2:	3410      	adds	r4, #16
    23b4:	e7ec      	b.n	2390 <log_init+0x24>
    23b6:	bf00      	nop
    23b8:	20001d28 	.word	0x20001d28
    23bc:	0000bf4c 	.word	0x0000bf4c
    23c0:	0000bf5c 	.word	0x0000bf5c

000023c4 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    23c4:	4b16      	ldr	r3, [pc, #88]	; (2420 <z_log_strdup+0x5c>)
    23c6:	4298      	cmp	r0, r3

	return log_compiled_level_get(source_id);
}

char *z_log_strdup(const char *str)
{
    23c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    23ca:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    23cc:	d302      	bcc.n	23d4 <z_log_strdup+0x10>
	struct log_strdup_buf *dup;
	int err;

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    23ce:	4b15      	ldr	r3, [pc, #84]	; (2424 <z_log_strdup+0x60>)
    23d0:	4298      	cmp	r0, r3
    23d2:	d320      	bcc.n	2416 <z_log_strdup+0x52>
	    is_rodata(str) || k_is_user_context()) {
		return (char *)str;
	}

	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    23d4:	4814      	ldr	r0, [pc, #80]	; (2428 <z_log_strdup+0x64>)
    23d6:	2200      	movs	r2, #0
    23d8:	2300      	movs	r3, #0
    23da:	a901      	add	r1, sp, #4
    23dc:	f005 fece 	bl	817c <k_mem_slab_alloc>
	if (err != 0) {
    23e0:	4605      	mov	r5, r0
    23e2:	b9d8      	cbnz	r0, 241c <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    23e4:	2201      	movs	r2, #1
    23e6:	9b01      	ldr	r3, [sp, #4]
    23e8:	f3bf 8f5b 	dmb	ish
    23ec:	e853 1f00 	ldrex	r1, [r3]
    23f0:	e843 2000 	strex	r0, r2, [r3]
    23f4:	2800      	cmp	r0, #0
    23f6:	d1f9      	bne.n	23ec <z_log_strdup+0x28>
    23f8:	f3bf 8f5b 	dmb	ish
	}

	/* Set 'allocated' flag. */
	(void)atomic_set(&dup->refcount, 1);

	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    23fc:	9801      	ldr	r0, [sp, #4]
    23fe:	4621      	mov	r1, r4
    2400:	221f      	movs	r2, #31
    2402:	3004      	adds	r0, #4
    2404:	f008 fbb3 	bl	ab6e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2408:	9c01      	ldr	r4, [sp, #4]
    240a:	237e      	movs	r3, #126	; 0x7e
    240c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    2410:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24

	return dup->buf;
    2414:	3404      	adds	r4, #4
}
    2416:	4620      	mov	r0, r4
    2418:	b003      	add	sp, #12
    241a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    241c:	4c03      	ldr	r4, [pc, #12]	; (242c <z_log_strdup+0x68>)
    241e:	e7fa      	b.n	2416 <z_log_strdup+0x52>
    2420:	0000bbec 	.word	0x0000bbec
    2424:	0000d914 	.word	0x0000d914
    2428:	20001d34 	.word	0x20001d34
    242c:	0000c953 	.word	0x0000c953

00002430 <log_is_strdup>:
			log_strdup_longest : 0;
}

bool log_is_strdup(const void *buf)
{
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2430:	b148      	cbz	r0, 2446 <log_is_strdup+0x16>
    2432:	4b05      	ldr	r3, [pc, #20]	; (2448 <log_is_strdup+0x18>)
    2434:	4298      	cmp	r0, r3
    2436:	d305      	bcc.n	2444 <log_is_strdup+0x14>
    2438:	33a0      	adds	r3, #160	; 0xa0
    243a:	4298      	cmp	r0, r3
    243c:	bf2c      	ite	cs
    243e:	2000      	movcs	r0, #0
    2440:	2001      	movcc	r0, #1
    2442:	4770      	bx	lr
    2444:	2000      	movs	r0, #0

}
    2446:	4770      	bx	lr
    2448:	200069b0 	.word	0x200069b0

0000244c <z_impl_log_process>:
{
    244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    2450:	4b47      	ldr	r3, [pc, #284]	; (2570 <z_impl_log_process+0x124>)
    2452:	781b      	ldrb	r3, [r3, #0]
{
    2454:	b085      	sub	sp, #20
    2456:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    2458:	b903      	cbnz	r3, 245c <z_impl_log_process+0x10>
    245a:	b300      	cbz	r0, 249e <z_impl_log_process+0x52>
	msg = get_msg();
    245c:	f7ff ff18 	bl	2290 <get_msg>
	if (msg.msg) {
    2460:	4605      	mov	r5, r0
    2462:	b178      	cbz	r0, 2484 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2464:	f3bf 8f5b 	dmb	ish
    2468:	4b42      	ldr	r3, [pc, #264]	; (2574 <z_impl_log_process+0x128>)
    246a:	e853 2f00 	ldrex	r2, [r3]
    246e:	3a01      	subs	r2, #1
    2470:	e843 2100 	strex	r1, r2, [r3]
    2474:	2900      	cmp	r1, #0
    2476:	d1f8      	bne.n	246a <z_impl_log_process+0x1e>
    2478:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    247c:	b19c      	cbz	r4, 24a6 <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
    247e:	4628      	mov	r0, r5
    2480:	f007 fd46 	bl	9f10 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    2484:	b92c      	cbnz	r4, 2492 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
    2486:	4b3c      	ldr	r3, [pc, #240]	; (2578 <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
    2488:	681b      	ldr	r3, [r3, #0]
    248a:	2b00      	cmp	r3, #0
    248c:	dd01      	ble.n	2492 <z_impl_log_process+0x46>
		dropped_notify();
    248e:	f7ff ff33 	bl	22f8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    2492:	483a      	ldr	r0, [pc, #232]	; (257c <z_impl_log_process+0x130>)
    2494:	f007 fc04 	bl	9ca0 <log_list_head_peek>
    2498:	1e04      	subs	r4, r0, #0
    249a:	bf18      	it	ne
    249c:	2401      	movne	r4, #1
}
    249e:	4620      	mov	r0, r4
    24a0:	b005      	add	sp, #20
    24a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    24a6:	4b36      	ldr	r3, [pc, #216]	; (2580 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    24a8:	781b      	ldrb	r3, [r3, #0]
    24aa:	b9e3      	cbnz	r3, 24e6 <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    24ac:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    24ae:	07db      	lsls	r3, r3, #31
    24b0:	d419      	bmi.n	24e6 <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
    24b2:	f007 fd40 	bl	9f36 <log_msg_str_get>
    24b6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    24b8:	4628      	mov	r0, r5
    24ba:	f007 fd07 	bl	9ecc <log_msg_nargs_get>
    24be:	4601      	mov	r1, r0
    24c0:	4638      	mov	r0, r7
    24c2:	f007 fc02 	bl	9cca <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    24c6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2584 <z_impl_log_process+0x138>
    24ca:	4b2f      	ldr	r3, [pc, #188]	; (2588 <z_impl_log_process+0x13c>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    24cc:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 258c <z_impl_log_process+0x140>
    24d0:	eba3 0308 	sub.w	r3, r3, r8
    24d4:	08db      	lsrs	r3, r3, #3
    24d6:	9303      	str	r3, [sp, #12]
    24d8:	4b2d      	ldr	r3, [pc, #180]	; (2590 <z_impl_log_process+0x144>)
    24da:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    24de:	4606      	mov	r6, r0
    24e0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    24e4:	b936      	cbnz	r6, 24f4 <z_impl_log_process+0xa8>
    24e6:	4e2b      	ldr	r6, [pc, #172]	; (2594 <z_impl_log_process+0x148>)
    24e8:	4f2b      	ldr	r7, [pc, #172]	; (2598 <z_impl_log_process+0x14c>)
    24ea:	1bbf      	subs	r7, r7, r6
    24ec:	113f      	asrs	r7, r7, #4
    24ee:	f04f 0800 	mov.w	r8, #0
    24f2:	e03a      	b.n	256a <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
    24f4:	fab6 f186 	clz	r1, r6
    24f8:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    24fc:	4649      	mov	r1, r9
    24fe:	4628      	mov	r0, r5
    2500:	f007 fce7 	bl	9ed2 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    2504:	4b25      	ldr	r3, [pc, #148]	; (259c <z_impl_log_process+0x150>)
    2506:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    2508:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    250a:	d302      	bcc.n	2512 <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    250c:	4a24      	ldr	r2, [pc, #144]	; (25a0 <z_impl_log_process+0x154>)
    250e:	4290      	cmp	r0, r2
    2510:	d31a      	bcc.n	2548 <z_impl_log_process+0xfc>
    2512:	4608      	mov	r0, r1
    2514:	f7ff ff8c 	bl	2430 <log_is_strdup>
    2518:	4602      	mov	r2, r0
    251a:	b9a8      	cbnz	r0, 2548 <z_impl_log_process+0xfc>
    251c:	4b21      	ldr	r3, [pc, #132]	; (25a4 <z_impl_log_process+0x158>)
    251e:	4299      	cmp	r1, r3
    2520:	d012      	beq.n	2548 <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
    2522:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2524:	9903      	ldr	r1, [sp, #12]
    2526:	f3c3 1389 	ubfx	r3, r3, #6, #10
    252a:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    252c:	bf38      	it	cc
    252e:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2532:	ea4f 138a 	mov.w	r3, sl, lsl #6
    2536:	f043 0301 	orr.w	r3, r3, #1
    253a:	f8ad 3000 	strh.w	r3, [sp]
    253e:	4649      	mov	r1, r9
    2540:	463b      	mov	r3, r7
    2542:	4658      	mov	r0, fp
    2544:	f007 fc20 	bl	9d88 <log_3>
		mask &= ~BIT(idx);
    2548:	2301      	movs	r3, #1
    254a:	fa03 f109 	lsl.w	r1, r3, r9
    254e:	ea26 0601 	bic.w	r6, r6, r1
    2552:	e7c7      	b.n	24e4 <z_impl_log_process+0x98>
	return backend->cb->active;
    2554:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    2556:	795b      	ldrb	r3, [r3, #5]
    2558:	b123      	cbz	r3, 2564 <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
    255a:	6833      	ldr	r3, [r6, #0]
    255c:	4629      	mov	r1, r5
    255e:	685b      	ldr	r3, [r3, #4]
    2560:	4630      	mov	r0, r6
    2562:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2564:	f108 0801 	add.w	r8, r8, #1
    2568:	3610      	adds	r6, #16
    256a:	45b8      	cmp	r8, r7
    256c:	dbf2      	blt.n	2554 <z_impl_log_process+0x108>
    256e:	e786      	b.n	247e <z_impl_log_process+0x32>
    2570:	20002adf 	.word	0x20002adf
    2574:	20001d20 	.word	0x20001d20
    2578:	20001d24 	.word	0x20001d24
    257c:	20001d2c 	.word	0x20001d2c
    2580:	20002ae0 	.word	0x20002ae0
    2584:	0000bee4 	.word	0x0000bee4
    2588:	0000bf4c 	.word	0x0000bf4c
    258c:	0000c96d 	.word	0x0000c96d
    2590:	0000befc 	.word	0x0000befc
    2594:	0000bf4c 	.word	0x0000bf4c
    2598:	0000bf5c 	.word	0x0000bf5c
    259c:	0000bbec 	.word	0x0000bbec
    25a0:	0000d914 	.word	0x0000d914
    25a4:	0000c953 	.word	0x0000c953

000025a8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    25a8:	4b28      	ldr	r3, [pc, #160]	; (264c <msg_finalize+0xa4>)
{
    25aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    25ac:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    25ae:	8141      	strh	r1, [r0, #10]
{
    25b0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    25b2:	4798      	blx	r3
    25b4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    25b6:	f04f 0320 	mov.w	r3, #32
    25ba:	f3ef 8511 	mrs	r5, BASEPRI
    25be:	f383 8811 	msr	BASEPRI, r3
    25c2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    25c6:	4822      	ldr	r0, [pc, #136]	; (2650 <msg_finalize+0xa8>)
    25c8:	4621      	mov	r1, r4
    25ca:	f007 fb5f 	bl	9c8c <log_list_add_tail>
	__asm__ volatile(
    25ce:	f385 8811 	msr	BASEPRI, r5
    25d2:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    25d6:	f3bf 8f5b 	dmb	ish
    25da:	4b1e      	ldr	r3, [pc, #120]	; (2654 <msg_finalize+0xac>)
    25dc:	e853 2f00 	ldrex	r2, [r3]
    25e0:	3201      	adds	r2, #1
    25e2:	e843 2100 	strex	r1, r2, [r3]
    25e6:	2900      	cmp	r1, #0
    25e8:	d1f8      	bne.n	25dc <msg_finalize+0x34>
    25ea:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    25ee:	4a1a      	ldr	r2, [pc, #104]	; (2658 <msg_finalize+0xb0>)
    25f0:	7812      	ldrb	r2, [r2, #0]
    25f2:	b182      	cbz	r2, 2616 <msg_finalize+0x6e>
	__asm__ volatile(
    25f4:	f04f 0320 	mov.w	r3, #32
    25f8:	f3ef 8411 	mrs	r4, BASEPRI
    25fc:	f383 8811 	msr	BASEPRI, r3
    2600:	f3bf 8f6f 	isb	sy
    2604:	2000      	movs	r0, #0
    2606:	f7ff ff21 	bl	244c <z_impl_log_process>
	__asm__ volatile(
    260a:	f384 8811 	msr	BASEPRI, r4
    260e:	f3bf 8f6f 	isb	sy
}
    2612:	b003      	add	sp, #12
    2614:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2616:	4a11      	ldr	r2, [pc, #68]	; (265c <msg_finalize+0xb4>)
    2618:	681b      	ldr	r3, [r3, #0]
    261a:	6812      	ldr	r2, [r2, #0]
    261c:	2a00      	cmp	r2, #0
    261e:	d0f8      	beq.n	2612 <msg_finalize+0x6a>
    2620:	2b01      	cmp	r3, #1
    2622:	d107      	bne.n	2634 <msg_finalize+0x8c>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    2624:	2200      	movs	r2, #0
    2626:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
    2628:	480d      	ldr	r0, [pc, #52]	; (2660 <msg_finalize+0xb8>)
    262a:	e9cd 2300 	strd	r2, r3, [sp]
    262e:	f006 fc69 	bl	8f04 <z_impl_k_timer_start>
    2632:	e7ee      	b.n	2612 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2634:	2b0a      	cmp	r3, #10
    2636:	d1ec      	bne.n	2612 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    2638:	4809      	ldr	r0, [pc, #36]	; (2660 <msg_finalize+0xb8>)
    263a:	f009 fab3 	bl	bba4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    263e:	4809      	ldr	r0, [pc, #36]	; (2664 <msg_finalize+0xbc>)
}
    2640:	b003      	add	sp, #12
    2642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2646:	f005 bf4f 	b.w	84e8 <z_impl_k_sem_give>
    264a:	bf00      	nop
    264c:	2000000c 	.word	0x2000000c
    2650:	20001d2c 	.word	0x20001d2c
    2654:	20001d20 	.word	0x20001d20
    2658:	20002ae0 	.word	0x20002ae0
    265c:	20001d50 	.word	0x20001d50
    2660:	200002a0 	.word	0x200002a0
    2664:	20000210 	.word	0x20000210

00002668 <z_impl_log_panic>:
{
    2668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    266a:	4f0e      	ldr	r7, [pc, #56]	; (26a4 <z_impl_log_panic+0x3c>)
    266c:	783d      	ldrb	r5, [r7, #0]
    266e:	b975      	cbnz	r5, 268e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    2670:	4c0d      	ldr	r4, [pc, #52]	; (26a8 <z_impl_log_panic+0x40>)
    2672:	4e0e      	ldr	r6, [pc, #56]	; (26ac <z_impl_log_panic+0x44>)
	log_init();
    2674:	f7ff fe7a 	bl	236c <log_init>
    2678:	1b36      	subs	r6, r6, r4
    267a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    267c:	42b5      	cmp	r5, r6
    267e:	db07      	blt.n	2690 <z_impl_log_panic+0x28>
    2680:	2000      	movs	r0, #0
    2682:	f7ff fee3 	bl	244c <z_impl_log_process>
		while (log_process(false) == true) {
    2686:	2800      	cmp	r0, #0
    2688:	d1fa      	bne.n	2680 <z_impl_log_panic+0x18>
	panic_mode = true;
    268a:	2301      	movs	r3, #1
    268c:	703b      	strb	r3, [r7, #0]
}
    268e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2690:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2692:	795b      	ldrb	r3, [r3, #5]
    2694:	b11b      	cbz	r3, 269e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    2696:	6823      	ldr	r3, [r4, #0]
    2698:	4620      	mov	r0, r4
    269a:	695b      	ldr	r3, [r3, #20]
    269c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    269e:	3501      	adds	r5, #1
    26a0:	3410      	adds	r4, #16
    26a2:	e7eb      	b.n	267c <z_impl_log_panic+0x14>
    26a4:	20002ae0 	.word	0x20002ae0
    26a8:	0000bf4c 	.word	0x0000bf4c
    26ac:	0000bf5c 	.word	0x0000bf5c

000026b0 <log_free>:

void log_free(void *str)
{
    26b0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    26b2:	3804      	subs	r0, #4
    26b4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    26b6:	f3bf 8f5b 	dmb	ish
    26ba:	e850 3f00 	ldrex	r3, [r0]
    26be:	1e5a      	subs	r2, r3, #1
    26c0:	e840 2100 	strex	r1, r2, [r0]
    26c4:	2900      	cmp	r1, #0
    26c6:	d1f8      	bne.n	26ba <log_free+0xa>
    26c8:	f3bf 8f5b 	dmb	ish
						  buf);

	if (atomic_dec(&dup->refcount) == 1) {
    26cc:	2b01      	cmp	r3, #1
    26ce:	d103      	bne.n	26d8 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    26d0:	4803      	ldr	r0, [pc, #12]	; (26e0 <log_free+0x30>)
    26d2:	a901      	add	r1, sp, #4
    26d4:	f009 f901 	bl	b8da <k_mem_slab_free>
		if (IS_ENABLED(CONFIG_LOG_STRDUP_POOL_PROFILING)) {
			atomic_dec((atomic_t *)&log_strdup_in_use);
		}
	}
}
    26d8:	b003      	add	sp, #12
    26da:	f85d fb04 	ldr.w	pc, [sp], #4
    26de:	bf00      	nop
    26e0:	20001d34 	.word	0x20001d34

000026e4 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    26e4:	2320      	movs	r3, #32
    26e6:	4902      	ldr	r1, [pc, #8]	; (26f0 <log_msg_pool_init+0xc>)
    26e8:	4802      	ldr	r0, [pc, #8]	; (26f4 <log_msg_pool_init+0x10>)
    26ea:	461a      	mov	r2, r3
    26ec:	f009 b8da 	b.w	b8a4 <k_mem_slab_init>
    26f0:	20006a50 	.word	0x20006a50
    26f4:	20001d54 	.word	0x20001d54

000026f8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    26f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    26fa:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    26fc:	4d09      	ldr	r5, [pc, #36]	; (2724 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    26fe:	9301      	str	r3, [sp, #4]
    2700:	2001      	movs	r0, #1
    2702:	f7ff fea3 	bl	244c <z_impl_log_process>
    2706:	4604      	mov	r4, r0
			z_log_dropped();
    2708:	f7ff fdd6 	bl	22b8 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    270c:	2200      	movs	r2, #0
    270e:	2300      	movs	r3, #0
    2710:	a901      	add	r1, sp, #4
    2712:	4628      	mov	r0, r5
    2714:	f005 fd32 	bl	817c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2718:	b108      	cbz	r0, 271e <log_msg_no_space_handle+0x26>
    271a:	2c00      	cmp	r4, #0
    271c:	d1f0      	bne.n	2700 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    271e:	9801      	ldr	r0, [sp, #4]
    2720:	b003      	add	sp, #12
    2722:	bd30      	pop	{r4, r5, pc}
    2724:	20001d54 	.word	0x20001d54

00002728 <log_msg_chunk_alloc>:
{
    2728:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    272a:	2300      	movs	r3, #0
    272c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    272e:	4807      	ldr	r0, [pc, #28]	; (274c <log_msg_chunk_alloc+0x24>)
    2730:	2200      	movs	r2, #0
    2732:	2300      	movs	r3, #0
    2734:	a901      	add	r1, sp, #4
    2736:	f005 fd21 	bl	817c <k_mem_slab_alloc>
	if (err != 0) {
    273a:	b110      	cbz	r0, 2742 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    273c:	f7ff ffdc 	bl	26f8 <log_msg_no_space_handle>
    2740:	9001      	str	r0, [sp, #4]
}
    2742:	9801      	ldr	r0, [sp, #4]
    2744:	b003      	add	sp, #12
    2746:	f85d fb04 	ldr.w	pc, [sp], #4
    274a:	bf00      	nop
    274c:	20001d54 	.word	0x20001d54

00002750 <msg_free>:
{
    2750:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2752:	7a03      	ldrb	r3, [r0, #8]
    2754:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    2756:	07dc      	lsls	r4, r3, #31
{
    2758:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    275a:	d41e      	bmi.n	279a <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    275c:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    275e:	092d      	lsrs	r5, r5, #4
    2760:	d01b      	beq.n	279a <msg_free+0x4a>
		uint32_t smask = 0U;
    2762:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    2764:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    2766:	9801      	ldr	r0, [sp, #4]
    2768:	4631      	mov	r1, r6
    276a:	f007 fbb2 	bl	9ed2 <log_msg_arg_get>
    276e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    2770:	f7ff fe5e 	bl	2430 <log_is_strdup>
    2774:	b170      	cbz	r0, 2794 <msg_free+0x44>
				if (smask == 0U) {
    2776:	b934      	cbnz	r4, 2786 <msg_free+0x36>
					smask = z_log_get_s_mask(
    2778:	9b01      	ldr	r3, [sp, #4]
    277a:	4629      	mov	r1, r5
    277c:	6918      	ldr	r0, [r3, #16]
    277e:	f007 faa4 	bl	9cca <z_log_get_s_mask>
					if (smask == 0U) {
    2782:	4604      	mov	r4, r0
    2784:	b148      	cbz	r0, 279a <msg_free+0x4a>
				if (smask & BIT(i)) {
    2786:	fa24 f306 	lsr.w	r3, r4, r6
    278a:	07d9      	lsls	r1, r3, #31
    278c:	d502      	bpl.n	2794 <msg_free+0x44>
					log_free(buf);
    278e:	4638      	mov	r0, r7
    2790:	f7ff ff8e 	bl	26b0 <log_free>
		for (i = 0U; i < nargs; i++) {
    2794:	3601      	adds	r6, #1
    2796:	42ae      	cmp	r6, r5
    2798:	d3e5      	bcc.n	2766 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    279a:	9b01      	ldr	r3, [sp, #4]
    279c:	7a1a      	ldrb	r2, [r3, #8]
    279e:	0792      	lsls	r2, r2, #30
    27a0:	d504      	bpl.n	27ac <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    27a2:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    27a4:	4c08      	ldr	r4, [pc, #32]	; (27c8 <msg_free+0x78>)
    27a6:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    27a8:	9b03      	ldr	r3, [sp, #12]
    27aa:	b92b      	cbnz	r3, 27b8 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    27ac:	4806      	ldr	r0, [pc, #24]	; (27c8 <msg_free+0x78>)
    27ae:	a901      	add	r1, sp, #4
    27b0:	f009 f893 	bl	b8da <k_mem_slab_free>
}
    27b4:	b005      	add	sp, #20
    27b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    27b8:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    27ba:	a903      	add	r1, sp, #12
    27bc:	4620      	mov	r0, r4
    27be:	f009 f88c 	bl	b8da <k_mem_slab_free>
		cont = next;
    27c2:	9503      	str	r5, [sp, #12]
    27c4:	e7f0      	b.n	27a8 <msg_free+0x58>
    27c6:	bf00      	nop
    27c8:	20001d54 	.word	0x20001d54

000027cc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    27cc:	b40e      	push	{r1, r2, r3}
    27ce:	b503      	push	{r0, r1, lr}
    27d0:	ab03      	add	r3, sp, #12
    27d2:	4601      	mov	r1, r0
    27d4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    27d8:	4804      	ldr	r0, [pc, #16]	; (27ec <print_formatted+0x20>)
	va_start(args, fmt);
    27da:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    27dc:	f7ff f95a 	bl	1a94 <cbvprintf>
	va_end(args);

	return length;
}
    27e0:	b002      	add	sp, #8
    27e2:	f85d eb04 	ldr.w	lr, [sp], #4
    27e6:	b003      	add	sp, #12
    27e8:	4770      	bx	lr
    27ea:	bf00      	nop
    27ec:	0000a397 	.word	0x0000a397

000027f0 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    27f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    27f4:	461d      	mov	r5, r3
    27f6:	9b08      	ldr	r3, [sp, #32]
    27f8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    27fa:	06da      	lsls	r2, r3, #27
{
    27fc:	4604      	mov	r4, r0
    27fe:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2800:	d405      	bmi.n	280e <CONFIG_MAIN_STACK_SIZE+0xe>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2802:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2804:	bf4c      	ite	mi
    2806:	492a      	ldrmi	r1, [pc, #168]	; (28b0 <CONFIG_MAIN_STACK_SIZE+0xb0>)
		print_formatted(ctx, "\r\n");
    2808:	492a      	ldrpl	r1, [pc, #168]	; (28b4 <CONFIG_MAIN_STACK_SIZE+0xb4>)
    280a:	f7ff ffdf 	bl	27cc <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    280e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 28b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
{
    2812:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2816:	45a8      	cmp	r8, r5
    2818:	db2a      	blt.n	2870 <CONFIG_MAIN_STACK_SIZE+0x70>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    281a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 28bc <CONFIG_MAIN_STACK_SIZE+0xbc>
			print_formatted(output, "%02x ", data[i]);
    281e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 28c0 <CONFIG_MAIN_STACK_SIZE+0xc0>
			print_formatted(output, " ");
    2822:	f8df a094 	ldr.w	sl, [pc, #148]	; 28b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2826:	2500      	movs	r5, #0
		if (i < length) {
    2828:	42bd      	cmp	r5, r7
    282a:	d22f      	bcs.n	288c <CONFIG_MAIN_STACK_SIZE+0x8c>
			print_formatted(output, "%02x ", data[i]);
    282c:	5d72      	ldrb	r2, [r6, r5]
    282e:	4649      	mov	r1, r9
    2830:	4620      	mov	r0, r4
    2832:	f7ff ffcb 	bl	27cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2836:	3501      	adds	r5, #1
    2838:	2d10      	cmp	r5, #16
    283a:	d120      	bne.n	287e <CONFIG_MAIN_STACK_SIZE+0x7e>
		}
	}

	print_formatted(output, "|");
    283c:	4921      	ldr	r1, [pc, #132]	; (28c4 <CONFIG_MAIN_STACK_SIZE+0xc4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    283e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 28b8 <CONFIG_MAIN_STACK_SIZE+0xb8>
			print_formatted(output, "%c",
    2842:	f8df 9084 	ldr.w	r9, [pc, #132]	; 28c8 <CONFIG_MAIN_STACK_SIZE+0xc8>
	print_formatted(output, "|");
    2846:	4620      	mov	r0, r4
    2848:	f7ff ffc0 	bl	27cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    284c:	2500      	movs	r5, #0
		if (i < length) {
    284e:	42af      	cmp	r7, r5
    2850:	d928      	bls.n	28a4 <CONFIG_MAIN_STACK_SIZE+0xa4>
			char c = (char)data[i];
    2852:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    2854:	f1a2 0320 	sub.w	r3, r2, #32
    2858:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    285a:	bf28      	it	cs
    285c:	222e      	movcs	r2, #46	; 0x2e
    285e:	4649      	mov	r1, r9
    2860:	4620      	mov	r0, r4
    2862:	f7ff ffb3 	bl	27cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2866:	3501      	adds	r5, #1
    2868:	2d10      	cmp	r5, #16
    286a:	d114      	bne.n	2896 <CONFIG_MAIN_STACK_SIZE+0x96>
		}
	}
}
    286c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    2870:	4649      	mov	r1, r9
    2872:	4620      	mov	r0, r4
    2874:	f7ff ffaa 	bl	27cc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2878:	f108 0801 	add.w	r8, r8, #1
    287c:	e7cb      	b.n	2816 <CONFIG_MAIN_STACK_SIZE+0x16>
		if (i > 0 && !(i % 8)) {
    287e:	076a      	lsls	r2, r5, #29
    2880:	d1d2      	bne.n	2828 <CONFIG_MAIN_STACK_SIZE+0x28>
			print_formatted(output, " ");
    2882:	4651      	mov	r1, sl
    2884:	4620      	mov	r0, r4
    2886:	f7ff ffa1 	bl	27cc <print_formatted>
    288a:	e7cd      	b.n	2828 <CONFIG_MAIN_STACK_SIZE+0x28>
			print_formatted(output, "   ");
    288c:	4641      	mov	r1, r8
    288e:	4620      	mov	r0, r4
    2890:	f7ff ff9c 	bl	27cc <print_formatted>
    2894:	e7cf      	b.n	2836 <CONFIG_MAIN_STACK_SIZE+0x36>
		if (i > 0 && !(i % 8)) {
    2896:	076b      	lsls	r3, r5, #29
    2898:	d1d9      	bne.n	284e <CONFIG_MAIN_STACK_SIZE+0x4e>
			print_formatted(output, " ");
    289a:	4641      	mov	r1, r8
    289c:	4620      	mov	r0, r4
    289e:	f7ff ff95 	bl	27cc <print_formatted>
    28a2:	e7d4      	b.n	284e <CONFIG_MAIN_STACK_SIZE+0x4e>
			print_formatted(output, " ");
    28a4:	4641      	mov	r1, r8
    28a6:	4620      	mov	r0, r4
    28a8:	f7ff ff90 	bl	27cc <print_formatted>
    28ac:	e7db      	b.n	2866 <CONFIG_MAIN_STACK_SIZE+0x66>
    28ae:	bf00      	nop
    28b0:	0000c9b1 	.word	0x0000c9b1
    28b4:	0000c9b0 	.word	0x0000c9b0
    28b8:	0000c9bb 	.word	0x0000c9bb
    28bc:	0000c9b9 	.word	0x0000c9b9
    28c0:	0000c9b3 	.word	0x0000c9b3
    28c4:	0000c9bd 	.word	0x0000c9bd
    28c8:	0000c9bf 	.word	0x0000c9bf

000028cc <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    28cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28d0:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    28d2:	f011 0602 	ands.w	r6, r1, #2
{
    28d6:	9205      	str	r2, [sp, #20]
    28d8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    28dc:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    28e0:	4607      	mov	r7, r0
    28e2:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    28e4:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    28e8:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    28ec:	d006      	beq.n	28fc <prefix_print+0x30>
	if (!format) {
    28ee:	f011 0f44 	tst.w	r1, #68	; 0x44
    28f2:	d138      	bne.n	2966 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    28f4:	4933      	ldr	r1, [pc, #204]	; (29c4 <prefix_print+0xf8>)
    28f6:	f7ff ff69 	bl	27cc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    28fa:	4606      	mov	r6, r0
	if (color) {
    28fc:	f1ba 0f00 	cmp.w	sl, #0
    2900:	d00a      	beq.n	2918 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    2902:	4b31      	ldr	r3, [pc, #196]	; (29c8 <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
    2904:	4931      	ldr	r1, [pc, #196]	; (29cc <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
    2906:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    290a:	4b31      	ldr	r3, [pc, #196]	; (29d0 <prefix_print+0x104>)
    290c:	4638      	mov	r0, r7
    290e:	2a00      	cmp	r2, #0
    2910:	bf08      	it	eq
    2912:	461a      	moveq	r2, r3
    2914:	f7ff ff5a 	bl	27cc <print_formatted>
	if (level_on) {
    2918:	b13d      	cbz	r5, 292a <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    291a:	4b2e      	ldr	r3, [pc, #184]	; (29d4 <prefix_print+0x108>)
    291c:	492e      	ldr	r1, [pc, #184]	; (29d8 <prefix_print+0x10c>)
    291e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    2922:	4638      	mov	r0, r7
    2924:	f7ff ff52 	bl	27cc <print_formatted>
    2928:	4605      	mov	r5, r0
	if (source_id >= 0) {
    292a:	f1b9 0f00 	cmp.w	r9, #0
    292e:	db16      	blt.n	295e <prefix_print+0x92>
		total += print_formatted(output,
    2930:	9b05      	ldr	r3, [sp, #20]
    2932:	2b00      	cmp	r3, #0
    2934:	d043      	beq.n	29be <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2936:	2301      	movs	r3, #1
    2938:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    293c:	4b27      	ldr	r3, [pc, #156]	; (29dc <prefix_print+0x110>)
    293e:	4c28      	ldr	r4, [pc, #160]	; (29e0 <prefix_print+0x114>)
    2940:	f018 0f10 	tst.w	r8, #16
    2944:	bf18      	it	ne
    2946:	461c      	movne	r4, r3
    2948:	4649      	mov	r1, r9
    294a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    294e:	f7ff fcef 	bl	2330 <log_source_name_get>
    2952:	4621      	mov	r1, r4
    2954:	4602      	mov	r2, r0
    2956:	4638      	mov	r0, r7
    2958:	f7ff ff38 	bl	27cc <print_formatted>
    295c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    295e:	19a8      	adds	r0, r5, r6
    2960:	b007      	add	sp, #28
    2962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    2966:	4b1f      	ldr	r3, [pc, #124]	; (29e4 <prefix_print+0x118>)
    2968:	6819      	ldr	r1, [r3, #0]
    296a:	b331      	cbz	r1, 29ba <prefix_print+0xee>
		timestamp /= timestamp_div;
    296c:	4b1e      	ldr	r3, [pc, #120]	; (29e8 <prefix_print+0x11c>)
    296e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    2972:	681b      	ldr	r3, [r3, #0]
    2974:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    2978:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    297c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    2980:	fbb4 f2f6 	udiv	r2, r4, r6
    2984:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
    2988:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    298c:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    2990:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2994:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
    2998:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    299c:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
    29a0:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    29a4:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
    29a8:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    29aa:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    29ae:	e9cd e101 	strd	lr, r1, [sp, #4]
    29b2:	490e      	ldr	r1, [pc, #56]	; (29ec <prefix_print+0x120>)
    29b4:	f7ff ff0a 	bl	27cc <print_formatted>
    29b8:	e79f      	b.n	28fa <prefix_print+0x2e>
		length = 0;
    29ba:	4608      	mov	r0, r1
    29bc:	e79d      	b.n	28fa <prefix_print+0x2e>
		total += print_formatted(output,
    29be:	4c08      	ldr	r4, [pc, #32]	; (29e0 <prefix_print+0x114>)
    29c0:	e7c2      	b.n	2948 <prefix_print+0x7c>
    29c2:	bf00      	nop
    29c4:	0000c9d0 	.word	0x0000c9d0
    29c8:	0000c0e0 	.word	0x0000c0e0
    29cc:	0000d04c 	.word	0x0000d04c
    29d0:	0000c9c2 	.word	0x0000c9c2
    29d4:	0000c0f4 	.word	0x0000c0f4
    29d8:	0000c9f5 	.word	0x0000c9f5
    29dc:	0000c9cc 	.word	0x0000c9cc
    29e0:	0000c9c7 	.word	0x0000c9c7
    29e4:	20001d70 	.word	0x20001d70
    29e8:	20001d74 	.word	0x20001d74
    29ec:	0000c9d9 	.word	0x0000c9d9

000029f0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    29f0:	b538      	push	{r3, r4, r5, lr}
    29f2:	460c      	mov	r4, r1
	if (color) {
    29f4:	07e1      	lsls	r1, r4, #31
{
    29f6:	4605      	mov	r5, r0
	if (color) {
    29f8:	d503      	bpl.n	2a02 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    29fa:	4a08      	ldr	r2, [pc, #32]	; (2a1c <postfix_print+0x2c>)
    29fc:	4908      	ldr	r1, [pc, #32]	; (2a20 <postfix_print+0x30>)
    29fe:	f7ff fee5 	bl	27cc <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2a02:	06e2      	lsls	r2, r4, #27
    2a04:	d408      	bmi.n	2a18 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2a06:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2a08:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    2a0a:	bf4c      	ite	mi
    2a0c:	4905      	ldrmi	r1, [pc, #20]	; (2a24 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    2a0e:	4906      	ldrpl	r1, [pc, #24]	; (2a28 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    2a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2a14:	f7ff beda 	b.w	27cc <print_formatted>
}
    2a18:	bd38      	pop	{r3, r4, r5, pc}
    2a1a:	bf00      	nop
    2a1c:	0000c9c2 	.word	0x0000c9c2
    2a20:	0000d04c 	.word	0x0000d04c
    2a24:	0000c9b1 	.word	0x0000c9b1
    2a28:	0000c9b0 	.word	0x0000c9b0

00002a2c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    2a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    2a30:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    2a32:	f013 0807 	ands.w	r8, r3, #7
{
    2a36:	b08a      	sub	sp, #40	; 0x28
    2a38:	4605      	mov	r5, r0
    2a3a:	460e      	mov	r6, r1
    2a3c:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
    2a3e:	d022      	beq.n	2a86 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2a40:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    2a42:	8949      	ldrh	r1, [r1, #10]
    2a44:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    2a48:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2a4c:	43d2      	mvns	r2, r2
    2a4e:	e9cd 8300 	strd	r8, r3, [sp]
    2a52:	9102      	str	r1, [sp, #8]
    2a54:	68f3      	ldr	r3, [r6, #12]
    2a56:	f002 0201 	and.w	r2, r2, #1
    2a5a:	4639      	mov	r1, r7
    2a5c:	f7ff ff36 	bl	28cc <prefix_print>
    2a60:	4681      	mov	r9, r0
    2a62:	7a34      	ldrb	r4, [r6, #8]
    2a64:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    2a66:	f014 0401 	ands.w	r4, r4, #1
    2a6a:	d00e      	beq.n	2a8a <log_output_msg_process+0x5e>
		std_print(msg, output);
    2a6c:	4629      	mov	r1, r5
    2a6e:	4630      	mov	r0, r6
    2a70:	f007 fb27 	bl	a0c2 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    2a74:	f1b8 0f00 	cmp.w	r8, #0
    2a78:	d02b      	beq.n	2ad2 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    2a7a:	4642      	mov	r2, r8
    2a7c:	4639      	mov	r1, r7
    2a7e:	4628      	mov	r0, r5
    2a80:	f7ff ffb6 	bl	29f0 <postfix_print>
    2a84:	e025      	b.n	2ad2 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    2a86:	46c1      	mov	r9, r8
    2a88:	e7eb      	b.n	2a62 <log_output_msg_process+0x36>
	} else if (raw_string) {
    2a8a:	f1b8 0f00 	cmp.w	r8, #0
    2a8e:	d126      	bne.n	2ade <log_output_msg_process+0xb2>
	size_t offset = 0;
    2a90:	4627      	mov	r7, r4
		length = output->size;
    2a92:	68eb      	ldr	r3, [r5, #12]
    2a94:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    2a96:	aa06      	add	r2, sp, #24
    2a98:	463b      	mov	r3, r7
    2a9a:	68a9      	ldr	r1, [r5, #8]
    2a9c:	4630      	mov	r0, r6
    2a9e:	f007 fafc 	bl	a09a <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    2aa2:	9a06      	ldr	r2, [sp, #24]
    2aa4:	686b      	ldr	r3, [r5, #4]
    2aa6:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    2aa8:	b13a      	cbz	r2, 2aba <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    2aaa:	68ab      	ldr	r3, [r5, #8]
    2aac:	4413      	add	r3, r2
    2aae:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    2ab2:	f1a4 030a 	sub.w	r3, r4, #10
    2ab6:	425c      	negs	r4, r3
    2ab8:	415c      	adcs	r4, r3
		log_output_flush(output);
    2aba:	4628      	mov	r0, r5
    2abc:	f007 fc5e 	bl	a37c <log_output_flush>
		offset += length;
    2ac0:	9b06      	ldr	r3, [sp, #24]
    2ac2:	441f      	add	r7, r3
	} while (length > 0);
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d1e4      	bne.n	2a92 <log_output_msg_process+0x66>
	if (eol) {
    2ac8:	b11c      	cbz	r4, 2ad2 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    2aca:	4914      	ldr	r1, [pc, #80]	; (2b1c <log_output_msg_process+0xf0>)
    2acc:	4628      	mov	r0, r5
    2ace:	f7ff fe7d 	bl	27cc <print_formatted>
	}

	log_output_flush(output);
    2ad2:	4628      	mov	r0, r5
}
    2ad4:	b00a      	add	sp, #40	; 0x28
    2ad6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    2ada:	f007 bc4f 	b.w	a37c <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
    2ade:	4630      	mov	r0, r6
    2ae0:	f007 fa29 	bl	9f36 <log_msg_str_get>
    2ae4:	490e      	ldr	r1, [pc, #56]	; (2b20 <log_output_msg_process+0xf4>)
    2ae6:	4602      	mov	r2, r0
    2ae8:	4628      	mov	r0, r5
    2aea:	f7ff fe6f 	bl	27cc <print_formatted>
		length = sizeof(buf);
    2aee:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2af2:	aa05      	add	r2, sp, #20
    2af4:	4623      	mov	r3, r4
    2af6:	a906      	add	r1, sp, #24
    2af8:	4630      	mov	r0, r6
		length = sizeof(buf);
    2afa:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2afe:	f007 facc 	bl	a09a <log_msg_hexdump_data_get>
		if (length) {
    2b02:	9a05      	ldr	r2, [sp, #20]
    2b04:	2a00      	cmp	r2, #0
    2b06:	d0b8      	beq.n	2a7a <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    2b08:	464b      	mov	r3, r9
    2b0a:	9700      	str	r7, [sp, #0]
    2b0c:	a906      	add	r1, sp, #24
    2b0e:	4628      	mov	r0, r5
    2b10:	f7ff fe6e 	bl	27f0 <hexdump_line_print>
			offset += length;
    2b14:	9b05      	ldr	r3, [sp, #20]
    2b16:	441c      	add	r4, r3
		length = sizeof(buf);
    2b18:	e7eb      	b.n	2af2 <log_output_msg_process+0xc6>
    2b1a:	bf00      	nop
    2b1c:	0000cb35 	.word	0x0000cb35
    2b20:	0000d04c 	.word	0x0000d04c

00002b24 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2b26:	f242 730f 	movw	r3, #9999	; 0x270f
    2b2a:	428b      	cmp	r3, r1
    2b2c:	bf28      	it	cs
    2b2e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    2b30:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2b32:	4a0f      	ldr	r2, [pc, #60]	; (2b70 <log_output_dropped_process+0x4c>)
{
    2b34:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2b36:	2105      	movs	r1, #5
    2b38:	4668      	mov	r0, sp
    2b3a:	f006 ff84 	bl	9a46 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2b3e:	6863      	ldr	r3, [r4, #4]
    2b40:	490c      	ldr	r1, [pc, #48]	; (2b74 <log_output_dropped_process+0x50>)
    2b42:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2b44:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2b46:	220b      	movs	r2, #11
    2b48:	4628      	mov	r0, r5
    2b4a:	f007 faad 	bl	a0a8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    2b4e:	6863      	ldr	r3, [r4, #4]
    2b50:	4632      	mov	r2, r6
    2b52:	4669      	mov	r1, sp
    2b54:	4628      	mov	r0, r5
    2b56:	685b      	ldr	r3, [r3, #4]
    2b58:	f007 faa6 	bl	a0a8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2b5c:	6863      	ldr	r3, [r4, #4]
    2b5e:	4906      	ldr	r1, [pc, #24]	; (2b78 <log_output_dropped_process+0x54>)
    2b60:	685b      	ldr	r3, [r3, #4]
    2b62:	221b      	movs	r2, #27
    2b64:	4628      	mov	r0, r5
    2b66:	f007 fa9f 	bl	a0a8 <buffer_write>
		     output->control_block->ctx);
}
    2b6a:	b002      	add	sp, #8
    2b6c:	bd70      	pop	{r4, r5, r6, pc}
    2b6e:	bf00      	nop
    2b70:	0000d1d9 	.word	0x0000d1d9
    2b74:	0000ca37 	.word	0x0000ca37
    2b78:	0000ca1b 	.word	0x0000ca1b

00002b7c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2b7c:	4a08      	ldr	r2, [pc, #32]	; (2ba0 <log_output_timestamp_freq_set+0x24>)
{
    2b7e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2b80:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2b82:	4c08      	ldr	r4, [pc, #32]	; (2ba4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2b84:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2b86:	2100      	movs	r1, #0
    2b88:	42a0      	cmp	r0, r4
    2b8a:	d804      	bhi.n	2b96 <log_output_timestamp_freq_set+0x1a>
    2b8c:	b101      	cbz	r1, 2b90 <log_output_timestamp_freq_set+0x14>
    2b8e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2b90:	4b05      	ldr	r3, [pc, #20]	; (2ba8 <log_output_timestamp_freq_set+0x2c>)
    2b92:	6018      	str	r0, [r3, #0]
}
    2b94:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2b96:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2b98:	005b      	lsls	r3, r3, #1
    2b9a:	2101      	movs	r1, #1
    2b9c:	e7f4      	b.n	2b88 <log_output_timestamp_freq_set+0xc>
    2b9e:	bf00      	nop
    2ba0:	20001d74 	.word	0x20001d74
    2ba4:	000f4240 	.word	0x000f4240
    2ba8:	20001d70 	.word	0x20001d70

00002bac <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2bac:	4b01      	ldr	r3, [pc, #4]	; (2bb4 <log_backend_rtt_init+0x8>)
    2bae:	2201      	movs	r2, #1
    2bb0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2bb2:	4770      	bx	lr
    2bb4:	20002af1 	.word	0x20002af1

00002bb8 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    2bb8:	4b02      	ldr	r3, [pc, #8]	; (2bc4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2bba:	4803      	ldr	r0, [pc, #12]	; (2bc8 <panic+0x10>)
    2bbc:	2201      	movs	r2, #1
    2bbe:	701a      	strb	r2, [r3, #0]
    2bc0:	f007 bbdc 	b.w	a37c <log_output_flush>
    2bc4:	20002af2 	.word	0x20002af2
    2bc8:	0000c124 	.word	0x0000c124

00002bcc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2bcc:	4801      	ldr	r0, [pc, #4]	; (2bd4 <dropped+0x8>)
    2bce:	f7ff bfa9 	b.w	2b24 <log_output_dropped_process>
    2bd2:	bf00      	nop
    2bd4:	0000c124 	.word	0x0000c124

00002bd8 <put>:
{
    2bd8:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2bda:	4608      	mov	r0, r1
    2bdc:	460c      	mov	r4, r1
    2bde:	f007 f968 	bl	9eb2 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    2be2:	4805      	ldr	r0, [pc, #20]	; (2bf8 <put+0x20>)
    2be4:	4621      	mov	r1, r4
    2be6:	220f      	movs	r2, #15
    2be8:	f7ff ff20 	bl	2a2c <log_output_msg_process>
	log_msg_put(msg);
    2bec:	4620      	mov	r0, r4
}
    2bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2bf2:	f007 b98d 	b.w	9f10 <log_msg_put>
    2bf6:	bf00      	nop
    2bf8:	0000c124 	.word	0x0000c124

00002bfc <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2bfc:	4b05      	ldr	r3, [pc, #20]	; (2c14 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    2bfe:	781b      	ldrb	r3, [r3, #0]
    2c00:	b11b      	cbz	r3, 2c0a <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    2c02:	f241 3088 	movw	r0, #5000	; 0x1388
    2c06:	f008 bfc9 	b.w	bb9c <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    2c0a:	20a4      	movs	r0, #164	; 0xa4
    2c0c:	2100      	movs	r1, #0
    2c0e:	f005 bf89 	b.w	8b24 <z_impl_k_sleep>
    2c12:	bf00      	nop
    2c14:	20002af2 	.word	0x20002af2

00002c18 <data_out_block_mode>:
{
    2c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    2c1c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2cac <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    2c20:	f8df a08c 	ldr.w	sl, [pc, #140]	; 2cb0 <data_out_block_mode+0x98>
{
    2c24:	4680      	mov	r8, r0
    2c26:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2c28:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    2c2a:	f899 5000 	ldrb.w	r5, [r9]
    2c2e:	b9cd      	cbnz	r5, 2c64 <data_out_block_mode+0x4c>
    2c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c38:	4650      	mov	r0, sl
    2c3a:	f005 fb9b 	bl	8374 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2c3e:	463a      	mov	r2, r7
    2c40:	4641      	mov	r1, r8
    2c42:	4628      	mov	r0, r5
    2c44:	f005 f884 	bl	7d50 <SEGGER_RTT_WriteSkipNoLock>
    2c48:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    2c4a:	4650      	mov	r0, sl
    2c4c:	f005 fc0a 	bl	8464 <z_impl_k_mutex_unlock>
		if (ret) {
    2c50:	4d18      	ldr	r5, [pc, #96]	; (2cb4 <data_out_block_mode+0x9c>)
    2c52:	b1fe      	cbz	r6, 2c94 <data_out_block_mode+0x7c>
	host_present = true;
    2c54:	2301      	movs	r3, #1
    2c56:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    2c58:	f899 3000 	ldrb.w	r3, [r9]
    2c5c:	b96b      	cbnz	r3, 2c7a <data_out_block_mode+0x62>
}
    2c5e:	4638      	mov	r0, r7
    2c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2c64:	463a      	mov	r2, r7
    2c66:	4641      	mov	r1, r8
    2c68:	2000      	movs	r0, #0
    2c6a:	f005 f871 	bl	7d50 <SEGGER_RTT_WriteSkipNoLock>
    2c6e:	4606      	mov	r6, r0
    2c70:	e7ee      	b.n	2c50 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    2c72:	b95c      	cbnz	r4, 2c8c <data_out_block_mode+0x74>
		host_present = false;
    2c74:	702c      	strb	r4, [r5, #0]
    2c76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2c7a:	2000      	movs	r0, #0
    2c7c:	f005 f8e4 	bl	7e48 <SEGGER_RTT_HasDataUp>
    2c80:	2800      	cmp	r0, #0
    2c82:	d0ec      	beq.n	2c5e <data_out_block_mode+0x46>
    2c84:	782b      	ldrb	r3, [r5, #0]
    2c86:	2b00      	cmp	r3, #0
    2c88:	d1f3      	bne.n	2c72 <data_out_block_mode+0x5a>
    2c8a:	e7e8      	b.n	2c5e <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    2c8c:	3c01      	subs	r4, #1
    2c8e:	f7ff ffb5 	bl	2bfc <on_failed_write.part.0>
    2c92:	e7f2      	b.n	2c7a <data_out_block_mode+0x62>
		} else if (host_present) {
    2c94:	782b      	ldrb	r3, [r5, #0]
    2c96:	b113      	cbz	r3, 2c9e <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    2c98:	3c01      	subs	r4, #1
    2c9a:	d104      	bne.n	2ca6 <data_out_block_mode+0x8e>
		host_present = false;
    2c9c:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2c9e:	782b      	ldrb	r3, [r5, #0]
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d1c2      	bne.n	2c2a <data_out_block_mode+0x12>
    2ca4:	e7db      	b.n	2c5e <data_out_block_mode+0x46>
    2ca6:	f7ff ffa9 	bl	2bfc <on_failed_write.part.0>
    2caa:	e7f8      	b.n	2c9e <data_out_block_mode+0x86>
    2cac:	20002af2 	.word	0x20002af2
    2cb0:	200001d8 	.word	0x200001d8
    2cb4:	20002af1 	.word	0x20002af1

00002cb8 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    2cb8:	4b08      	ldr	r3, [pc, #32]	; (2cdc <get_flash_area_from_id+0x24>)
{
    2cba:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    2cbc:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    2cbe:	4b08      	ldr	r3, [pc, #32]	; (2ce0 <get_flash_area_from_id+0x28>)
{
    2cc0:	4601      	mov	r1, r0
    2cc2:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    2cc4:	2300      	movs	r3, #0
    2cc6:	429c      	cmp	r4, r3
    2cc8:	dc01      	bgt.n	2cce <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    2cca:	2000      	movs	r0, #0
}
    2ccc:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    2cce:	4610      	mov	r0, r2
    2cd0:	3210      	adds	r2, #16
    2cd2:	7805      	ldrb	r5, [r0, #0]
    2cd4:	428d      	cmp	r5, r1
    2cd6:	d0f9      	beq.n	2ccc <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    2cd8:	3301      	adds	r3, #1
    2cda:	e7f4      	b.n	2cc6 <get_flash_area_from_id+0xe>
    2cdc:	0000c22c 	.word	0x0000c22c
    2ce0:	20000014 	.word	0x20000014

00002ce4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    2ce4:	4b08      	ldr	r3, [pc, #32]	; (2d08 <flash_area_open+0x24>)
    2ce6:	681b      	ldr	r3, [r3, #0]
{
    2ce8:	b510      	push	{r4, lr}
    2cea:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    2cec:	b12b      	cbz	r3, 2cfa <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    2cee:	f7ff ffe3 	bl	2cb8 <get_flash_area_from_id>
	if (area == NULL) {
    2cf2:	b128      	cbz	r0, 2d00 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    2cf4:	6020      	str	r0, [r4, #0]
	return 0;
    2cf6:	2000      	movs	r0, #0
}
    2cf8:	bd10      	pop	{r4, pc}
		return -EACCES;
    2cfa:	f06f 000c 	mvn.w	r0, #12
    2cfe:	e7fb      	b.n	2cf8 <flash_area_open+0x14>
		return -ENOENT;
    2d00:	f06f 0001 	mvn.w	r0, #1
    2d04:	e7f8      	b.n	2cf8 <flash_area_open+0x14>
    2d06:	bf00      	nop
    2d08:	20000014 	.word	0x20000014

00002d0c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    2d0c:	b530      	push	{r4, r5, lr}
    2d0e:	b089      	sub	sp, #36	; 0x24
    2d10:	460c      	mov	r4, r1
    2d12:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    2d14:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    2d16:	f7ff ffcf 	bl	2cb8 <get_flash_area_from_id>
	if (fa == NULL) {
    2d1a:	b1b8      	cbz	r0, 2d4c <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    2d1c:	6843      	ldr	r3, [r0, #4]
    2d1e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    2d20:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    2d22:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    2d24:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    2d26:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    2d2a:	2300      	movs	r3, #0
	cb_data->status = 0;
    2d2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    2d30:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    2d32:	f007 fb4b 	bl	a3cc <device_get_binding>
	if (flash_dev == NULL) {
    2d36:	b160      	cbz	r0, 2d52 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    2d38:	4907      	ldr	r1, [pc, #28]	; (2d58 <flash_area_get_sectors+0x4c>)
    2d3a:	aa01      	add	r2, sp, #4
    2d3c:	f008 fa33 	bl	b1a6 <flash_page_foreach>
	if (cb_data->status == 0) {
    2d40:	9807      	ldr	r0, [sp, #28]
    2d42:	b908      	cbnz	r0, 2d48 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    2d44:	9b05      	ldr	r3, [sp, #20]
    2d46:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    2d48:	b009      	add	sp, #36	; 0x24
    2d4a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    2d4c:	f06f 0015 	mvn.w	r0, #21
    2d50:	e7fa      	b.n	2d48 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    2d52:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    2d56:	e7f7      	b.n	2d48 <flash_area_get_sectors+0x3c>
    2d58:	0000a3d1 	.word	0x0000a3d1

00002d5c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d5e:	4605      	mov	r5, r0
	__asm__ volatile(
    2d60:	f04f 0320 	mov.w	r3, #32
    2d64:	f3ef 8611 	mrs	r6, BASEPRI
    2d68:	f383 8811 	msr	BASEPRI, r3
    2d6c:	f3bf 8f6f 	isb	sy
	return list->head;
    2d70:	4b09      	ldr	r3, [pc, #36]	; (2d98 <pm_state_notify+0x3c>)
    2d72:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2d74:	b15c      	cbz	r4, 2d8e <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    2d76:	4f09      	ldr	r7, [pc, #36]	; (2d9c <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    2d78:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2d7c:	2d00      	cmp	r5, #0
    2d7e:	bf08      	it	eq
    2d80:	4613      	moveq	r3, r2
		if (callback) {
    2d82:	b10b      	cbz	r3, 2d88 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    2d84:	7838      	ldrb	r0, [r7, #0]
    2d86:	4798      	blx	r3
	return node->next;
    2d88:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2d8a:	2c00      	cmp	r4, #0
    2d8c:	d1f4      	bne.n	2d78 <pm_state_notify+0x1c>
	__asm__ volatile(
    2d8e:	f386 8811 	msr	BASEPRI, r6
    2d92:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d98:	20001d8c 	.word	0x20001d8c
    2d9c:	20001d94 	.word	0x20001d94

00002da0 <pm_system_resume>:

void pm_system_resume(void)
{
    2da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    2da2:	4b0f      	ldr	r3, [pc, #60]	; (2de0 <pm_system_resume+0x40>)
    2da4:	681a      	ldr	r2, [r3, #0]
    2da6:	b9ba      	cbnz	r2, 2dd8 <pm_system_resume+0x38>
		post_ops_done = 1;
    2da8:	2201      	movs	r2, #1
    2daa:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    2dac:	4a0d      	ldr	r2, [pc, #52]	; (2de4 <pm_system_resume+0x44>)
    2dae:	ca07      	ldmia	r2, {r0, r1, r2}
    2db0:	ab01      	add	r3, sp, #4
    2db2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    2db6:	4a0c      	ldr	r2, [pc, #48]	; (2de8 <pm_system_resume+0x48>)
    2db8:	b14a      	cbz	r2, 2dce <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    2dba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2dbe:	f007 ff57 	bl	ac70 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2dc2:	2000      	movs	r0, #0
	}
}
    2dc4:	b005      	add	sp, #20
    2dc6:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    2dca:	f7ff bfc7 	b.w	2d5c <pm_state_notify>
    2dce:	f382 8811 	msr	BASEPRI, r2
    2dd2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2dd6:	e7f4      	b.n	2dc2 <pm_system_resume+0x22>
}
    2dd8:	b005      	add	sp, #20
    2dda:	f85d fb04 	ldr.w	pc, [sp], #4
    2dde:	bf00      	nop
    2de0:	20000010 	.word	0x20000010
    2de4:	20001d94 	.word	0x20001d94
    2de8:	0000ac71 	.word	0x0000ac71

00002dec <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    2dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dee:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    2df0:	466e      	mov	r6, sp
    2df2:	4601      	mov	r1, r0
{
    2df4:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    2df6:	4630      	mov	r0, r6
    2df8:	f007 fb99 	bl	a52e <pm_policy_next_state>
    2dfc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2e00:	4c17      	ldr	r4, [pc, #92]	; (2e60 <pm_system_suspend+0x74>)
    2e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    2e06:	7820      	ldrb	r0, [r4, #0]
    2e08:	4627      	mov	r7, r4
    2e0a:	b338      	cbz	r0, 2e5c <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    2e0c:	4b15      	ldr	r3, [pc, #84]	; (2e64 <pm_system_suspend+0x78>)
    2e0e:	2100      	movs	r1, #0
    2e10:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    2e12:	1c6b      	adds	r3, r5, #1
    2e14:	d00d      	beq.n	2e32 <pm_system_suspend+0x46>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2e16:	4814      	ldr	r0, [pc, #80]	; (2e68 <pm_system_suspend+0x7c>)
    2e18:	4616      	mov	r6, r2
    2e1a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    2e1e:	4a13      	ldr	r2, [pc, #76]	; (2e6c <pm_system_suspend+0x80>)
    2e20:	2300      	movs	r3, #0
    2e22:	fbe6 010c 	umlal	r0, r1, r6, ip
    2e26:	f7fd f9bb 	bl	1a0 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    2e2a:	2101      	movs	r1, #1
    2e2c:	1a28      	subs	r0, r5, r0
    2e2e:	f008 fe97 	bl	bb60 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2e32:	f005 fbf9 	bl	8628 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    2e36:	2001      	movs	r0, #1
    2e38:	f7ff ff90 	bl	2d5c <pm_state_notify>
	pm_state_set(z_power_state);
    2e3c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    2e40:	ab05      	add	r3, sp, #20
    2e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2e46:	4a0a      	ldr	r2, [pc, #40]	; (2e70 <pm_system_suspend+0x84>)
    2e48:	b11a      	cbz	r2, 2e52 <pm_system_suspend+0x66>
		pm_power_state_set(info);
    2e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2e4e:	f007 fefc 	bl	ac4a <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    2e52:	f7ff ffa5 	bl	2da0 <pm_system_resume>
	k_sched_unlock();
    2e56:	f005 fc9f 	bl	8798 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    2e5a:	7820      	ldrb	r0, [r4, #0]
}
    2e5c:	b009      	add	sp, #36	; 0x24
    2e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e60:	20001d94 	.word	0x20001d94
    2e64:	20000010 	.word	0x20000010
    2e68:	000f423f 	.word	0x000f423f
    2e6c:	000f4240 	.word	0x000f4240
    2e70:	0000ac4b 	.word	0x0000ac4b

00002e74 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    2e74:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    2e76:	4c04      	ldr	r4, [pc, #16]	; (2e88 <rtt_console_init+0x14>)
    2e78:	4620      	mov	r0, r4
    2e7a:	f7fe fd11 	bl	18a0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    2e7e:	4620      	mov	r0, r4
    2e80:	f001 fd68 	bl	4954 <__stdout_hook_install>

	return 0;
}
    2e84:	2000      	movs	r0, #0
    2e86:	bd10      	pop	{r4, pc}
    2e88:	00002e8d 	.word	0x00002e8d

00002e8c <rtt_console_out>:
{
    2e8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    2e90:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2ef0 <rtt_console_out+0x64>
    2e94:	4e17      	ldr	r6, [pc, #92]	; (2ef4 <rtt_console_out+0x68>)
	char c = (char)character;
    2e96:	f88d 0007 	strb.w	r0, [sp, #7]
{
    2e9a:	4604      	mov	r4, r0
	char c = (char)character;
    2e9c:	2503      	movs	r5, #3
    2e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ea6:	4640      	mov	r0, r8
    2ea8:	f005 fa64 	bl	8374 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    2eac:	2201      	movs	r2, #1
    2eae:	f10d 0107 	add.w	r1, sp, #7
    2eb2:	2000      	movs	r0, #0
    2eb4:	f004 ff98 	bl	7de8 <SEGGER_RTT_WriteNoLock>
    2eb8:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    2eba:	4640      	mov	r0, r8
    2ebc:	f005 fad2 	bl	8464 <z_impl_k_mutex_unlock>
		if (cnt) {
    2ec0:	b12f      	cbz	r7, 2ece <rtt_console_out+0x42>
			host_present = true;
    2ec2:	2301      	movs	r3, #1
    2ec4:	7033      	strb	r3, [r6, #0]
}
    2ec6:	4620      	mov	r0, r4
    2ec8:	b002      	add	sp, #8
    2eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    2ece:	7833      	ldrb	r3, [r6, #0]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d0f8      	beq.n	2ec6 <rtt_console_out+0x3a>
			if (max_cnt) {
    2ed4:	3d01      	subs	r5, #1
    2ed6:	d008      	beq.n	2eea <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    2ed8:	f008 fd28 	bl	b92c <k_is_in_isr>
    2edc:	2800      	cmp	r0, #0
    2ede:	d1de      	bne.n	2e9e <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    2ee0:	2100      	movs	r1, #0
    2ee2:	2042      	movs	r0, #66	; 0x42
    2ee4:	f005 fe1e 	bl	8b24 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2ee8:	e7d9      	b.n	2e9e <rtt_console_out+0x12>
				host_present = false;
    2eea:	7035      	strb	r5, [r6, #0]
    2eec:	e7eb      	b.n	2ec6 <rtt_console_out+0x3a>
    2eee:	bf00      	nop
    2ef0:	200001d8 	.word	0x200001d8
    2ef4:	20002af3 	.word	0x20002af3

00002ef8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2ef8:	4b08      	ldr	r3, [pc, #32]	; (2f1c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2efa:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2efc:	1ac3      	subs	r3, r0, r3
{
    2efe:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2f00:	4907      	ldr	r1, [pc, #28]	; (2f20 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2f02:	109b      	asrs	r3, r3, #2
{
    2f04:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2f06:	4359      	muls	r1, r3
    2f08:	4806      	ldr	r0, [pc, #24]	; (2f24 <onoff_stop+0x2c>)
    2f0a:	2240      	movs	r2, #64	; 0x40
    2f0c:	f007 fb30 	bl	a570 <stop>
	notify(mgr, res);
    2f10:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2f12:	4601      	mov	r1, r0
	notify(mgr, res);
    2f14:	4620      	mov	r0, r4
}
    2f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2f1a:	4718      	bx	r3
    2f1c:	20001db4 	.word	0x20001db4
    2f20:	b6db6db7 	.word	0xb6db6db7
    2f24:	0000bc74 	.word	0x0000bc74

00002f28 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2f28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2f2a:	4c0c      	ldr	r4, [pc, #48]	; (2f5c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2f2c:	4a0c      	ldr	r2, [pc, #48]	; (2f60 <onoff_start+0x38>)
    2f2e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2f30:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2f32:	9300      	str	r3, [sp, #0]
{
    2f34:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2f36:	460b      	mov	r3, r1
    2f38:	490a      	ldr	r1, [pc, #40]	; (2f64 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2f3a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2f3c:	4361      	muls	r1, r4
{
    2f3e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2f40:	4809      	ldr	r0, [pc, #36]	; (2f68 <onoff_start+0x40>)
    2f42:	f007 fb42 	bl	a5ca <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2f46:	1e01      	subs	r1, r0, #0
    2f48:	da05      	bge.n	2f56 <onoff_start+0x2e>
		notify(mgr, err);
    2f4a:	4630      	mov	r0, r6
    2f4c:	462b      	mov	r3, r5
	}
}
    2f4e:	b002      	add	sp, #8
    2f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2f54:	4718      	bx	r3
}
    2f56:	b002      	add	sp, #8
    2f58:	bd70      	pop	{r4, r5, r6, pc}
    2f5a:	bf00      	nop
    2f5c:	20001db4 	.word	0x20001db4
    2f60:	0000a639 	.word	0x0000a639
    2f64:	b6db6db7 	.word	0xb6db6db7
    2f68:	0000bc74 	.word	0x0000bc74

00002f6c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2f6c:	2200      	movs	r2, #0
{
    2f6e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2f70:	2101      	movs	r1, #1
{
    2f72:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2f74:	4610      	mov	r0, r2
    2f76:	f001 f8ad 	bl	40d4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2f7a:	2000      	movs	r0, #0
    2f7c:	f001 f878 	bl	4070 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2f80:	480f      	ldr	r0, [pc, #60]	; (2fc0 <clk_init+0x54>)
    2f82:	f004 f947 	bl	7214 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2f86:	4b0f      	ldr	r3, [pc, #60]	; (2fc4 <clk_init+0x58>)
    2f88:	4298      	cmp	r0, r3
    2f8a:	d115      	bne.n	2fb8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2f8c:	f008 fb76 	bl	b67c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2f90:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2f92:	490d      	ldr	r1, [pc, #52]	; (2fc8 <clk_init+0x5c>)
    2f94:	4630      	mov	r0, r6
    2f96:	f006 fdb2 	bl	9afe <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2f9a:	2800      	cmp	r0, #0
    2f9c:	db0b      	blt.n	2fb6 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    2f9e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2fa0:	4909      	ldr	r1, [pc, #36]	; (2fc8 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2fa2:	2501      	movs	r5, #1
    2fa4:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2fa6:	f104 001c 	add.w	r0, r4, #28
    2faa:	f006 fda8 	bl	9afe <onoff_manager_init>
		if (err < 0) {
    2fae:	2800      	cmp	r0, #0
    2fb0:	db01      	blt.n	2fb6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2fb2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2fb4:	2000      	movs	r0, #0
}
    2fb6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2fb8:	f06f 0004 	mvn.w	r0, #4
    2fbc:	e7fb      	b.n	2fb6 <clk_init+0x4a>
    2fbe:	bf00      	nop
    2fc0:	00003001 	.word	0x00003001
    2fc4:	0bad0000 	.word	0x0bad0000
    2fc8:	0000c160 	.word	0x0000c160

00002fcc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2fcc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2fce:	230c      	movs	r3, #12
    2fd0:	4809      	ldr	r0, [pc, #36]	; (2ff8 <clkstarted_handle.constprop.0+0x2c>)
    2fd2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2fd4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2fd6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2fd8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2fdc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2fde:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2fe0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2fe2:	4418      	add	r0, r3
    2fe4:	f007 fab1 	bl	a54a <set_on_state>
	if (callback) {
    2fe8:	b12d      	cbz	r5, 2ff6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2fea:	4632      	mov	r2, r6
    2fec:	462b      	mov	r3, r5
    2fee:	4803      	ldr	r0, [pc, #12]	; (2ffc <clkstarted_handle.constprop.0+0x30>)
}
    2ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2ff4:	4718      	bx	r3
}
    2ff6:	bd70      	pop	{r4, r5, r6, pc}
    2ff8:	20001db4 	.word	0x20001db4
    2ffc:	0000bc74 	.word	0x0000bc74

00003000 <clock_event_handler>:
	switch (event) {
    3000:	b110      	cbz	r0, 3008 <clock_event_handler+0x8>
    3002:	2801      	cmp	r0, #1
    3004:	d004      	beq.n	3010 <clock_event_handler+0x10>
    3006:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3008:	4b03      	ldr	r3, [pc, #12]	; (3018 <clock_event_handler+0x18>)
    300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    300c:	075b      	lsls	r3, r3, #29
    300e:	d101      	bne.n	3014 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3010:	f7ff bfdc 	b.w	2fcc <clkstarted_handle.constprop.0>
}
    3014:	4770      	bx	lr
    3016:	bf00      	nop
    3018:	20001db4 	.word	0x20001db4

0000301c <generic_hfclk_start>:
{
    301c:	b508      	push	{r3, lr}
	__asm__ volatile(
    301e:	f04f 0320 	mov.w	r3, #32
    3022:	f3ef 8111 	mrs	r1, BASEPRI
    3026:	f383 8811 	msr	BASEPRI, r3
    302a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    302e:	4a12      	ldr	r2, [pc, #72]	; (3078 <generic_hfclk_start+0x5c>)
    3030:	6813      	ldr	r3, [r2, #0]
    3032:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3036:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    303a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    303c:	d00c      	beq.n	3058 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    303e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3042:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3046:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    304a:	f013 0301 	ands.w	r3, r3, #1
    304e:	d003      	beq.n	3058 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3050:	480a      	ldr	r0, [pc, #40]	; (307c <generic_hfclk_start+0x60>)
    3052:	f007 fa7a 	bl	a54a <set_on_state>
			already_started = true;
    3056:	2301      	movs	r3, #1
	__asm__ volatile(
    3058:	f381 8811 	msr	BASEPRI, r1
    305c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3060:	b123      	cbz	r3, 306c <generic_hfclk_start+0x50>
}
    3062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3066:	2000      	movs	r0, #0
    3068:	f7ff bfb0 	b.w	2fcc <clkstarted_handle.constprop.0>
}
    306c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3070:	2001      	movs	r0, #1
    3072:	f008 bb0d 	b.w	b690 <nrfx_clock_start>
    3076:	bf00      	nop
    3078:	20001e04 	.word	0x20001e04
    307c:	20001df4 	.word	0x20001df4

00003080 <api_blocking_start>:
{
    3080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3082:	2200      	movs	r2, #0
    3084:	2301      	movs	r3, #1
    3086:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    308a:	4a09      	ldr	r2, [pc, #36]	; (30b0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    308c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3090:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3092:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3096:	f007 fac8 	bl	a62a <api_start>
	if (err < 0) {
    309a:	2800      	cmp	r0, #0
    309c:	db05      	blt.n	30aa <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    309e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    30a2:	2300      	movs	r3, #0
    30a4:	4668      	mov	r0, sp
    30a6:	f005 fa3f 	bl	8528 <z_impl_k_sem_take>
}
    30aa:	b005      	add	sp, #20
    30ac:	f85d fb04 	ldr.w	pc, [sp], #4
    30b0:	0000a657 	.word	0x0000a657

000030b4 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    30b4:	4b09      	ldr	r3, [pc, #36]	; (30dc <generic_hfclk_stop+0x28>)
    30b6:	f3bf 8f5b 	dmb	ish
    30ba:	e853 2f00 	ldrex	r2, [r3]
    30be:	f022 0102 	bic.w	r1, r2, #2
    30c2:	e843 1000 	strex	r0, r1, [r3]
    30c6:	2800      	cmp	r0, #0
    30c8:	d1f7      	bne.n	30ba <generic_hfclk_stop+0x6>
    30ca:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    30ce:	07d3      	lsls	r3, r2, #31
    30d0:	d402      	bmi.n	30d8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    30d2:	2001      	movs	r0, #1
    30d4:	f004 b8ae 	b.w	7234 <nrfx_clock_stop>
}
    30d8:	4770      	bx	lr
    30da:	bf00      	nop
    30dc:	20001e04 	.word	0x20001e04

000030e0 <z_nrf_clock_control_lf_on>:
{
    30e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    30e4:	4939      	ldr	r1, [pc, #228]	; (31cc <z_nrf_clock_control_lf_on+0xec>)
    30e6:	f3bf 8f5b 	dmb	ish
    30ea:	4607      	mov	r7, r0
    30ec:	2201      	movs	r2, #1
    30ee:	e851 3f00 	ldrex	r3, [r1]
    30f2:	e841 2000 	strex	r0, r2, [r1]
    30f6:	2800      	cmp	r0, #0
    30f8:	d1f9      	bne.n	30ee <z_nrf_clock_control_lf_on+0xe>
    30fa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    30fe:	b933      	cbnz	r3, 310e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3100:	4933      	ldr	r1, [pc, #204]	; (31d0 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    3102:	4834      	ldr	r0, [pc, #208]	; (31d4 <z_nrf_clock_control_lf_on+0xf4>)
    3104:	604b      	str	r3, [r1, #4]
    3106:	60cb      	str	r3, [r1, #12]
    3108:	608a      	str	r2, [r1, #8]
    310a:	f006 fd0b 	bl	9b24 <onoff_request>
	switch (start_mode) {
    310e:	1e7b      	subs	r3, r7, #1
    3110:	2b01      	cmp	r3, #1
    3112:	d82f      	bhi.n	3174 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3114:	2f01      	cmp	r7, #1
    3116:	d107      	bne.n	3128 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    311c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3120:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3124:	2b01      	cmp	r3, #1
    3126:	d025      	beq.n	3174 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3128:	f008 fc00 	bl	b92c <k_is_in_isr>
    312c:	4604      	mov	r4, r0
    312e:	b918      	cbnz	r0, 3138 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    3130:	4b29      	ldr	r3, [pc, #164]	; (31d8 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    3132:	781b      	ldrb	r3, [r3, #0]
    3134:	2b00      	cmp	r3, #0
    3136:	d141      	bne.n	31bc <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    3138:	f04f 0320 	mov.w	r3, #32
    313c:	f3ef 8611 	mrs	r6, BASEPRI
    3140:	f383 8811 	msr	BASEPRI, r3
    3144:	f3bf 8f6f 	isb	sy
    3148:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    314a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 31dc <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    314e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3152:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3156:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    315a:	03d2      	lsls	r2, r2, #15
    315c:	d50c      	bpl.n	3178 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    315e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3162:	2b01      	cmp	r3, #1
    3164:	d001      	beq.n	316a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3166:	2f01      	cmp	r7, #1
    3168:	d106      	bne.n	3178 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    316a:	b30c      	cbz	r4, 31b0 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    316c:	f386 8811 	msr	BASEPRI, r6
    3170:	f3bf 8f6f 	isb	sy
}
    3174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3178:	b1ac      	cbz	r4, 31a6 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    317a:	4630      	mov	r0, r6
    317c:	f001 f804 	bl	4188 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3180:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3184:	2b00      	cmp	r3, #0
    3186:	d1e4      	bne.n	3152 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3188:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    318c:	2a00      	cmp	r2, #0
    318e:	d0e0      	beq.n	3152 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3190:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3194:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3198:	2301      	movs	r3, #1
    319a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    319e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31a2:	60ab      	str	r3, [r5, #8]
}
    31a4:	e7d5      	b.n	3152 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    31a6:	2100      	movs	r1, #0
    31a8:	2021      	movs	r0, #33	; 0x21
    31aa:	f005 fcbb 	bl	8b24 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    31ae:	e7e7      	b.n	3180 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    31b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31b4:	2202      	movs	r2, #2
    31b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    31ba:	e7db      	b.n	3174 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    31bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31c0:	2202      	movs	r2, #2
    31c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    31c6:	4606      	mov	r6, r0
}
    31c8:	e7bf      	b.n	314a <z_nrf_clock_control_lf_on+0x6a>
    31ca:	bf00      	nop
    31cc:	20001e08 	.word	0x20001e08
    31d0:	20001da4 	.word	0x20001da4
    31d4:	20001dd0 	.word	0x20001dd0
    31d8:	200033ac 	.word	0x200033ac
    31dc:	e000e100 	.word	0xe000e100

000031e0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    31e0:	4a04      	ldr	r2, [pc, #16]	; (31f4 <sys_clock_timeout_handler+0x14>)
    31e2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    31e4:	1ac8      	subs	r0, r1, r3
    31e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    31ea:	4403      	add	r3, r0
    31ec:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    31ee:	f005 bdeb 	b.w	8dc8 <sys_clock_announce>
    31f2:	bf00      	nop
    31f4:	20001e1c 	.word	0x20001e1c

000031f8 <set_absolute_alarm>:
{
    31f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    31fc:	0086      	lsls	r6, r0, #2
    31fe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3202:	f100 0450 	add.w	r4, r0, #80	; 0x50
    3206:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    320a:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    320c:	b2a4      	uxth	r4, r4
    320e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3212:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    3216:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    321a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3288 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    321e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3222:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3226:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    3228:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    322c:	eba3 0309 	sub.w	r3, r3, r9
    3230:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3234:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3238:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    323a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    323e:	d102      	bne.n	3246 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    3240:	2013      	movs	r0, #19
    3242:	f008 fcab 	bl	bb9c <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3246:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    324a:	1aab      	subs	r3, r5, r2
    324c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    3250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3254:	bf88      	it	hi
    3256:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3258:	2300      	movs	r3, #0
    325a:	6023      	str	r3, [r4, #0]
    325c:	6823      	ldr	r3, [r4, #0]
    p_reg->EVTENSET = mask;
    325e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3262:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3266:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    326a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    326e:	4599      	cmp	r9, r3
    3270:	d006      	beq.n	3280 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    3272:	1aeb      	subs	r3, r5, r3
    3274:	3b02      	subs	r3, #2
    3276:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    327a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    327e:	d801      	bhi.n	3284 <set_absolute_alarm+0x8c>
}
    3280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    3284:	462b      	mov	r3, r5
    3286:	e7cf      	b.n	3228 <set_absolute_alarm+0x30>
    3288:	40011000 	.word	0x40011000

0000328c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    328c:	b570      	push	{r4, r5, r6, lr}
    328e:	4d15      	ldr	r5, [pc, #84]	; (32e4 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    3290:	4c15      	ldr	r4, [pc, #84]	; (32e8 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3292:	2600      	movs	r6, #0
    3294:	682b      	ldr	r3, [r5, #0]
    3296:	2000      	movs	r0, #0
    3298:	b106      	cbz	r6, 329c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    329a:	bd70      	pop	{r4, r5, r6, pc}
    329c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    32a0:	03d2      	lsls	r2, r2, #15
    32a2:	d5fa      	bpl.n	329a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    32a4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    32a8:	2a00      	cmp	r2, #0
    32aa:	d0f6      	beq.n	329a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    32ac:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    32b0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    p_reg->EVTENCLR = mask;
    32b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    32b8:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    32bc:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    32c0:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    32c4:	1a72      	subs	r2, r6, r1
    32c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    32ca:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    32ce:	bf88      	it	hi
    32d0:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    32d2:	2601      	movs	r6, #1
			if (handler) {
    32d4:	b11b      	cbz	r3, 32de <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    32d6:	686a      	ldr	r2, [r5, #4]
    32d8:	6028      	str	r0, [r5, #0]
    32da:	4798      	blx	r3
    32dc:	e7da      	b.n	3294 <rtc_nrf_isr+0x8>
    32de:	602b      	str	r3, [r5, #0]
}
    32e0:	e7db      	b.n	329a <rtc_nrf_isr+0xe>
    32e2:	bf00      	nop
    32e4:	20001e10 	.word	0x20001e10
    32e8:	40011000 	.word	0x40011000

000032ec <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    32ec:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    32ee:	4c0f      	ldr	r4, [pc, #60]	; (332c <sys_clock_driver_init+0x40>)
    32f0:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    32f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    32f6:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    32fa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    32fe:	4b0c      	ldr	r3, [pc, #48]	; (3330 <sys_clock_driver_init+0x44>)
    3300:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3304:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3308:	2101      	movs	r1, #1
    330a:	462a      	mov	r2, r5
    330c:	2011      	movs	r0, #17
    330e:	f000 fee1 	bl	40d4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3312:	2011      	movs	r0, #17
    3314:	f000 feac 	bl	4070 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3318:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    331a:	4a06      	ldr	r2, [pc, #24]	; (3334 <sys_clock_driver_init+0x48>)
    331c:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    331e:	2002      	movs	r0, #2
    3320:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    3322:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    3324:	f7ff fedc 	bl	30e0 <z_nrf_clock_control_lf_on>

	return 0;
}
    3328:	4628      	mov	r0, r5
    332a:	bd38      	pop	{r3, r4, r5, pc}
    332c:	40011000 	.word	0x40011000
    3330:	e000e100 	.word	0xe000e100
    3334:	20001e18 	.word	0x20001e18

00003338 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3338:	4a13      	ldr	r2, [pc, #76]	; (3388 <sys_clock_set_timeout+0x50>)
    333a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    333e:	bf14      	ite	ne
    3340:	4603      	movne	r3, r0
    3342:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3344:	3b01      	subs	r3, #1
    3346:	2b00      	cmp	r3, #0
    3348:	dd1c      	ble.n	3384 <sys_clock_set_timeout+0x4c>
    334a:	4293      	cmp	r3, r2
    334c:	bfa8      	it	ge
    334e:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    3350:	4a0e      	ldr	r2, [pc, #56]	; (338c <sys_clock_set_timeout+0x54>)
    3352:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    3356:	4a0e      	ldr	r2, [pc, #56]	; (3390 <sys_clock_set_timeout+0x58>)
    3358:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    335a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    335c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    3360:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    3364:	bf18      	it	ne
    3366:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3368:	3201      	adds	r2, #1
    336a:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    336c:	4a09      	ldr	r2, [pc, #36]	; (3394 <sys_clock_set_timeout+0x5c>)
    336e:	480a      	ldr	r0, [pc, #40]	; (3398 <sys_clock_set_timeout+0x60>)
    3370:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    3372:	2000      	movs	r0, #0
    3374:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    3376:	4a04      	ldr	r2, [pc, #16]	; (3388 <sys_clock_set_timeout+0x50>)
    3378:	4293      	cmp	r3, r2
    337a:	bf94      	ite	ls
    337c:	18c9      	addls	r1, r1, r3
    337e:	1889      	addhi	r1, r1, r2
    3380:	f7ff bf3a 	b.w	31f8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3384:	2300      	movs	r3, #0
    3386:	e7e3      	b.n	3350 <sys_clock_set_timeout+0x18>
    3388:	007fffff 	.word	0x007fffff
    338c:	40011000 	.word	0x40011000
    3390:	20001e1c 	.word	0x20001e1c
    3394:	20001e10 	.word	0x20001e10
    3398:	000031e1 	.word	0x000031e1

0000339c <sys_clock_elapsed>:
    339c:	4b04      	ldr	r3, [pc, #16]	; (33b0 <sys_clock_elapsed+0x14>)
    339e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    33a2:	4b04      	ldr	r3, [pc, #16]	; (33b4 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    33a4:	681b      	ldr	r3, [r3, #0]
    33a6:	1ac0      	subs	r0, r0, r3
}
    33a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33ac:	4770      	bx	lr
    33ae:	bf00      	nop
    33b0:	40011000 	.word	0x40011000
    33b4:	20001e1c 	.word	0x20001e1c

000033b8 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    33b8:	f04f 0320 	mov.w	r3, #32
    33bc:	f3ef 8211 	mrs	r2, BASEPRI
    33c0:	f383 8811 	msr	BASEPRI, r3
    33c4:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    33c8:	4906      	ldr	r1, [pc, #24]	; (33e4 <sys_clock_cycle_get_32+0x2c>)
    33ca:	4b07      	ldr	r3, [pc, #28]	; (33e8 <sys_clock_cycle_get_32+0x30>)
    33cc:	6808      	ldr	r0, [r1, #0]
    33ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    33d2:	f382 8811 	msr	BASEPRI, r2
    33d6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    33da:	1a1b      	subs	r3, r3, r0
    33dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    33e0:	4418      	add	r0, r3
    33e2:	4770      	bx	lr
    33e4:	20001e1c 	.word	0x20001e1c
    33e8:	40011000 	.word	0x40011000

000033ec <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    33ec:	4801      	ldr	r0, [pc, #4]	; (33f4 <nrf_cc3xx_platform_abort_init+0x8>)
    33ee:	f005 be33 	b.w	9058 <nrf_cc3xx_platform_set_abort>
    33f2:	bf00      	nop
    33f4:	0000c230 	.word	0x0000c230

000033f8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    33f8:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    33fa:	4604      	mov	r4, r0
    33fc:	b918      	cbnz	r0, 3406 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    33fe:	4b0d      	ldr	r3, [pc, #52]	; (3434 <mutex_free_platform+0x3c>)
    3400:	480d      	ldr	r0, [pc, #52]	; (3438 <mutex_free_platform+0x40>)
    3402:	685b      	ldr	r3, [r3, #4]
    3404:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3406:	6861      	ldr	r1, [r4, #4]
    3408:	2908      	cmp	r1, #8
    340a:	d00d      	beq.n	3428 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    340c:	f031 0304 	bics.w	r3, r1, #4
    3410:	d00a      	beq.n	3428 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3412:	f011 0102 	ands.w	r1, r1, #2
    3416:	d008      	beq.n	342a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3418:	4808      	ldr	r0, [pc, #32]	; (343c <mutex_free_platform+0x44>)
    341a:	4621      	mov	r1, r4
    341c:	f008 fa5d 	bl	b8da <k_mem_slab_free>
        mutex->mutex = NULL;
    3420:	2300      	movs	r3, #0
    3422:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3424:	2300      	movs	r3, #0
    3426:	6063      	str	r3, [r4, #4]
}
    3428:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    342a:	6820      	ldr	r0, [r4, #0]
    342c:	2214      	movs	r2, #20
    342e:	f007 fc00 	bl	ac32 <memset>
    3432:	e7f7      	b.n	3424 <mutex_free_platform+0x2c>
    3434:	2000013c 	.word	0x2000013c
    3438:	0000ca8b 	.word	0x0000ca8b
    343c:	20001e20 	.word	0x20001e20

00003440 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3440:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3442:	b308      	cbz	r0, 3488 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3444:	6843      	ldr	r3, [r0, #4]
    3446:	2b04      	cmp	r3, #4
    3448:	d110      	bne.n	346c <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    344a:	2201      	movs	r2, #1
    344c:	6803      	ldr	r3, [r0, #0]
    344e:	f3bf 8f5b 	dmb	ish
    3452:	e853 1f00 	ldrex	r1, [r3]
    3456:	2900      	cmp	r1, #0
    3458:	d103      	bne.n	3462 <mutex_lock_platform+0x22>
    345a:	e843 2000 	strex	r0, r2, [r3]
    345e:	2800      	cmp	r0, #0
    3460:	d1f7      	bne.n	3452 <mutex_lock_platform+0x12>
    3462:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3466:	d10b      	bne.n	3480 <mutex_lock_platform+0x40>
    3468:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    346a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    346c:	b153      	cbz	r3, 3484 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    346e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3478:	f004 ff7c 	bl	8374 <z_impl_k_mutex_lock>
        if (ret == 0) {
    347c:	2800      	cmp	r0, #0
    347e:	d0f3      	beq.n	3468 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3480:	4803      	ldr	r0, [pc, #12]	; (3490 <mutex_lock_platform+0x50>)
    3482:	e7f2      	b.n	346a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3484:	4803      	ldr	r0, [pc, #12]	; (3494 <mutex_lock_platform+0x54>)
    3486:	e7f0      	b.n	346a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3488:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    348c:	e7ed      	b.n	346a <mutex_lock_platform+0x2a>
    348e:	bf00      	nop
    3490:	ffff8fe9 	.word	0xffff8fe9
    3494:	ffff8fea 	.word	0xffff8fea

00003498 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3498:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    349a:	b1d0      	cbz	r0, 34d2 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    349c:	6843      	ldr	r3, [r0, #4]
    349e:	2b04      	cmp	r3, #4
    34a0:	d111      	bne.n	34c6 <mutex_unlock_platform+0x2e>
    34a2:	2200      	movs	r2, #0
    34a4:	6803      	ldr	r3, [r0, #0]
    34a6:	f3bf 8f5b 	dmb	ish
    34aa:	e853 1f00 	ldrex	r1, [r3]
    34ae:	2901      	cmp	r1, #1
    34b0:	d103      	bne.n	34ba <mutex_unlock_platform+0x22>
    34b2:	e843 2000 	strex	r0, r2, [r3]
    34b6:	2800      	cmp	r0, #0
    34b8:	d1f7      	bne.n	34aa <mutex_unlock_platform+0x12>
    34ba:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    34be:	4807      	ldr	r0, [pc, #28]	; (34dc <mutex_unlock_platform+0x44>)
    34c0:	bf08      	it	eq
    34c2:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    34c4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    34c6:	b13b      	cbz	r3, 34d8 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    34c8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    34ca:	f004 ffcb 	bl	8464 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    34ce:	2000      	movs	r0, #0
    34d0:	e7f8      	b.n	34c4 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    34d2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    34d6:	e7f5      	b.n	34c4 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    34d8:	4801      	ldr	r0, [pc, #4]	; (34e0 <mutex_unlock_platform+0x48>)
    34da:	e7f3      	b.n	34c4 <mutex_unlock_platform+0x2c>
    34dc:	ffff8fe9 	.word	0xffff8fe9
    34e0:	ffff8fea 	.word	0xffff8fea

000034e4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    34e4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    34e6:	4604      	mov	r4, r0
    34e8:	b918      	cbnz	r0, 34f2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    34ea:	4b16      	ldr	r3, [pc, #88]	; (3544 <mutex_init_platform+0x60>)
    34ec:	4816      	ldr	r0, [pc, #88]	; (3548 <mutex_init_platform+0x64>)
    34ee:	685b      	ldr	r3, [r3, #4]
    34f0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    34f2:	6863      	ldr	r3, [r4, #4]
    34f4:	2b04      	cmp	r3, #4
    34f6:	d023      	beq.n	3540 <mutex_init_platform+0x5c>
    34f8:	2b08      	cmp	r3, #8
    34fa:	d021      	beq.n	3540 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    34fc:	b9cb      	cbnz	r3, 3532 <mutex_init_platform+0x4e>
    34fe:	6823      	ldr	r3, [r4, #0]
    3500:	b9bb      	cbnz	r3, 3532 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3502:	4812      	ldr	r0, [pc, #72]	; (354c <mutex_init_platform+0x68>)
    3504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    350c:	4621      	mov	r1, r4
    350e:	f004 fe35 	bl	817c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3512:	b908      	cbnz	r0, 3518 <mutex_init_platform+0x34>
    3514:	6823      	ldr	r3, [r4, #0]
    3516:	b91b      	cbnz	r3, 3520 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3518:	4b0a      	ldr	r3, [pc, #40]	; (3544 <mutex_init_platform+0x60>)
    351a:	480d      	ldr	r0, [pc, #52]	; (3550 <mutex_init_platform+0x6c>)
    351c:	685b      	ldr	r3, [r3, #4]
    351e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3520:	6820      	ldr	r0, [r4, #0]
    3522:	2214      	movs	r2, #20
    3524:	2100      	movs	r1, #0
    3526:	f007 fb84 	bl	ac32 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    352a:	6863      	ldr	r3, [r4, #4]
    352c:	f043 0302 	orr.w	r3, r3, #2
    3530:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    3532:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3534:	f008 fa14 	bl	b960 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3538:	6863      	ldr	r3, [r4, #4]
    353a:	f043 0301 	orr.w	r3, r3, #1
    353e:	6063      	str	r3, [r4, #4]
}
    3540:	bd10      	pop	{r4, pc}
    3542:	bf00      	nop
    3544:	2000013c 	.word	0x2000013c
    3548:	0000ca8b 	.word	0x0000ca8b
    354c:	20001e20 	.word	0x20001e20
    3550:	0000cab1 	.word	0x0000cab1

00003554 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3554:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3556:	4906      	ldr	r1, [pc, #24]	; (3570 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3558:	4806      	ldr	r0, [pc, #24]	; (3574 <nrf_cc3xx_platform_mutex_init+0x20>)
    355a:	2340      	movs	r3, #64	; 0x40
    355c:	2214      	movs	r2, #20
    355e:	f008 f9a1 	bl	b8a4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3566:	4904      	ldr	r1, [pc, #16]	; (3578 <nrf_cc3xx_platform_mutex_init+0x24>)
    3568:	4804      	ldr	r0, [pc, #16]	; (357c <nrf_cc3xx_platform_mutex_init+0x28>)
    356a:	f005 bdd7 	b.w	911c <nrf_cc3xx_platform_set_mutexes>
    356e:	bf00      	nop
    3570:	20001e3c 	.word	0x20001e3c
    3574:	20001e20 	.word	0x20001e20
    3578:	0000c248 	.word	0x0000c248
    357c:	0000c238 	.word	0x0000c238

00003580 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    3580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    3582:	4e27      	ldr	r6, [pc, #156]	; (3620 <boot_uart_fifo_callback+0xa0>)
    3584:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    3586:	6883      	ldr	r3, [r0, #8]
    3588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    358a:	b103      	cbz	r3, 358e <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    358c:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    358e:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    3590:	6883      	ldr	r3, [r0, #8]
    3592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3594:	b9d3      	cbnz	r3, 35cc <boot_uart_fifo_callback+0x4c>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    3596:	4c23      	ldr	r4, [pc, #140]	; (3624 <boot_uart_fifo_callback+0xa4>)
	return list->head;
    3598:	4d23      	ldr	r5, [pc, #140]	; (3628 <boot_uart_fifo_callback+0xa8>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    359a:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read != NULL) {
    359c:	6883      	ldr	r3, [r0, #8]
    359e:	699b      	ldr	r3, [r3, #24]
    35a0:	b1bb      	cbz	r3, 35d2 <boot_uart_fifo_callback+0x52>
		return api->fifo_read(dev, rx_data, size);
    35a2:	2201      	movs	r2, #1
    35a4:	f10d 0107 	add.w	r1, sp, #7
    35a8:	4798      	blx	r3
		if (rx != 1) {
    35aa:	2801      	cmp	r0, #1
    35ac:	d111      	bne.n	35d2 <boot_uart_fifo_callback+0x52>
		if (!cmd) {
    35ae:	6823      	ldr	r3, [r4, #0]
    35b0:	b9c3      	cbnz	r3, 35e4 <boot_uart_fifo_callback+0x64>
    35b2:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    35b4:	b97b      	cbnz	r3, 35d6 <boot_uart_fifo_callback+0x56>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    35b6:	4b1d      	ldr	r3, [pc, #116]	; (362c <boot_uart_fifo_callback+0xac>)
    35b8:	491d      	ldr	r1, [pc, #116]	; (3630 <boot_uart_fifo_callback+0xb0>)
			sys_snode_t *node;

			node = sys_slist_get(&avail_queue);
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
    35ba:	481e      	ldr	r0, [pc, #120]	; (3634 <boot_uart_fifo_callback+0xb4>)
    35bc:	1ac9      	subs	r1, r1, r3
    35be:	08c9      	lsrs	r1, r1, #3
    35c0:	0189      	lsls	r1, r1, #6
    35c2:	f041 0101 	orr.w	r1, r1, #1
    35c6:	f006 fba5 	bl	9d14 <log_0>
					     " incoming data!");
				return;
    35ca:	e002      	b.n	35d2 <boot_uart_fifo_callback+0x52>
	return api->irq_rx_ready(dev);
    35cc:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    35ce:	2800      	cmp	r0, #0
    35d0:	d1e1      	bne.n	3596 <boot_uart_fifo_callback+0x16>
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
			cmd = NULL;
		}
	}
}
    35d2:	b003      	add	sp, #12
    35d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    35d6:	6869      	ldr	r1, [r5, #4]
	return node->next;
    35d8:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    35da:	602a      	str	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    35dc:	428b      	cmp	r3, r1
    35de:	d100      	bne.n	35e2 <boot_uart_fifo_callback+0x62>
	list->tail = node;
    35e0:	606a      	str	r2, [r5, #4]
			cmd = CONTAINER_OF(node, struct line_input, node);
    35e2:	6023      	str	r3, [r4, #0]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    35e4:	4a14      	ldr	r2, [pc, #80]	; (3638 <boot_uart_fifo_callback+0xb8>)
			cmd->line[cur++] = byte;
    35e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    35ea:	8811      	ldrh	r1, [r2, #0]
    35ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    35f0:	d204      	bcs.n	35fc <boot_uart_fifo_callback+0x7c>
			cmd->line[cur++] = byte;
    35f2:	6823      	ldr	r3, [r4, #0]
    35f4:	440b      	add	r3, r1
    35f6:	1c4f      	adds	r7, r1, #1
    35f8:	8017      	strh	r7, [r2, #0]
    35fa:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    35fc:	280a      	cmp	r0, #10
    35fe:	d1cc      	bne.n	359a <boot_uart_fifo_callback+0x1a>
			cmd->len = cur;
    3600:	6823      	ldr	r3, [r4, #0]
    3602:	8811      	ldrh	r1, [r2, #0]
    3604:	6059      	str	r1, [r3, #4]
	return list->tail;
    3606:	490d      	ldr	r1, [pc, #52]	; (363c <boot_uart_fifo_callback+0xbc>)
    3608:	684d      	ldr	r5, [r1, #4]
	parent->next = child;
    360a:	2000      	movs	r0, #0
    360c:	6018      	str	r0, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    360e:	b925      	cbnz	r5, 361a <boot_uart_fifo_callback+0x9a>
	list->head = node;
    3610:	e9c1 3300 	strd	r3, r3, [r1]
			cur = 0;
    3614:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    3616:	6020      	str	r0, [r4, #0]
    3618:	e7be      	b.n	3598 <boot_uart_fifo_callback+0x18>
	parent->next = child;
    361a:	602b      	str	r3, [r5, #0]
	list->tail = node;
    361c:	604b      	str	r3, [r1, #4]
}
    361e:	e7f9      	b.n	3614 <boot_uart_fifo_callback+0x94>
    3620:	20002764 	.word	0x20002764
    3624:	20002344 	.word	0x20002344
    3628:	2000233c 	.word	0x2000233c
    362c:	0000bee4 	.word	0x0000bee4
    3630:	0000bf2c 	.word	0x0000bf2c
    3634:	0000cade 	.word	0x0000cade
    3638:	200029dc 	.word	0x200029dc
    363c:	2000275c 	.word	0x2000275c

00003640 <console_out>:
	uart_poll_out(uart_dev, c);
    3640:	4b04      	ldr	r3, [pc, #16]	; (3654 <console_out+0x14>)
{
    3642:	b510      	push	{r4, lr}
    3644:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    3646:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    3648:	6883      	ldr	r3, [r0, #8]
    364a:	b2e1      	uxtb	r1, r4
    364c:	685b      	ldr	r3, [r3, #4]
    364e:	4798      	blx	r3
}
    3650:	4620      	mov	r0, r4
    3652:	bd10      	pop	{r4, pc}
    3654:	20002764 	.word	0x20002764

00003658 <console_read>:
{
    3658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    365a:	4606      	mov	r6, r0
    365c:	460b      	mov	r3, r1
    365e:	4615      	mov	r5, r2
	__asm__ volatile(
    3660:	f04f 0220 	mov.w	r2, #32
    3664:	f3ef 8c11 	mrs	ip, BASEPRI
    3668:	f382 8811 	msr	BASEPRI, r2
    366c:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    3670:	4818      	ldr	r0, [pc, #96]	; (36d4 <console_read+0x7c>)
    3672:	6801      	ldr	r1, [r0, #0]
    3674:	b141      	cbz	r1, 3688 <console_read+0x30>
	return list->tail;
    3676:	4a18      	ldr	r2, [pc, #96]	; (36d8 <console_read+0x80>)
    3678:	6854      	ldr	r4, [r2, #4]
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    367a:	428c      	cmp	r4, r1
    367c:	d004      	beq.n	3688 <console_read+0x30>
	parent->next = child;
    367e:	2700      	movs	r7, #0
    3680:	600f      	str	r7, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
    3682:	b99c      	cbnz	r4, 36ac <console_read+0x54>
	list->head = node;
    3684:	e9c2 1100 	strd	r1, r1, [r2]
	return list->head;
    3688:	4a14      	ldr	r2, [pc, #80]	; (36dc <console_read+0x84>)
    368a:	6811      	ldr	r1, [r2, #0]
Z_GENLIST_GET(slist, snode)
    368c:	b129      	cbz	r1, 369a <console_read+0x42>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    368e:	6857      	ldr	r7, [r2, #4]
	return node->next;
    3690:	680c      	ldr	r4, [r1, #0]
	list->head = node;
    3692:	6014      	str	r4, [r2, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3694:	42b9      	cmp	r1, r7
	list->tail = node;
    3696:	bf08      	it	eq
    3698:	6054      	streq	r4, [r2, #4]
	__asm__ volatile(
    369a:	f38c 8811 	msr	BASEPRI, ip
    369e:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    36a2:	6001      	str	r1, [r0, #0]
	if (node == NULL) {
    36a4:	b929      	cbnz	r1, 36b2 <console_read+0x5a>
		*newline = 0;
    36a6:	2000      	movs	r0, #0
    36a8:	6028      	str	r0, [r5, #0]
}
    36aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    36ac:	6021      	str	r1, [r4, #0]
	list->tail = node;
    36ae:	6051      	str	r1, [r2, #4]
}
    36b0:	e7ea      	b.n	3688 <console_read+0x30>
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    36b2:	6848      	ldr	r0, [r1, #4]
	if (line == NULL) {
    36b4:	3108      	adds	r1, #8
    36b6:	d0f6      	beq.n	36a6 <console_read+0x4e>
	if (len > str_size - 1) {
    36b8:	1e5c      	subs	r4, r3, #1
    36ba:	4284      	cmp	r4, r0
    36bc:	bfa8      	it	ge
    36be:	4604      	movge	r4, r0
	memcpy(str, line, len);
    36c0:	4622      	mov	r2, r4
    36c2:	4630      	mov	r0, r6
    36c4:	f007 faaa 	bl	ac1c <memcpy>
	str[len] = '\0';
    36c8:	2300      	movs	r3, #0
    36ca:	5533      	strb	r3, [r6, r4]
	*newline = 1;
    36cc:	2301      	movs	r3, #1
    36ce:	602b      	str	r3, [r5, #0]
	return len + 1;
    36d0:	18e0      	adds	r0, r4, r3
    36d2:	e7ea      	b.n	36aa <console_read+0x52>
    36d4:	20002348 	.word	0x20002348
    36d8:	2000233c 	.word	0x2000233c
    36dc:	2000275c 	.word	0x2000275c

000036e0 <boot_console_init>:
	list->head = NULL;
    36e0:	4b1d      	ldr	r3, [pc, #116]	; (3758 <boot_console_init+0x78>)
{
    36e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    36e4:	2400      	movs	r4, #0
	list->tail = NULL;
    36e6:	e9c3 4400 	strd	r4, r4, [r3]
	list->head = node;
    36ea:	4b1c      	ldr	r3, [pc, #112]	; (375c <boot_console_init+0x7c>)
    36ec:	4a1c      	ldr	r2, [pc, #112]	; (3760 <boot_console_init+0x80>)
	parent->next = child;
    36ee:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    36f2:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    36f6:	6013      	str	r3, [r2, #0]
	parent->next = child;
    36f8:	6019      	str	r1, [r3, #0]
	list->tail = node;
    36fa:	6051      	str	r1, [r2, #4]
    36fc:	4819      	ldr	r0, [pc, #100]	; (3764 <boot_console_init+0x84>)

static int
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = device_get_binding(CONFIG_RECOVERY_UART_DEV_NAME);
    36fe:	4d1a      	ldr	r5, [pc, #104]	; (3768 <boot_console_init+0x88>)
    3700:	f004 fbcc 	bl	7e9c <z_impl_device_get_binding>
    3704:	6028      	str	r0, [r5, #0]
		}
	}
#endif
	uint8_t c;

	if (!uart_dev) {
    3706:	b318      	cbz	r0, 3750 <boot_console_init+0x70>
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3708:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    370a:	b123      	cbz	r3, 3716 <boot_console_init+0x36>
    370c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    370e:	b113      	cbz	r3, 3716 <boot_console_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
    3710:	4916      	ldr	r1, [pc, #88]	; (376c <boot_console_init+0x8c>)
    3712:	4622      	mov	r2, r4
    3714:	4798      	blx	r3
	}

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    3716:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready == NULL) {
    3718:	6883      	ldr	r3, [r0, #8]
    371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    371c:	b15b      	cbz	r3, 3736 <boot_console_init+0x56>
	return api->irq_rx_ready(dev);
    371e:	4798      	blx	r3
    3720:	b948      	cbnz	r0, 3736 <boot_console_init+0x56>
		while (uart_fifo_read(uart_dev, &c, 1)) {
			;
		}
	}

	cur = 0;
    3722:	4b13      	ldr	r3, [pc, #76]	; (3770 <boot_console_init+0x90>)

	uart_irq_rx_enable(uart_dev);
    3724:	6828      	ldr	r0, [r5, #0]
	cur = 0;
    3726:	2400      	movs	r4, #0
    3728:	801c      	strh	r4, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    372a:	6883      	ldr	r3, [r0, #8]
    372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    372e:	b963      	cbnz	r3, 374a <boot_console_init+0x6a>

	return 0;
    3730:	4618      	mov	r0, r3
}
    3732:	b003      	add	sp, #12
    3734:	bd30      	pop	{r4, r5, pc}
		while (uart_fifo_read(uart_dev, &c, 1)) {
    3736:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read != NULL) {
    3738:	6883      	ldr	r3, [r0, #8]
    373a:	699b      	ldr	r3, [r3, #24]
    373c:	2b00      	cmp	r3, #0
    373e:	d0f0      	beq.n	3722 <boot_console_init+0x42>
		return api->fifo_read(dev, rx_data, size);
    3740:	2201      	movs	r2, #1
    3742:	f10d 0107 	add.w	r1, sp, #7
    3746:	4798      	blx	r3
    3748:	e7ea      	b.n	3720 <boot_console_init+0x40>
		api->irq_rx_enable(dev);
    374a:	4798      	blx	r3
	return 0;
    374c:	4620      	mov	r0, r4
    374e:	e7f0      	b.n	3732 <boot_console_init+0x52>
		return (-1);
    3750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return boot_uart_fifo_init();
    3754:	e7ed      	b.n	3732 <boot_console_init+0x52>
    3756:	bf00      	nop
    3758:	2000275c 	.word	0x2000275c
    375c:	2000234c 	.word	0x2000234c
    3760:	2000233c 	.word	0x2000233c
    3764:	0000cb08 	.word	0x0000cb08
    3768:	20002764 	.word	0x20002764
    376c:	00003581 	.word	0x00003581
    3770:	200029dc 	.word	0x200029dc

00003774 <boot_serial_output>:
    }
}

static void
boot_serial_output(void)
{
    3774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3778:	b0d2      	sub	sp, #328	; 0x148
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    377a:	f640 1306 	movw	r3, #2310	; 0x906
    377e:	f8ad 300c 	strh.w	r3, [sp, #12]
    char buf[BOOT_SERIAL_OUT_MAX];
    char encoded_buf[BASE64_ENCODE_SIZE(BOOT_SERIAL_OUT_MAX)];

    data = bs_obuf;
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    3782:	4b40      	ldr	r3, [pc, #256]	; (3884 <boot_serial_output+0x110>)

    bs_hdr->nh_op++;
    3784:	f8df 8100 	ldr.w	r8, [pc, #256]	; 3888 <boot_serial_output+0x114>
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    3788:	681c      	ldr	r4, [r3, #0]
    378a:	4f40      	ldr	r7, [pc, #256]	; (388c <boot_serial_output+0x118>)
    bs_hdr->nh_op++;
    378c:	f8d8 0000 	ldr.w	r0, [r8]
    crc = crc16_ccitt(CRC16_INITIAL_CRC, bs_hdr, sizeof(*bs_hdr));
    crc = crc16_ccitt(crc, data, len);
#endif
    crc = htons(crc);

    boot_uf->write(pkt_start, sizeof(pkt_start));
    3790:	4e3f      	ldr	r6, [pc, #252]	; (3890 <boot_serial_output+0x11c>)
    bs_hdr->nh_op++;
    3792:	7803      	ldrb	r3, [r0, #0]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    3794:	1be4      	subs	r4, r4, r7
    bs_hdr->nh_len = htons(len);
    3796:	ba62      	rev16	r2, r4
    3798:	8042      	strh	r2, [r0, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    379a:	8882      	ldrh	r2, [r0, #4]
    bs_hdr->nh_op++;
    379c:	3301      	adds	r3, #1
    379e:	7003      	strb	r3, [r0, #0]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    37a0:	ba52      	rev16	r2, r2
    bs_hdr->nh_flags = 0;
    37a2:	2300      	movs	r3, #0
    37a4:	7043      	strb	r3, [r0, #1]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    37a6:	8082      	strh	r2, [r0, #4]
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    37a8:	2108      	movs	r1, #8
    37aa:	9300      	str	r3, [sp, #0]
    37ac:	f241 0221 	movw	r2, #4129	; 0x1021
    37b0:	f006 f8dd 	bl	996e <crc16>
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    37b4:	2201      	movs	r2, #1
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    37b6:	4603      	mov	r3, r0
    37b8:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    37bc:	9200      	str	r2, [sp, #0]
    37be:	4621      	mov	r1, r4
    37c0:	f241 0221 	movw	r2, #4129	; 0x1021
    37c4:	4638      	mov	r0, r7
    37c6:	f006 f8d2 	bl	996e <crc16>
    boot_uf->write(pkt_start, sizeof(pkt_start));
    37ca:	6833      	ldr	r3, [r6, #0]
    37cc:	b2a5      	uxth	r5, r4
    crc = htons(crc);
    37ce:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    37d0:	685b      	ldr	r3, [r3, #4]
    crc = htons(crc);
    37d2:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    37d6:	2102      	movs	r1, #2
    37d8:	a803      	add	r0, sp, #12

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    37da:	350a      	adds	r5, #10
    boot_uf->write(pkt_start, sizeof(pkt_start));
    37dc:	4798      	blx	r3
    totlen = htons(totlen);
    37de:	ba6d      	rev16	r5, r5

    memcpy(buf, &totlen, sizeof(totlen));
    37e0:	f10d 0112 	add.w	r1, sp, #18
    37e4:	2202      	movs	r2, #2
    37e6:	a806      	add	r0, sp, #24
    totlen = htons(totlen);
    37e8:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    37ec:	f007 fa16 	bl	ac1c <memcpy>
    totlen = sizeof(totlen);
    37f0:	2502      	movs	r5, #2
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    37f2:	f8d8 1000 	ldr.w	r1, [r8]
    totlen = sizeof(totlen);
    37f6:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    37fa:	2208      	movs	r2, #8
    37fc:	f10d 001a 	add.w	r0, sp, #26
    3800:	f007 fa0c 	bl	ac1c <memcpy>
    totlen += sizeof(*bs_hdr);
    3804:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    3808:	3008      	adds	r0, #8
    memcpy(&buf[totlen], data, len);
    380a:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    380c:	b280      	uxth	r0, r0
    380e:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    3812:	4622      	mov	r2, r4
    3814:	4639      	mov	r1, r7
    3816:	4418      	add	r0, r3
    3818:	f007 fa00 	bl	ac1c <memcpy>
    totlen += len;
    381c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    3820:	4420      	add	r0, r4
    memcpy(&buf[totlen], &crc, sizeof(crc));
    3822:	ab06      	add	r3, sp, #24
    totlen += len;
    3824:	b280      	uxth	r0, r0
    3826:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    382a:	462a      	mov	r2, r5
    382c:	a904      	add	r1, sp, #16
    382e:	4418      	add	r0, r3
    3830:	f007 f9f4 	bl	ac1c <memcpy>
    totlen += sizeof(crc);
    3834:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    3838:	442b      	add	r3, r5
    383a:	b29b      	uxth	r3, r3
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    383c:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    383e:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    3842:	9300      	str	r3, [sp, #0]
    3844:	21ad      	movs	r1, #173	; 0xad
    3846:	ab06      	add	r3, sp, #24
    3848:	a826      	add	r0, sp, #152	; 0x98
    384a:	f7fd ff0d 	bl	1668 <base64_encode>
    totlen = enc_len;
    384e:	9905      	ldr	r1, [sp, #20]
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    3850:	6833      	ldr	r3, [r6, #0]
    totlen = enc_len;
    3852:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    3856:	a826      	add	r0, sp, #152	; 0x98
    3858:	685b      	ldr	r3, [r3, #4]
    385a:	b289      	uxth	r1, r1
    385c:	4798      	blx	r3
    boot_uf->write("\n\r", 2);
    385e:	6833      	ldr	r3, [r6, #0]
    3860:	480c      	ldr	r0, [pc, #48]	; (3894 <boot_serial_output+0x120>)
    3862:	685b      	ldr	r3, [r3, #4]
    3864:	4629      	mov	r1, r5
    3866:	4798      	blx	r3
    3868:	4b0b      	ldr	r3, [pc, #44]	; (3898 <boot_serial_output+0x124>)
    386a:	490c      	ldr	r1, [pc, #48]	; (389c <boot_serial_output+0x128>)
    BOOT_LOG_INF("TX");
    386c:	480c      	ldr	r0, [pc, #48]	; (38a0 <boot_serial_output+0x12c>)
    386e:	1ac9      	subs	r1, r1, r3
    3870:	08c9      	lsrs	r1, r1, #3
    3872:	0189      	lsls	r1, r1, #6
    3874:	f041 0103 	orr.w	r1, r1, #3
    3878:	f006 fa4c 	bl	9d14 <log_0>
}
    387c:	b052      	add	sp, #328	; 0x148
    387e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3882:	bf00      	nop
    3884:	20000038 	.word	0x20000038
    3888:	2000276c 	.word	0x2000276c
    388c:	20002af4 	.word	0x20002af4
    3890:	20002768 	.word	0x20002768
    3894:	0000cb34 	.word	0x0000cb34
    3898:	0000bee4 	.word	0x0000bee4
    389c:	0000bf04 	.word	0x0000bf04
    38a0:	0000cb37 	.word	0x0000cb37

000038a4 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    38a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    38a8:	680c      	ldr	r4, [r1, #0]
    38aa:	4f1a      	ldr	r7, [pc, #104]	; (3914 <boot_serial_in_dec.constprop.0+0x70>)
    38ac:	4b1a      	ldr	r3, [pc, #104]	; (3918 <boot_serial_in_dec.constprop.0+0x74>)
    38ae:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    38b0:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    38b2:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    38b6:	9000      	str	r0, [sp, #0]
    38b8:	aa03      	add	r2, sp, #12
    38ba:	1938      	adds	r0, r7, r4
    38bc:	3101      	adds	r1, #1
    38be:	f7fd ff55 	bl	176c <base64_decode>
    if (err) {
    38c2:	4604      	mov	r4, r0
    38c4:	bb18      	cbnz	r0, 390e <boot_serial_in_dec.constprop.0+0x6a>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    38c6:	682b      	ldr	r3, [r5, #0]
    38c8:	9a03      	ldr	r2, [sp, #12]
    38ca:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    38cc:	2b02      	cmp	r3, #2
    *out_off += rc;
    38ce:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    38d0:	d919      	bls.n	3906 <boot_serial_in_dec.constprop.0+0x62>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    38d2:	883e      	ldrh	r6, [r7, #0]
    38d4:	ba76      	rev16	r6, r6
    38d6:	b2b6      	uxth	r6, r6
    if (len != *out_off - sizeof(uint16_t)) {
    38d8:	3b02      	subs	r3, #2
    38da:	429e      	cmp	r6, r3
    38dc:	d113      	bne.n	3906 <boot_serial_in_dec.constprop.0+0x62>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16(out, len, CRC_CITT_POLYMINAL, CRC16_INITIAL_CRC, true);
    38de:	f04f 0801 	mov.w	r8, #1
    38e2:	4603      	mov	r3, r0
    38e4:	f8cd 8000 	str.w	r8, [sp]
    38e8:	f241 0221 	movw	r2, #4129	; 0x1021
    38ec:	4631      	mov	r1, r6
    38ee:	1cb8      	adds	r0, r7, #2
    38f0:	f006 f83d 	bl	996e <crc16>
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    38f4:	b938      	cbnz	r0, 3906 <boot_serial_in_dec.constprop.0+0x62>
    38f6:	2e02      	cmp	r6, #2
    38f8:	d905      	bls.n	3906 <boot_serial_in_dec.constprop.0+0x62>
        return 0;
    }
    *out_off -= sizeof(crc);
    38fa:	682b      	ldr	r3, [r5, #0]
    38fc:	3b02      	subs	r3, #2
    out[*out_off] = '\0';
    38fe:	441f      	add	r7, r3
    *out_off -= sizeof(crc);
    3900:	602b      	str	r3, [r5, #0]
    out[*out_off] = '\0';
    3902:	70bc      	strb	r4, [r7, #2]

    return 1;
    3904:	4644      	mov	r4, r8
}
    3906:	4620      	mov	r0, r4
    3908:	b004      	add	sp, #16
    390a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    390e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3912:	e7f8      	b.n	3906 <boot_serial_in_dec.constprop.0+0x62>
    3914:	20002b74 	.word	0x20002b74
    3918:	20002d77 	.word	0x20002d77

0000391c <bs_empty_rsp.constprop.0>:
bs_empty_rsp(char *buf, int len)
    391c:	b513      	push	{r0, r1, r4, lr}
    map_start_encode(&cbor_state, 10);
    391e:	4c0d      	ldr	r4, [pc, #52]	; (3954 <bs_empty_rsp.constprop.0+0x38>)
    3920:	210a      	movs	r1, #10
    3922:	4620      	mov	r0, r4
    3924:	f007 f875 	bl	aa12 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    3928:	4a0b      	ldr	r2, [pc, #44]	; (3958 <bs_empty_rsp.constprop.0+0x3c>)
    392a:	e892 0003 	ldmia.w	r2, {r0, r1}
    392e:	466b      	mov	r3, sp
    3930:	e883 0003 	stmia.w	r3, {r0, r1}
    3934:	4619      	mov	r1, r3
    3936:	4620      	mov	r0, r4
    3938:	f007 f85c 	bl	a9f4 <tstrx_encode>
    uintx32_put(&cbor_state, 0);
    393c:	2100      	movs	r1, #0
    393e:	4620      	mov	r0, r4
    3940:	f007 f84f 	bl	a9e2 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    3944:	210a      	movs	r1, #10
    3946:	4620      	mov	r0, r4
    3948:	f007 f87e 	bl	aa48 <map_end_encode>
    boot_serial_output();
    394c:	f7ff ff12 	bl	3774 <boot_serial_output>
}
    3950:	b002      	add	sp, #8
    3952:	bd10      	pop	{r4, pc}
    3954:	20000038 	.word	0x20000038
    3958:	0000bfc0 	.word	0x0000bfc0

0000395c <boot_serial_input>:
{
    395c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (len < sizeof(*hdr) ||
    3960:	2907      	cmp	r1, #7
{
    3962:	b0a9      	sub	sp, #164	; 0xa4
    if (len < sizeof(*hdr) ||
    3964:	f240 80b1 	bls.w	3aca <boot_serial_input+0x16e>
    3968:	7806      	ldrb	r6, [r0, #0]
    396a:	f016 06fd 	ands.w	r6, r6, #253	; 0xfd
    396e:	f040 80ac 	bne.w	3aca <boot_serial_input+0x16e>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    3972:	8843      	ldrh	r3, [r0, #2]
    3974:	ba5b      	rev16	r3, r3
    3976:	f1a1 0708 	sub.w	r7, r1, #8
    397a:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    397c:	42bb      	cmp	r3, r7
    397e:	f0c0 80a4 	bcc.w	3aca <boot_serial_input+0x16e>
    bs_hdr = hdr;
    3982:	4ba2      	ldr	r3, [pc, #648]	; (3c0c <FIH_LABEL_FIH_CALL_END_988+0x11c>)
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    3984:	4ca2      	ldr	r4, [pc, #648]	; (3c10 <FIH_LABEL_FIH_CALL_END_988+0x120>)
    bs_hdr = hdr;
    3986:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    3988:	8883      	ldrh	r3, [r0, #4]
    398a:	ba5b      	rev16	r3, r3
    398c:	b299      	uxth	r1, r3
    398e:	8083      	strh	r3, [r0, #4]
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    3990:	4ba0      	ldr	r3, [pc, #640]	; (3c14 <FIH_LABEL_FIH_CALL_END_988+0x124>)
    3992:	6023      	str	r3, [r4, #0]
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    3994:	2901      	cmp	r1, #1
    cbor_state.payload_end = (const uint8_t *)bs_obuf
    3996:	f103 0380 	add.w	r3, r3, #128	; 0x80
    399a:	60e3      	str	r3, [r4, #12]
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    399c:	f040 8208 	bne.w	3db0 <FIH_LABEL_FIH_CALL_END_988+0x2c0>
        switch (hdr->nh_id) {
    39a0:	79c5      	ldrb	r5, [r0, #7]
    39a2:	b13d      	cbz	r5, 39b4 <boot_serial_input+0x58>
    39a4:	2d01      	cmp	r5, #1
    39a6:	f000 80a4 	beq.w	3af2 <FIH_LABEL_FIH_CALL_END_988+0x2>
}
    39aa:	b029      	add	sp, #164	; 0xa4
    39ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            bs_empty_rsp(buf, len);
    39b0:	f7ff bfb4 	b.w	391c <bs_empty_rsp.constprop.0>
    map_start_encode(&cbor_state, 1);
    39b4:	4620      	mov	r0, r4
    39b6:	f007 f82c 	bl	aa12 <map_start_encode>
    tstrx_put(&cbor_state, "images");
    39ba:	4b97      	ldr	r3, [pc, #604]	; (3c18 <FIH_LABEL_FIH_CALL_END_988+0x128>)
    39bc:	9308      	str	r3, [sp, #32]
    39be:	a908      	add	r1, sp, #32
    39c0:	2306      	movs	r3, #6
    39c2:	4620      	mov	r0, r4
    39c4:	9309      	str	r3, [sp, #36]	; 0x24
    39c6:	f007 f815 	bl	a9f4 <tstrx_encode>
    list_start_encode(&cbor_state, 5);
    39ca:	2105      	movs	r1, #5
    39cc:	4620      	mov	r0, r4
    39ce:	f007 f814 	bl	a9fa <list_start_encode>
            if (hdr.ih_magic == IMAGE_MAGIC)
    39d2:	4f92      	ldr	r7, [pc, #584]	; (3c1c <FIH_LABEL_FIH_CALL_END_988+0x12c>)
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    39d4:	f8df 8248 	ldr.w	r8, [pc, #584]	; 3c20 <FIH_LABEL_FIH_CALL_END_988+0x130>
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    39d8:	4629      	mov	r1, r5
    39da:	2000      	movs	r0, #0
    39dc:	f005 fccf 	bl	937e <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    39e0:	a907      	add	r1, sp, #28
    39e2:	b2c0      	uxtb	r0, r0
    39e4:	f7ff f97e 	bl	2ce4 <flash_area_open>
    39e8:	4606      	mov	r6, r0
    39ea:	2800      	cmp	r0, #0
    39ec:	d162      	bne.n	3ab4 <boot_serial_input+0x158>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    39ee:	2320      	movs	r3, #32
    39f0:	4601      	mov	r1, r0
    39f2:	aa10      	add	r2, sp, #64	; 0x40
    39f4:	9807      	ldr	r0, [sp, #28]
    39f6:	f006 fd0a 	bl	a40e <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    39fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    39fc:	42bb      	cmp	r3, r7
    39fe:	d069      	beq.n	3ad4 <FIH_LABEL_FIH_CALL_START_958>
            fih_int fih_rc = FIH_FAILURE;
    3a00:	4b88      	ldr	r3, [pc, #544]	; (3c24 <FIH_LABEL_FIH_CALL_END_988+0x134>)
    3a02:	681e      	ldr	r6, [r3, #0]
            flash_area_close(fap);
    3a04:	9807      	ldr	r0, [sp, #28]
    3a06:	f006 fd01 	bl	a40c <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    3a0a:	f8d8 3000 	ldr.w	r3, [r8]
    3a0e:	42b3      	cmp	r3, r6
    3a10:	d150      	bne.n	3ab4 <boot_serial_input+0x158>
            map_start_encode(&cbor_state, 20);
    3a12:	2114      	movs	r1, #20
    3a14:	4620      	mov	r0, r4
    3a16:	f006 fffc 	bl	aa12 <map_start_encode>
            tstrx_put(&cbor_state, "slot");
    3a1a:	4b83      	ldr	r3, [pc, #524]	; (3c28 <FIH_LABEL_FIH_CALL_END_988+0x138>)
    3a1c:	930a      	str	r3, [sp, #40]	; 0x28
    3a1e:	a90a      	add	r1, sp, #40	; 0x28
    3a20:	2304      	movs	r3, #4
    3a22:	4620      	mov	r0, r4
    3a24:	930b      	str	r3, [sp, #44]	; 0x2c
    3a26:	f006 ffe5 	bl	a9f4 <tstrx_encode>
            uintx32_put(&cbor_state, slot);
    3a2a:	4629      	mov	r1, r5
    3a2c:	4620      	mov	r0, r4
    3a2e:	f006 ffd8 	bl	a9e2 <uintx32_put>
            tstrx_put(&cbor_state, "version");
    3a32:	4b7e      	ldr	r3, [pc, #504]	; (3c2c <FIH_LABEL_FIH_CALL_END_988+0x13c>)
    3a34:	930c      	str	r3, [sp, #48]	; 0x30
    off = u32toa(dst, ver->iv_major);
    3a36:	f10d 0960 	add.w	r9, sp, #96	; 0x60
            tstrx_put(&cbor_state, "version");
    3a3a:	2307      	movs	r3, #7
    3a3c:	a90c      	add	r1, sp, #48	; 0x30
    3a3e:	4620      	mov	r0, r4
    3a40:	930d      	str	r3, [sp, #52]	; 0x34
    3a42:	f006 ffd7 	bl	a9f4 <tstrx_encode>
    off = u32toa(dst, ver->iv_major);
    3a46:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    3a4a:	4648      	mov	r0, r9
    3a4c:	f006 fe1a 	bl	a684 <u32toa>
    dst[off++] = '.';
    3a50:	ab28      	add	r3, sp, #160	; 0xa0
    3a52:	1c46      	adds	r6, r0, #1
    3a54:	4418      	add	r0, r3
    3a56:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    off += u32toa(dst + off, ver->iv_minor);
    3a5a:	f89d 1055 	ldrb.w	r1, [sp, #85]	; 0x55
    dst[off++] = '.';
    3a5e:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_minor);
    3a62:	eb09 0006 	add.w	r0, r9, r6
    3a66:	f006 fe0d 	bl	a684 <u32toa>
    dst[off++] = '.';
    3a6a:	ab28      	add	r3, sp, #160	; 0xa0
    off += u32toa(dst + off, ver->iv_minor);
    3a6c:	4430      	add	r0, r6
    dst[off++] = '.';
    3a6e:	1c46      	adds	r6, r0, #1
    3a70:	4418      	add	r0, r3
    off += u32toa(dst + off, ver->iv_revision);
    3a72:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    dst[off++] = '.';
    3a76:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_revision);
    3a7a:	eb09 0006 	add.w	r0, r9, r6
    3a7e:	f006 fe01 	bl	a684 <u32toa>
    dst[off++] = '.';
    3a82:	ab28      	add	r3, sp, #160	; 0xa0
    off += u32toa(dst + off, ver->iv_revision);
    3a84:	4406      	add	r6, r0
    dst[off++] = '.';
    3a86:	4433      	add	r3, r6
    3a88:	3601      	adds	r6, #1
    off += u32toa(dst + off, ver->iv_build_num);
    3a8a:	9916      	ldr	r1, [sp, #88]	; 0x58
    dst[off++] = '.';
    3a8c:	f803 ac40 	strb.w	sl, [r3, #-64]
    off += u32toa(dst + off, ver->iv_build_num);
    3a90:	eb09 0006 	add.w	r0, r9, r6
    3a94:	f006 fdf6 	bl	a684 <u32toa>
            tstrx_put_term(&cbor_state, (char *)tmpbuf);
    3a98:	4648      	mov	r0, r9
    3a9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    3a9e:	f007 f878 	bl	ab92 <strlen>
    3aa2:	a90e      	add	r1, sp, #56	; 0x38
    3aa4:	900f      	str	r0, [sp, #60]	; 0x3c
    3aa6:	4620      	mov	r0, r4
    3aa8:	f006 ffa4 	bl	a9f4 <tstrx_encode>
            map_end_encode(&cbor_state, 20);
    3aac:	2114      	movs	r1, #20
    3aae:	4620      	mov	r0, r4
    3ab0:	f006 ffca 	bl	aa48 <map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    3ab4:	b165      	cbz	r5, 3ad0 <boot_serial_input+0x174>
    list_end_encode(&cbor_state, 5);
    3ab6:	2105      	movs	r1, #5
    3ab8:	4855      	ldr	r0, [pc, #340]	; (3c10 <FIH_LABEL_FIH_CALL_END_988+0x120>)
    3aba:	f006 ffc2 	bl	aa42 <list_end_encode>
    map_end_encode(&cbor_state, 1);
    3abe:	4629      	mov	r1, r5
    3ac0:	4853      	ldr	r0, [pc, #332]	; (3c10 <FIH_LABEL_FIH_CALL_END_988+0x120>)
    3ac2:	f006 ffc1 	bl	aa48 <map_end_encode>
    boot_serial_output();
    3ac6:	f7ff fe55 	bl	3774 <boot_serial_output>
}
    3aca:	b029      	add	sp, #164	; 0xa4
    3acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ad0:	2501      	movs	r5, #1
    3ad2:	e781      	b.n	39d8 <boot_serial_input+0x7c>

00003ad4 <FIH_LABEL_FIH_CALL_START_958>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    3ad4:	2340      	movs	r3, #64	; 0x40
    3ad6:	9301      	str	r3, [sp, #4]
    3ad8:	ab18      	add	r3, sp, #96	; 0x60
    3ada:	e9cd 6603 	strd	r6, r6, [sp, #12]
    3ade:	9602      	str	r6, [sp, #8]
    3ae0:	9300      	str	r3, [sp, #0]
    3ae2:	4631      	mov	r1, r6
    3ae4:	9b07      	ldr	r3, [sp, #28]
    3ae6:	aa10      	add	r2, sp, #64	; 0x40
    3ae8:	4630      	mov	r0, r6
    3aea:	f7fc fe9f 	bl	82c <bootutil_img_validate>
    3aee:	4606      	mov	r6, r0

00003af0 <FIH_LABEL_FIH_CALL_END_988>:
    3af0:	e788      	b.n	3a04 <boot_serial_input+0xa8>
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    3af2:	ab0a      	add	r3, sp, #40	; 0x28
    3af4:	aa18      	add	r2, sp, #96	; 0x60
    3af6:	4639      	mov	r1, r7
    3af8:	3008      	adds	r0, #8
    const struct flash_area *fap = NULL;
    3afa:	9608      	str	r6, [sp, #32]
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    3afc:	f000 fa5c 	bl	3fb8 <cbor_decode_Upload>
    if (!result || (len != decoded_len)) {
    3b00:	b908      	cbnz	r0, 3b06 <FIH_LABEL_FIH_CALL_END_988+0x16>
        rc = MGMT_ERR_EINVAL;
    3b02:	2403      	movs	r4, #3
    3b04:	e039      	b.n	3b7a <FIH_LABEL_FIH_CALL_END_988+0x8a>
    if (!result || (len != decoded_len)) {
    3b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b08:	429f      	cmp	r7, r3
    3b0a:	d1fa      	bne.n	3b02 <FIH_LABEL_FIH_CALL_END_988+0x12>
    long long int data_len = UINT64_MAX;
    3b0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3b10:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
    3b14:	ab18      	add	r3, sp, #96	; 0x60
    for (int i = 0; i < upload._Upload_members_count; i++) {
    3b16:	4632      	mov	r2, r6
    img_num = 0;
    3b18:	4630      	mov	r0, r6
    long long int data_len = UINT64_MAX;
    3b1a:	46a3      	mov	fp, r4
    size_t img_blen = 0;
    3b1c:	4635      	mov	r5, r6
    long long int off = UINT64_MAX;
    3b1e:	4627      	mov	r7, r4
    3b20:	46a2      	mov	sl, r4
    const uint8_t *img_data = NULL;
    3b22:	46b1      	mov	r9, r6
    for (int i = 0; i < upload._Upload_members_count; i++) {
    3b24:	4594      	cmp	ip, r2
    3b26:	d15b      	bne.n	3be0 <FIH_LABEL_FIH_CALL_END_988+0xf0>
    if (off == UINT64_MAX || img_data == NULL) {
    3b28:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    3b2c:	bf08      	it	eq
    3b2e:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    3b32:	d0e6      	beq.n	3b02 <FIH_LABEL_FIH_CALL_END_988+0x12>
    3b34:	f1b9 0f00 	cmp.w	r9, #0
    3b38:	d0e3      	beq.n	3b02 <FIH_LABEL_FIH_CALL_END_988+0x12>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    3b3a:	2100      	movs	r1, #0
    3b3c:	f005 fc1f 	bl	937e <flash_area_id_from_multi_image_slot>
    3b40:	a908      	add	r1, sp, #32
    3b42:	b2c0      	uxtb	r0, r0
    3b44:	f7ff f8ce 	bl	2ce4 <flash_area_open>
    if (rc) {
    3b48:	2800      	cmp	r0, #0
    3b4a:	d1da      	bne.n	3b02 <FIH_LABEL_FIH_CALL_END_988+0x12>
    if (off == 0) {
    3b4c:	ea57 030a 	orrs.w	r3, r7, sl
    3b50:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3c30 <FIH_LABEL_FIH_CALL_END_988+0x140>
    3b54:	d109      	bne.n	3b6a <FIH_LABEL_FIH_CALL_END_988+0x7a>
        if (data_len > fap->fa_size) {
    3b56:	9b08      	ldr	r3, [sp, #32]
        curr_off = 0;
    3b58:	f8c8 0000 	str.w	r0, [r8]
        if (data_len > fap->fa_size) {
    3b5c:	689b      	ldr	r3, [r3, #8]
    3b5e:	42a3      	cmp	r3, r4
    3b60:	eb70 030b 	sbcs.w	r3, r0, fp
    3b64:	dbcd      	blt.n	3b02 <FIH_LABEL_FIH_CALL_END_988+0x12>
        img_size = data_len;
    3b66:	4b33      	ldr	r3, [pc, #204]	; (3c34 <FIH_LABEL_FIH_CALL_END_988+0x144>)
    3b68:	601c      	str	r4, [r3, #0]
    if (off != curr_off) {
    3b6a:	f8d8 3000 	ldr.w	r3, [r8]
    3b6e:	f1ba 0f00 	cmp.w	sl, #0
    3b72:	bf08      	it	eq
    3b74:	42bb      	cmpeq	r3, r7
    3b76:	d069      	beq.n	3c4c <FIH_LABEL_FIH_CALL_END_988+0x15c>
        rc = 0;
    3b78:	2400      	movs	r4, #0
    3b7a:	4b2f      	ldr	r3, [pc, #188]	; (3c38 <FIH_LABEL_FIH_CALL_END_988+0x148>)
    3b7c:	4a2f      	ldr	r2, [pc, #188]	; (3c3c <FIH_LABEL_FIH_CALL_END_988+0x14c>)
    BOOT_LOG_INF("RX: 0x%x", rc);
    3b7e:	4830      	ldr	r0, [pc, #192]	; (3c40 <FIH_LABEL_FIH_CALL_END_988+0x150>)
    3b80:	1ad2      	subs	r2, r2, r3
    3b82:	08d2      	lsrs	r2, r2, #3
    3b84:	0192      	lsls	r2, r2, #6
    3b86:	f042 0203 	orr.w	r2, r2, #3
    3b8a:	4621      	mov	r1, r4
    3b8c:	f006 f8cf 	bl	9d2e <log_1>
    map_start_encode(&cbor_state, 10);
    3b90:	210a      	movs	r1, #10
    3b92:	481f      	ldr	r0, [pc, #124]	; (3c10 <FIH_LABEL_FIH_CALL_END_988+0x120>)
    3b94:	f006 ff3d 	bl	aa12 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    3b98:	4b2a      	ldr	r3, [pc, #168]	; (3c44 <FIH_LABEL_FIH_CALL_END_988+0x154>)
    3b9a:	9310      	str	r3, [sp, #64]	; 0x40
    3b9c:	a910      	add	r1, sp, #64	; 0x40
    3b9e:	2302      	movs	r3, #2
    3ba0:	481b      	ldr	r0, [pc, #108]	; (3c10 <FIH_LABEL_FIH_CALL_END_988+0x120>)
    3ba2:	9311      	str	r3, [sp, #68]	; 0x44
    3ba4:	f006 ff26 	bl	a9f4 <tstrx_encode>
    uintx32_put(&cbor_state, rc);
    3ba8:	4819      	ldr	r0, [pc, #100]	; (3c10 <FIH_LABEL_FIH_CALL_END_988+0x120>)
    3baa:	4621      	mov	r1, r4
    3bac:	f006 ff19 	bl	a9e2 <uintx32_put>
    if (rc == 0) {
    3bb0:	b964      	cbnz	r4, 3bcc <FIH_LABEL_FIH_CALL_END_988+0xdc>
        tstrx_put(&cbor_state, "off");
    3bb2:	4b25      	ldr	r3, [pc, #148]	; (3c48 <FIH_LABEL_FIH_CALL_END_988+0x158>)
    3bb4:	930e      	str	r3, [sp, #56]	; 0x38
    3bb6:	a90e      	add	r1, sp, #56	; 0x38
    3bb8:	2303      	movs	r3, #3
    3bba:	4815      	ldr	r0, [pc, #84]	; (3c10 <FIH_LABEL_FIH_CALL_END_988+0x120>)
    3bbc:	930f      	str	r3, [sp, #60]	; 0x3c
    3bbe:	f006 ff19 	bl	a9f4 <tstrx_encode>
        uintx32_put(&cbor_state, curr_off);
    3bc2:	4b1b      	ldr	r3, [pc, #108]	; (3c30 <FIH_LABEL_FIH_CALL_END_988+0x140>)
    3bc4:	4812      	ldr	r0, [pc, #72]	; (3c10 <FIH_LABEL_FIH_CALL_END_988+0x120>)
    3bc6:	6819      	ldr	r1, [r3, #0]
    3bc8:	f006 ff0b 	bl	a9e2 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    3bcc:	210a      	movs	r1, #10
    3bce:	4810      	ldr	r0, [pc, #64]	; (3c10 <FIH_LABEL_FIH_CALL_END_988+0x120>)
    3bd0:	f006 ff3a 	bl	aa48 <map_end_encode>
    boot_serial_output();
    3bd4:	f7ff fdce 	bl	3774 <boot_serial_output>
    flash_area_close(fap);
    3bd8:	9808      	ldr	r0, [sp, #32]
    3bda:	f006 fc17 	bl	a40c <flash_area_close>
}
    3bde:	e774      	b.n	3aca <boot_serial_input+0x16e>
        switch(member->_Member_choice) {
    3be0:	7a19      	ldrb	r1, [r3, #8]
    3be2:	2903      	cmp	r1, #3
    3be4:	d804      	bhi.n	3bf0 <FIH_LABEL_FIH_CALL_END_988+0x100>
    3be6:	e8df f001 	tbb	[pc, r1]
    3bea:	0602      	.short	0x0602
    3bec:	0d09      	.short	0x0d09
                img_num = member->_Member_image;
    3bee:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    3bf0:	3201      	adds	r2, #1
    3bf2:	330c      	adds	r3, #12
    3bf4:	e796      	b.n	3b24 <FIH_LABEL_FIH_CALL_END_988+0x34>
                slen = member->_Member_data.len;
    3bf6:	e9d3 9500 	ldrd	r9, r5, [r3]
                break;
    3bfa:	e7f9      	b.n	3bf0 <FIH_LABEL_FIH_CALL_END_988+0x100>
                data_len = member->_Member_len;
    3bfc:	681c      	ldr	r4, [r3, #0]
    3bfe:	ea4f 7be4 	mov.w	fp, r4, asr #31
                break;
    3c02:	e7f5      	b.n	3bf0 <FIH_LABEL_FIH_CALL_END_988+0x100>
                off = member->_Member_off;
    3c04:	681f      	ldr	r7, [r3, #0]
    3c06:	ea4f 7ae7 	mov.w	sl, r7, asr #31
                break;
    3c0a:	e7f1      	b.n	3bf0 <FIH_LABEL_FIH_CALL_END_988+0x100>
    3c0c:	2000276c 	.word	0x2000276c
    3c10:	20000038 	.word	0x20000038
    3c14:	20002af4 	.word	0x20002af4
    3c18:	0000cb1e 	.word	0x0000cb1e
    3c1c:	96f3b83d 	.word	0x96f3b83d
    3c20:	200008bc 	.word	0x200008bc
    3c24:	20000000 	.word	0x20000000
    3c28:	0000c5e2 	.word	0x0000c5e2
    3c2c:	0000cb25 	.word	0x0000cb25
    3c30:	20002770 	.word	0x20002770
    3c34:	20002780 	.word	0x20002780
    3c38:	0000bee4 	.word	0x0000bee4
    3c3c:	0000bf04 	.word	0x0000bf04
    3c40:	0000cbec 	.word	0x0000cbec
    3c44:	0000cb2d 	.word	0x0000cb2d
    3c48:	0000cb30 	.word	0x0000cb30
    if (curr_off + img_blen > img_size) {
    3c4c:	f8df a190 	ldr.w	sl, [pc, #400]	; 3de0 <FIH_LABEL_FIH_CALL_END_988+0x2f0>
    3c50:	f8da 2000 	ldr.w	r2, [sl]
    3c54:	442b      	add	r3, r5
    3c56:	4293      	cmp	r3, r2
    3c58:	f63f af53 	bhi.w	3b02 <FIH_LABEL_FIH_CALL_END_988+0x12>
    rem_bytes = img_blen % flash_area_align(fap);
    3c5c:	9808      	ldr	r0, [sp, #32]
    3c5e:	4f61      	ldr	r7, [pc, #388]	; (3de4 <FIH_LABEL_FIH_CALL_END_988+0x2f4>)
    3c60:	f006 fc53 	bl	a50a <flash_area_align>
    3c64:	fbb5 f3f0 	udiv	r3, r5, r0
    3c68:	fb03 5310 	mls	r3, r3, r0, r5
    if ((curr_off + img_blen < img_size) && rem_bytes) {
    3c6c:	f8d8 0000 	ldr.w	r0, [r8]
    3c70:	f8da 2000 	ldr.w	r2, [sl]
    3c74:	1941      	adds	r1, r0, r5
    3c76:	4291      	cmp	r1, r2
        img_blen -= rem_bytes;
    3c78:	bf38      	it	cc
    3c7a:	1aed      	subcc	r5, r5, r3
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    3c7c:	a90c      	add	r1, sp, #48	; 0x30
    3c7e:	4428      	add	r0, r5
    rem_bytes = img_blen % flash_area_align(fap);
    3c80:	bf28      	it	cs
    3c82:	b2de      	uxtbcs	r6, r3
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    3c84:	f7fc fdc0 	bl	808 <flash_area_sector_from_off>
    3c88:	4b57      	ldr	r3, [pc, #348]	; (3de8 <FIH_LABEL_FIH_CALL_END_988+0x2f8>)
    3c8a:	1aff      	subs	r7, r7, r3
    3c8c:	08ff      	lsrs	r7, r7, #3
    if (rc) {
    3c8e:	4604      	mov	r4, r0
    3c90:	01bf      	lsls	r7, r7, #6
    3c92:	b128      	cbz	r0, 3ca0 <FIH_LABEL_FIH_CALL_END_988+0x1b0>
        BOOT_LOG_ERR("Unable to determine flash sector size");
    3c94:	4855      	ldr	r0, [pc, #340]	; (3dec <FIH_LABEL_FIH_CALL_END_988+0x2fc>)
    3c96:	f047 0101 	orr.w	r1, r7, #1
                BOOT_LOG_ERR("Unable to determine flash sector of"
    3c9a:	f006 f83b 	bl	9d14 <log_0>
                goto out;
    3c9e:	e76c      	b.n	3b7a <FIH_LABEL_FIH_CALL_END_988+0x8a>
    if (off_last != sector.fs_off) {
    3ca0:	4b53      	ldr	r3, [pc, #332]	; (3df0 <FIH_LABEL_FIH_CALL_END_988+0x300>)
    3ca2:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ca4:	681a      	ldr	r2, [r3, #0]
    3ca6:	4291      	cmp	r1, r2
    3ca8:	d013      	beq.n	3cd2 <FIH_LABEL_FIH_CALL_END_988+0x1e2>
        BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    3caa:	4852      	ldr	r0, [pc, #328]	; (3df4 <FIH_LABEL_FIH_CALL_END_988+0x304>)
        off_last = sector.fs_off;
    3cac:	6019      	str	r1, [r3, #0]
        BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    3cae:	f047 0203 	orr.w	r2, r7, #3
    3cb2:	f006 f83c 	bl	9d2e <log_1>
        rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    3cb6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    3cba:	9808      	ldr	r0, [sp, #32]
    3cbc:	f006 fbf6 	bl	a4ac <flash_area_erase>
        if (rc) {
    3cc0:	4604      	mov	r4, r0
    3cc2:	b130      	cbz	r0, 3cd2 <FIH_LABEL_FIH_CALL_END_988+0x1e2>
                    BOOT_LOG_ERR("Error %d while erasing sector", rc);
    3cc4:	484c      	ldr	r0, [pc, #304]	; (3df8 <FIH_LABEL_FIH_CALL_END_988+0x308>)
    3cc6:	f047 0201 	orr.w	r2, r7, #1
    3cca:	4621      	mov	r1, r4
    3ccc:	f006 f82f 	bl	9d2e <log_1>
                    goto out;
    3cd0:	e753      	b.n	3b7a <FIH_LABEL_FIH_CALL_END_988+0x8a>
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_blen);
    3cd2:	f8d8 1000 	ldr.w	r1, [r8]
    3cd6:	4849      	ldr	r0, [pc, #292]	; (3dfc <FIH_LABEL_FIH_CALL_END_988+0x30c>)
    3cd8:	f047 0303 	orr.w	r3, r7, #3
    3cdc:	186a      	adds	r2, r5, r1
    3cde:	f006 f83a 	bl	9d56 <log_2>
    if (rem_bytes) {
    3ce2:	2e00      	cmp	r6, #0
    3ce4:	d049      	beq.n	3d7a <FIH_LABEL_FIH_CALL_END_988+0x28a>
        if (w_size) {
    3ce6:	1bac      	subs	r4, r5, r6
    3ce8:	d02f      	beq.n	3d4a <FIH_LABEL_FIH_CALL_END_988+0x25a>
            rc = flash_area_write(fap, curr_off, img_data, w_size);
    3cea:	f8d8 1000 	ldr.w	r1, [r8]
    3cee:	9808      	ldr	r0, [sp, #32]
    3cf0:	4623      	mov	r3, r4
    3cf2:	464a      	mov	r2, r9
    3cf4:	f006 fba7 	bl	a446 <flash_area_write>
            if (rc) {
    3cf8:	2800      	cmp	r0, #0
    3cfa:	f47f af02 	bne.w	3b02 <FIH_LABEL_FIH_CALL_END_988+0x12>
            curr_off += w_size;
    3cfe:	f8d8 3000 	ldr.w	r3, [r8]
    3d02:	4423      	add	r3, r4
    3d04:	f8c8 3000 	str.w	r3, [r8]
            img_data += w_size;
    3d08:	44a1      	add	r9, r4
            img_blen -= w_size;
    3d0a:	4635      	mov	r5, r6
            memcpy(wbs_aligned, img_data, rem_bytes);
    3d0c:	4632      	mov	r2, r6
    3d0e:	4649      	mov	r1, r9
    3d10:	a810      	add	r0, sp, #64	; 0x40
    3d12:	f006 ff83 	bl	ac1c <memcpy>
            memset(wbs_aligned + rem_bytes, flash_area_erased_val(fap),
    3d16:	9808      	ldr	r0, [sp, #32]
    3d18:	f006 fc00 	bl	a51c <flash_area_erased_val>
    3d1c:	ab10      	add	r3, sp, #64	; 0x40
    3d1e:	4601      	mov	r1, r0
    3d20:	f1c6 0208 	rsb	r2, r6, #8
    3d24:	1998      	adds	r0, r3, r6
    3d26:	f006 ff84 	bl	ac32 <memset>
            rc = flash_area_write(fap, curr_off, wbs_aligned, flash_area_align(fap));
    3d2a:	9c08      	ldr	r4, [sp, #32]
    3d2c:	f8d8 6000 	ldr.w	r6, [r8]
    3d30:	4620      	mov	r0, r4
    3d32:	f006 fbea 	bl	a50a <flash_area_align>
    3d36:	aa10      	add	r2, sp, #64	; 0x40
    3d38:	4603      	mov	r3, r0
    3d3a:	4631      	mov	r1, r6
    3d3c:	4620      	mov	r0, r4
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    3d3e:	f006 fb82 	bl	a446 <flash_area_write>
    if (rc == 0) {
    3d42:	2800      	cmp	r0, #0
    3d44:	f47f aedd 	bne.w	3b02 <FIH_LABEL_FIH_CALL_END_988+0x12>
    3d48:	e001      	b.n	3d4e <FIH_LABEL_FIH_CALL_END_988+0x25e>
        if (img_blen) {
    3d4a:	2d00      	cmp	r5, #0
    3d4c:	d1de      	bne.n	3d0c <FIH_LABEL_FIH_CALL_END_988+0x21c>
        curr_off += img_blen;
    3d4e:	f8d8 3000 	ldr.w	r3, [r8]
    3d52:	441d      	add	r5, r3
        if (curr_off == img_size) {
    3d54:	f8da 3000 	ldr.w	r3, [sl]
        curr_off += img_blen;
    3d58:	f8c8 5000 	str.w	r5, [r8]
        if (curr_off == img_size) {
    3d5c:	429d      	cmp	r5, r3
    3d5e:	f47f af0b 	bne.w	3b78 <FIH_LABEL_FIH_CALL_END_988+0x88>
            rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
    3d62:	9808      	ldr	r0, [sp, #32]
    3d64:	f005 fbc0 	bl	94e8 <boot_status_off>
    3d68:	a90c      	add	r1, sp, #48	; 0x30
    3d6a:	f7fc fd4d 	bl	808 <flash_area_sector_from_off>
            if (rc) {
    3d6e:	4604      	mov	r4, r0
    3d70:	b148      	cbz	r0, 3d86 <FIH_LABEL_FIH_CALL_END_988+0x296>
                BOOT_LOG_ERR("Unable to determine flash sector of"
    3d72:	4823      	ldr	r0, [pc, #140]	; (3e00 <FIH_LABEL_FIH_CALL_END_988+0x310>)
    3d74:	f047 0101 	orr.w	r1, r7, #1
    3d78:	e78f      	b.n	3c9a <FIH_LABEL_FIH_CALL_END_988+0x1aa>
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    3d7a:	f8d8 1000 	ldr.w	r1, [r8]
    3d7e:	9808      	ldr	r0, [sp, #32]
    3d80:	462b      	mov	r3, r5
    3d82:	464a      	mov	r2, r9
    3d84:	e7db      	b.n	3d3e <FIH_LABEL_FIH_CALL_END_988+0x24e>
            if (off_last < sector.fs_off) {
    3d86:	4b1a      	ldr	r3, [pc, #104]	; (3df0 <FIH_LABEL_FIH_CALL_END_988+0x300>)
    3d88:	990c      	ldr	r1, [sp, #48]	; 0x30
    3d8a:	681b      	ldr	r3, [r3, #0]
    3d8c:	4299      	cmp	r1, r3
    3d8e:	f77f aef3 	ble.w	3b78 <FIH_LABEL_FIH_CALL_END_988+0x88>
                BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    3d92:	4818      	ldr	r0, [pc, #96]	; (3df4 <FIH_LABEL_FIH_CALL_END_988+0x304>)
    3d94:	f047 0203 	orr.w	r2, r7, #3
    3d98:	f005 ffc9 	bl	9d2e <log_1>
                rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    3d9c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    3da0:	9808      	ldr	r0, [sp, #32]
    3da2:	f006 fb83 	bl	a4ac <flash_area_erase>
                if (rc) {
    3da6:	4604      	mov	r4, r0
    3da8:	2800      	cmp	r0, #0
    3daa:	f43f aee6 	beq.w	3b7a <FIH_LABEL_FIH_CALL_END_988+0x8a>
    3dae:	e789      	b.n	3cc4 <FIH_LABEL_FIH_CALL_END_988+0x1d4>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    3db0:	2900      	cmp	r1, #0
    3db2:	f47f ae8a 	bne.w	3aca <boot_serial_input+0x16e>
        switch (hdr->nh_id) {
    3db6:	79c3      	ldrb	r3, [r0, #7]
    3db8:	2b01      	cmp	r3, #1
    3dba:	f43f adf6 	beq.w	39aa <boot_serial_input+0x4e>
    3dbe:	2b05      	cmp	r3, #5
    3dc0:	f47f ae83 	bne.w	3aca <boot_serial_input+0x16e>
    bs_empty_rsp(buf, len);
    3dc4:	f7ff fdaa 	bl	391c <bs_empty_rsp.constprop.0>
	return z_impl_k_sleep(timeout);
    3dc8:	2100      	movs	r1, #0
    3dca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3dce:	f004 fea9 	bl	8b24 <z_impl_k_sleep>
    sys_reboot(SYS_REBOOT_COLD);
    3dd2:	2001      	movs	r0, #1
}
    3dd4:	b029      	add	sp, #164	; 0xa4
    3dd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_reboot(SYS_REBOOT_COLD);
    3dda:	f7fe ba1d 	b.w	2218 <sys_reboot>
    3dde:	bf00      	nop
    3de0:	20002780 	.word	0x20002780
    3de4:	0000bf04 	.word	0x0000bf04
    3de8:	0000bee4 	.word	0x0000bee4
    3dec:	0000cb3a 	.word	0x0000cb3a
    3df0:	2000004c 	.word	0x2000004c
    3df4:	0000cb60 	.word	0x0000cb60
    3df8:	0000cb7e 	.word	0x0000cb7e
    3dfc:	0000cb9c 	.word	0x0000cb9c
    3e00:	0000cbb7 	.word	0x0000cbb7

00003e04 <boot_serial_start>:
 * Task which waits reading console, expecting to get image over
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    3e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int off;
    int dec_off = 0;
    int full_line;
    int max_input;

    boot_uf = f;
    3e06:	4b1a      	ldr	r3, [pc, #104]	; (3e70 <boot_serial_start+0x6c>)
    max_input = sizeof(in_buf);

    off = 0;
    while (1) {
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    3e08:	4e1a      	ldr	r6, [pc, #104]	; (3e74 <boot_serial_start+0x70>)
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
        }

        /* serve errors: out of decode memory, or bad encoding */
        if (rc == 1) {
            boot_serial_input(&dec_buf[2], dec_off - 2);
    3e0a:	4f1b      	ldr	r7, [pc, #108]	; (3e78 <boot_serial_start+0x74>)
    boot_uf = f;
    3e0c:	6018      	str	r0, [r3, #0]
    int dec_off = 0;
    3e0e:	2400      	movs	r4, #0
{
    3e10:	4605      	mov	r5, r0
    int dec_off = 0;
    3e12:	9400      	str	r4, [sp, #0]
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    3e14:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    3e18:	682b      	ldr	r3, [r5, #0]
    3e1a:	aa01      	add	r2, sp, #4
    3e1c:	3101      	adds	r1, #1
    3e1e:	1930      	adds	r0, r6, r4
    3e20:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    3e22:	2800      	cmp	r0, #0
    3e24:	9b01      	ldr	r3, [sp, #4]
    3e26:	dc01      	bgt.n	3e2c <boot_serial_start+0x28>
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d0f3      	beq.n	3e14 <boot_serial_start+0x10>
        off += rc;
    3e2c:	4404      	add	r4, r0
        if (!full_line) {
    3e2e:	b92b      	cbnz	r3, 3e3c <boot_serial_start+0x38>
            if (off == max_input) {
    3e30:	f240 2301 	movw	r3, #513	; 0x201
    3e34:	429c      	cmp	r4, r3
    3e36:	d1ed      	bne.n	3e14 <boot_serial_start+0x10>
        }
        off = 0;
    3e38:	2400      	movs	r4, #0
    3e3a:	e7eb      	b.n	3e14 <boot_serial_start+0x10>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    3e3c:	7833      	ldrb	r3, [r6, #0]
    3e3e:	2b06      	cmp	r3, #6
    3e40:	d109      	bne.n	3e56 <boot_serial_start+0x52>
    3e42:	7873      	ldrb	r3, [r6, #1]
    3e44:	2b09      	cmp	r3, #9
    3e46:	d10b      	bne.n	3e60 <boot_serial_start+0x5c>
            dec_off = 0;
    3e48:	2300      	movs	r3, #0
    3e4a:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    3e4c:	4669      	mov	r1, sp
    3e4e:	1ea0      	subs	r0, r4, #2
    3e50:	f7ff fd28 	bl	38a4 <boot_serial_in_dec.constprop.0>
    3e54:	e004      	b.n	3e60 <boot_serial_start+0x5c>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    3e56:	2b04      	cmp	r3, #4
    3e58:	d102      	bne.n	3e60 <boot_serial_start+0x5c>
    3e5a:	7873      	ldrb	r3, [r6, #1]
    3e5c:	2b14      	cmp	r3, #20
    3e5e:	d0f5      	beq.n	3e4c <boot_serial_start+0x48>
        if (rc == 1) {
    3e60:	2801      	cmp	r0, #1
    3e62:	d1e9      	bne.n	3e38 <boot_serial_start+0x34>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    3e64:	9900      	ldr	r1, [sp, #0]
    3e66:	4638      	mov	r0, r7
    3e68:	3902      	subs	r1, #2
    3e6a:	f7ff fd77 	bl	395c <boot_serial_input>
    3e6e:	e7e3      	b.n	3e38 <boot_serial_start+0x34>
    3e70:	20002768 	.word	0x20002768
    3e74:	20002d75 	.word	0x20002d75
    3e78:	20002b76 	.word	0x20002b76

00003e7c <decode_Upload>:
	return tmp_result;
}

static bool decode_Upload(
		cbor_state_t *state, struct Upload *result)
{
    3e7c:	b530      	push	{r4, r5, lr}
    3e7e:	b085      	sub	sp, #20
    3e80:	4605      	mov	r5, r0
    3e82:	460c      	mov	r4, r1
	cbor_print("%s\n", __func__);
	bool int_res;

	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    3e84:	f006 fce3 	bl	a84e <map_start_decode>
    3e88:	b920      	cbnz	r0, 3e94 <decode_Upload+0x18>
    3e8a:	2400      	movs	r4, #0

	if (!tmp_result)
		cbor_trace();

	return tmp_result;
}
    3e8c:	f004 0001 	and.w	r0, r4, #1
    3e90:	b005      	add	sp, #20
    3e92:	bd30      	pop	{r4, r5, pc}
	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    3e94:	230c      	movs	r3, #12
    3e96:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3e9a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
    3e9e:	4b06      	ldr	r3, [pc, #24]	; (3eb8 <decode_Upload+0x3c>)
    3ea0:	9500      	str	r5, [sp, #0]
    3ea2:	2105      	movs	r1, #5
    3ea4:	2001      	movs	r0, #1
    3ea6:	f006 fce2 	bl	a86e <multi_decode>
    3eaa:	4604      	mov	r4, r0
    3eac:	4628      	mov	r0, r5
    3eae:	f006 fcdc 	bl	a86a <map_end_decode>
    3eb2:	2800      	cmp	r0, #0
    3eb4:	d0e9      	beq.n	3e8a <decode_Upload+0xe>
    3eb6:	e7e9      	b.n	3e8c <decode_Upload+0x10>
    3eb8:	00003ebd 	.word	0x00003ebd

00003ebc <decode_Member>:
{
    3ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3ebe:	4604      	mov	r4, r0
    3ec0:	460e      	mov	r6, r1
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    3ec2:	f006 fdfe 	bl	aac2 <union_start_code>
    3ec6:	4605      	mov	r5, r0
    3ec8:	b338      	cbz	r0, 3f1a <decode_Member+0x5e>
    3eca:	4b36      	ldr	r3, [pc, #216]	; (3fa4 <decode_Member+0xe8>)
    3ecc:	9300      	str	r3, [sp, #0]
    3ece:	4669      	mov	r1, sp
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    3ed0:	2305      	movs	r3, #5
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    3ed2:	4620      	mov	r0, r4
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    3ed4:	9301      	str	r3, [sp, #4]
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    3ed6:	f006 fcb7 	bl	a848 <tstrx_expect>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    3eda:	b138      	cbz	r0, 3eec <decode_Member+0x30>
	&& (intx32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    3edc:	4631      	mov	r1, r6
    3ede:	4620      	mov	r0, r4
    3ee0:	f006 fc69 	bl	a7b6 <intx32_decode>
    3ee4:	b110      	cbz	r0, 3eec <decode_Member+0x30>
    3ee6:	2300      	movs	r3, #0
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    3ee8:	7233      	strb	r3, [r6, #8]
    3eea:	e040      	b.n	3f6e <decode_Member+0xb2>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    3eec:	4620      	mov	r0, r4
    3eee:	f006 fdeb 	bl	aac8 <union_elem_code>
    3ef2:	b1a8      	cbz	r0, 3f20 <decode_Member+0x64>
    3ef4:	4b2c      	ldr	r3, [pc, #176]	; (3fa8 <decode_Member+0xec>)
    3ef6:	9300      	str	r3, [sp, #0]
    3ef8:	4669      	mov	r1, sp
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    3efa:	2304      	movs	r3, #4
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    3efc:	4620      	mov	r0, r4
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    3efe:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    3f00:	f006 fca2 	bl	a848 <tstrx_expect>
    3f04:	b160      	cbz	r0, 3f20 <decode_Member+0x64>
	&& (bstrx_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    3f06:	4631      	mov	r1, r6
    3f08:	4620      	mov	r0, r4
    3f0a:	f006 fc9a 	bl	a842 <bstrx_decode>
    3f0e:	b138      	cbz	r0, 3f20 <decode_Member+0x64>
    3f10:	2501      	movs	r5, #1
    3f12:	7235      	strb	r5, [r6, #8]
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    3f14:	4620      	mov	r0, r4
    3f16:	f006 fddb 	bl	aad0 <union_end_code>
}
    3f1a:	4628      	mov	r0, r5
    3f1c:	b002      	add	sp, #8
    3f1e:	bd70      	pop	{r4, r5, r6, pc}
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    3f20:	4620      	mov	r0, r4
    3f22:	f006 fdd1 	bl	aac8 <union_elem_code>
    3f26:	b178      	cbz	r0, 3f48 <decode_Member+0x8c>
    3f28:	4b20      	ldr	r3, [pc, #128]	; (3fac <decode_Member+0xf0>)
    3f2a:	9300      	str	r3, [sp, #0]
    3f2c:	4669      	mov	r1, sp
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    3f2e:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    3f30:	4620      	mov	r0, r4
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    3f32:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    3f34:	f006 fc88 	bl	a848 <tstrx_expect>
    3f38:	b130      	cbz	r0, 3f48 <decode_Member+0x8c>
	&& (intx32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    3f3a:	4631      	mov	r1, r6
    3f3c:	4620      	mov	r0, r4
    3f3e:	f006 fc3a 	bl	a7b6 <intx32_decode>
    3f42:	b108      	cbz	r0, 3f48 <decode_Member+0x8c>
    3f44:	2302      	movs	r3, #2
    3f46:	e7cf      	b.n	3ee8 <decode_Member+0x2c>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    3f48:	4620      	mov	r0, r4
    3f4a:	f006 fdbd 	bl	aac8 <union_elem_code>
    3f4e:	b180      	cbz	r0, 3f72 <decode_Member+0xb6>
    3f50:	4b17      	ldr	r3, [pc, #92]	; (3fb0 <decode_Member+0xf4>)
    3f52:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    3f54:	2503      	movs	r5, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    3f56:	4669      	mov	r1, sp
    3f58:	4620      	mov	r0, r4
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    3f5a:	9501      	str	r5, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    3f5c:	f006 fc74 	bl	a848 <tstrx_expect>
    3f60:	b138      	cbz	r0, 3f72 <decode_Member+0xb6>
	&& (intx32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    3f62:	4631      	mov	r1, r6
    3f64:	4620      	mov	r0, r4
    3f66:	f006 fc26 	bl	a7b6 <intx32_decode>
    3f6a:	b110      	cbz	r0, 3f72 <decode_Member+0xb6>
    3f6c:	7235      	strb	r5, [r6, #8]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    3f6e:	2501      	movs	r5, #1
    3f70:	e7d0      	b.n	3f14 <decode_Member+0x58>
    3f72:	4620      	mov	r0, r4
    3f74:	f006 fda8 	bl	aac8 <union_elem_code>
    3f78:	b908      	cbnz	r0, 3f7e <decode_Member+0xc2>
    3f7a:	2500      	movs	r5, #0
    3f7c:	e7ca      	b.n	3f14 <decode_Member+0x58>
    3f7e:	4b0d      	ldr	r3, [pc, #52]	; (3fb4 <decode_Member+0xf8>)
    3f80:	9300      	str	r3, [sp, #0]
    3f82:	4669      	mov	r1, sp
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    3f84:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    3f86:	4620      	mov	r0, r4
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    3f88:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    3f8a:	f006 fc5d 	bl	a848 <tstrx_expect>
    3f8e:	2800      	cmp	r0, #0
    3f90:	d0f3      	beq.n	3f7a <decode_Member+0xbe>
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    3f92:	4631      	mov	r1, r6
    3f94:	4620      	mov	r0, r4
    3f96:	f006 fc54 	bl	a842 <bstrx_decode>
    3f9a:	2800      	cmp	r0, #0
    3f9c:	d0ed      	beq.n	3f7a <decode_Member+0xbe>
    3f9e:	2304      	movs	r3, #4
    3fa0:	e7a2      	b.n	3ee8 <decode_Member+0x2c>
    3fa2:	bf00      	nop
    3fa4:	0000c597 	.word	0x0000c597
    3fa8:	0000d1a5 	.word	0x0000d1a5
    3fac:	0000cbf5 	.word	0x0000cbf5
    3fb0:	0000cb30 	.word	0x0000cb30
    3fb4:	0000cbf9 	.word	0x0000cbf9

00003fb8 <cbor_decode_Upload>:

bool cbor_decode_Upload(
		const uint8_t *payload, uint32_t payload_len,
		struct Upload *result,
		uint32_t *payload_len_out)
{
    3fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return entry_function(payload, payload_len, (const void *)result,
    3fba:	f04f 0c02 	mov.w	ip, #2
    3fbe:	2401      	movs	r4, #1
    3fc0:	e9cd 4c01 	strd	r4, ip, [sp, #4]
    3fc4:	4c02      	ldr	r4, [pc, #8]	; (3fd0 <cbor_decode_Upload+0x18>)
    3fc6:	9400      	str	r4, [sp, #0]
    3fc8:	f006 fd86 	bl	aad8 <entry_function>
		payload_len_out, (void *)decode_Upload,
		1, 2);
}
    3fcc:	b004      	add	sp, #16
    3fce:	bd10      	pop	{r4, pc}
    3fd0:	00003e7d 	.word	0x00003e7d

00003fd4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3fd4:	4a09      	ldr	r2, [pc, #36]	; (3ffc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3fd6:	490a      	ldr	r1, [pc, #40]	; (4000 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3fd8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3fda:	6809      	ldr	r1, [r1, #0]
    3fdc:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3fde:	4909      	ldr	r1, [pc, #36]	; (4004 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3fe0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3fe2:	684b      	ldr	r3, [r1, #4]
    3fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3fe8:	604b      	str	r3, [r1, #4]
    3fea:	2300      	movs	r3, #0
    3fec:	f383 8811 	msr	BASEPRI, r3
    3ff0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3ff4:	6893      	ldr	r3, [r2, #8]
}
    3ff6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop
    3ffc:	20002984 	.word	0x20002984
    4000:	0000c444 	.word	0x0000c444
    4004:	e000ed00 	.word	0xe000ed00

00004008 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4008:	490f      	ldr	r1, [pc, #60]	; (4048 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    400a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    400c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4010:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4012:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4016:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    401a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    401c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4020:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4024:	4f09      	ldr	r7, [pc, #36]	; (404c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4026:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    402a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    402c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    402e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4030:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    4032:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4034:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4036:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    403a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    403e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4042:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4046:	4770      	bx	lr
    ldr r1, =_kernel
    4048:	20002984 	.word	0x20002984
    ldr v4, =_SCS_ICSR
    404c:	e000ed04 	.word	0xe000ed04

00004050 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    4050:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4054:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4056:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    405a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    405e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4060:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4064:	2902      	cmp	r1, #2
    beq _oops
    4066:	d0ff      	beq.n	4068 <_oops>

00004068 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4068:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    406a:	f006 fd6b 	bl	ab44 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    406e:	bd01      	pop	{r0, pc}

00004070 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4070:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4072:	2b00      	cmp	r3, #0
    4074:	db08      	blt.n	4088 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4076:	2201      	movs	r2, #1
    4078:	f000 001f 	and.w	r0, r0, #31
    407c:	fa02 f000 	lsl.w	r0, r2, r0
    4080:	095b      	lsrs	r3, r3, #5
    4082:	4a02      	ldr	r2, [pc, #8]	; (408c <arch_irq_enable+0x1c>)
    4084:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4088:	4770      	bx	lr
    408a:	bf00      	nop
    408c:	e000e100 	.word	0xe000e100

00004090 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4090:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4092:	2b00      	cmp	r3, #0
    4094:	db0d      	blt.n	40b2 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4096:	2201      	movs	r2, #1
    4098:	095b      	lsrs	r3, r3, #5
    409a:	f000 001f 	and.w	r0, r0, #31
    409e:	fa02 f000 	lsl.w	r0, r2, r0
    40a2:	3320      	adds	r3, #32
    40a4:	4a03      	ldr	r2, [pc, #12]	; (40b4 <arch_irq_disable+0x24>)
    40a6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    40aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    40ae:	f3bf 8f6f 	isb	sy
}
    40b2:	4770      	bx	lr
    40b4:	e000e100 	.word	0xe000e100

000040b8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    40b8:	4b05      	ldr	r3, [pc, #20]	; (40d0 <arch_irq_is_enabled+0x18>)
    40ba:	0942      	lsrs	r2, r0, #5
    40bc:	f000 001f 	and.w	r0, r0, #31
    40c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    40c4:	2301      	movs	r3, #1
    40c6:	fa03 f000 	lsl.w	r0, r3, r0
}
    40ca:	4010      	ands	r0, r2
    40cc:	4770      	bx	lr
    40ce:	bf00      	nop
    40d0:	e000e100 	.word	0xe000e100

000040d4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    40d4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    40d6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40d8:	bfa8      	it	ge
    40da:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    40de:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40e2:	bfb8      	it	lt
    40e4:	4b06      	ldrlt	r3, [pc, #24]	; (4100 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40e6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    40ea:	bfac      	ite	ge
    40ec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40f0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40f4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40f6:	bfb4      	ite	lt
    40f8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40fa:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    40fe:	4770      	bx	lr
    4100:	e000ed14 	.word	0xe000ed14

00004104 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4104:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4108:	9b00      	ldr	r3, [sp, #0]
    410a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    410e:	490a      	ldr	r1, [pc, #40]	; (4138 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4110:	9b01      	ldr	r3, [sp, #4]
    4112:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4116:	9b02      	ldr	r3, [sp, #8]
    4118:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    411c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4124:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4128:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    412c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    412e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4130:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4132:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4134:	4770      	bx	lr
    4136:	bf00      	nop
    4138:	00009bb7 	.word	0x00009bb7

0000413c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    413c:	4b07      	ldr	r3, [pc, #28]	; (415c <arch_switch_to_main_thread+0x20>)
    413e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4140:	4610      	mov	r0, r2
    4142:	f381 8809 	msr	PSP, r1
    4146:	2100      	movs	r1, #0
    4148:	b663      	cpsie	if
    414a:	f381 8811 	msr	BASEPRI, r1
    414e:	f3bf 8f6f 	isb	sy
    4152:	2200      	movs	r2, #0
    4154:	2300      	movs	r3, #0
    4156:	f005 fd2e 	bl	9bb6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    415a:	bf00      	nop
    415c:	20002984 	.word	0x20002984

00004160 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4160:	4901      	ldr	r1, [pc, #4]	; (4168 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4162:	2210      	movs	r2, #16
	str	r2, [r1]
    4164:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4166:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4168:	e000ed10 	.word	0xe000ed10

0000416c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    416c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    416e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4170:	f380 8811 	msr	BASEPRI, r0
	isb
    4174:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4178:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    417c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    417e:	b662      	cpsie	i
	isb
    4180:	f3bf 8f6f 	isb	sy

	bx	lr
    4184:	4770      	bx	lr
    4186:	bf00      	nop

00004188 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4188:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    418a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    418c:	f381 8811 	msr	BASEPRI, r1

	wfe
    4190:	bf20      	wfe

	msr	BASEPRI, r0
    4192:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4196:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4198:	4770      	bx	lr
    419a:	bf00      	nop

0000419c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    419c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    419e:	4606      	mov	r6, r0

	if (esf != NULL) {
    41a0:	460c      	mov	r4, r1
    41a2:	b301      	cbz	r1, 41e6 <z_arm_fatal_error+0x4a>
    41a4:	4b13      	ldr	r3, [pc, #76]	; (41f4 <z_arm_fatal_error+0x58>)
    41a6:	4d14      	ldr	r5, [pc, #80]	; (41f8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    41a8:	4814      	ldr	r0, [pc, #80]	; (41fc <z_arm_fatal_error+0x60>)
    41aa:	1aed      	subs	r5, r5, r3
    41ac:	08ed      	lsrs	r5, r5, #3
    41ae:	01ad      	lsls	r5, r5, #6
    41b0:	f045 0501 	orr.w	r5, r5, #1
    41b4:	f8ad 5000 	strh.w	r5, [sp]
    41b8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    41bc:	6809      	ldr	r1, [r1, #0]
    41be:	f005 fde3 	bl	9d88 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    41c2:	f8ad 5000 	strh.w	r5, [sp]
    41c6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    41ca:	68e1      	ldr	r1, [r4, #12]
    41cc:	480c      	ldr	r0, [pc, #48]	; (4200 <z_arm_fatal_error+0x64>)
    41ce:	f005 fddb 	bl	9d88 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    41d2:	69e1      	ldr	r1, [r4, #28]
    41d4:	480b      	ldr	r0, [pc, #44]	; (4204 <z_arm_fatal_error+0x68>)
    41d6:	462a      	mov	r2, r5
    41d8:	f005 fda9 	bl	9d2e <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    41dc:	69a1      	ldr	r1, [r4, #24]
    41de:	480a      	ldr	r0, [pc, #40]	; (4208 <z_arm_fatal_error+0x6c>)
    41e0:	462a      	mov	r2, r5
    41e2:	f005 fda4 	bl	9d2e <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    41e6:	4621      	mov	r1, r4
    41e8:	4630      	mov	r0, r6
}
    41ea:	b002      	add	sp, #8
    41ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    41f0:	f003 be96 	b.w	7f20 <z_fatal_error>
    41f4:	0000bee4 	.word	0x0000bee4
    41f8:	0000bf14 	.word	0x0000bf14
    41fc:	0000cbfd 	.word	0x0000cbfd
    4200:	0000cc2c 	.word	0x0000cc2c
    4204:	0000cc5b 	.word	0x0000cc5b
    4208:	0000cc6a 	.word	0x0000cc6a

0000420c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    420c:	bf30      	wfi
    b z_SysNmiOnReset
    420e:	f7ff bffd 	b.w	420c <z_SysNmiOnReset>
    4212:	bf00      	nop

00004214 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4214:	4a0b      	ldr	r2, [pc, #44]	; (4244 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4216:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4218:	4b0b      	ldr	r3, [pc, #44]	; (4248 <z_arm_prep_c+0x34>)
    421a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    421e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4220:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4224:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4228:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    422c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4234:	f003 fed2 	bl	7fdc <z_bss_zero>
	z_data_copy();
    4238:	f004 fce6 	bl	8c08 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    423c:	f000 fab0 	bl	47a0 <z_arm_interrupt_init>
	z_cstart();
    4240:	f003 fef0 	bl	8024 <z_cstart>
    4244:	00000000 	.word	0x00000000
    4248:	e000ed00 	.word	0xe000ed00

0000424c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    424c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    424e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4250:	4a0b      	ldr	r2, [pc, #44]	; (4280 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4252:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    4254:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4256:	bf1e      	ittt	ne
	movne	r1, #0
    4258:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    425a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    425c:	f007 fb71 	blne	b942 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4260:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4262:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4266:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    426a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    426e:	4905      	ldr	r1, [pc, #20]	; (4284 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4270:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4272:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4274:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4276:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    427a:	4903      	ldr	r1, [pc, #12]	; (4288 <_isr_wrapper+0x3c>)
	bx r1
    427c:	4708      	bx	r1
    427e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4280:	20002984 	.word	0x20002984
	ldr r1, =_sw_isr_table
    4284:	0000bd64 	.word	0x0000bd64
	ldr r1, =z_arm_int_exit
    4288:	000046fd 	.word	0x000046fd

0000428c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    428c:	2000      	movs	r0, #0
    msr CONTROL, r0
    428e:	f380 8814 	msr	CONTROL, r0
    isb
    4292:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    4296:	f007 fca3 	bl	bbe0 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    429a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    429c:	490d      	ldr	r1, [pc, #52]	; (42d4 <__start+0x48>)
    str r0, [r1]
    429e:	6008      	str	r0, [r1, #0]
    dsb
    42a0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    42a4:	480c      	ldr	r0, [pc, #48]	; (42d8 <__start+0x4c>)
    msr msp, r0
    42a6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    42aa:	f000 fa47 	bl	473c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    42ae:	2020      	movs	r0, #32
    msr BASEPRI, r0
    42b0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    42b4:	4809      	ldr	r0, [pc, #36]	; (42dc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    42b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    42ba:	1840      	adds	r0, r0, r1
    msr PSP, r0
    42bc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    42c0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    42c4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    42c6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    42c8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    42cc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    42d0:	f7ff ffa0 	bl	4214 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    42d4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    42d8:	20006070 	.word	0x20006070
    ldr r0, =z_interrupt_stacks
    42dc:	200061b0 	.word	0x200061b0

000042e0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    42e0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    42e4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    42e8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    42ea:	4672      	mov	r2, lr
	bl z_arm_fault
    42ec:	f000 f934 	bl	4558 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    42f0:	bd01      	pop	{r0, pc}
    42f2:	bf00      	nop

000042f4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    42f4:	b570      	push	{r4, r5, r6, lr}
    42f6:	4b23      	ldr	r3, [pc, #140]	; (4384 <usage_fault.constprop.0+0x90>)
    42f8:	4c23      	ldr	r4, [pc, #140]	; (4388 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    42fa:	4d24      	ldr	r5, [pc, #144]	; (438c <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    42fc:	4824      	ldr	r0, [pc, #144]	; (4390 <usage_fault.constprop.0+0x9c>)
    42fe:	1ae4      	subs	r4, r4, r3
    4300:	08e4      	lsrs	r4, r4, #3
    4302:	01a4      	lsls	r4, r4, #6
    4304:	f044 0601 	orr.w	r6, r4, #1
    4308:	4631      	mov	r1, r6
    430a:	f005 fd03 	bl	9d14 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    430e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4310:	019b      	lsls	r3, r3, #6
    4312:	d503      	bpl.n	431c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    4314:	481f      	ldr	r0, [pc, #124]	; (4394 <usage_fault.constprop.0+0xa0>)
    4316:	4631      	mov	r1, r6
    4318:	f005 fcfc 	bl	9d14 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    431c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    431e:	01dd      	lsls	r5, r3, #7
    4320:	d504      	bpl.n	432c <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    4322:	481d      	ldr	r0, [pc, #116]	; (4398 <usage_fault.constprop.0+0xa4>)
    4324:	f044 0101 	orr.w	r1, r4, #1
    4328:	f005 fcf4 	bl	9d14 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    432c:	4d17      	ldr	r5, [pc, #92]	; (438c <usage_fault.constprop.0+0x98>)
    432e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4330:	0318      	lsls	r0, r3, #12
    4332:	d504      	bpl.n	433e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    4334:	4819      	ldr	r0, [pc, #100]	; (439c <usage_fault.constprop.0+0xa8>)
    4336:	f044 0101 	orr.w	r1, r4, #1
    433a:	f005 fceb 	bl	9d14 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    433e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4340:	0359      	lsls	r1, r3, #13
    4342:	d504      	bpl.n	434e <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4344:	4816      	ldr	r0, [pc, #88]	; (43a0 <usage_fault.constprop.0+0xac>)
    4346:	f044 0101 	orr.w	r1, r4, #1
    434a:	f005 fce3 	bl	9d14 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    434e:	4d0f      	ldr	r5, [pc, #60]	; (438c <usage_fault.constprop.0+0x98>)
    4350:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4352:	039a      	lsls	r2, r3, #14
    4354:	d504      	bpl.n	4360 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4356:	4813      	ldr	r0, [pc, #76]	; (43a4 <usage_fault.constprop.0+0xb0>)
    4358:	f044 0101 	orr.w	r1, r4, #1
    435c:	f005 fcda 	bl	9d14 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4360:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4362:	03db      	lsls	r3, r3, #15
    4364:	d504      	bpl.n	4370 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4366:	4810      	ldr	r0, [pc, #64]	; (43a8 <usage_fault.constprop.0+0xb4>)
    4368:	f044 0101 	orr.w	r1, r4, #1
    436c:	f005 fcd2 	bl	9d14 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4370:	4a06      	ldr	r2, [pc, #24]	; (438c <usage_fault.constprop.0+0x98>)
    4372:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4374:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4378:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    437c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    437e:	2000      	movs	r0, #0
    4380:	bd70      	pop	{r4, r5, r6, pc}
    4382:	bf00      	nop
    4384:	0000bee4 	.word	0x0000bee4
    4388:	0000bf14 	.word	0x0000bf14
    438c:	e000ed00 	.word	0xe000ed00
    4390:	0000cc98 	.word	0x0000cc98
    4394:	0000ccb0 	.word	0x0000ccb0
    4398:	0000ccc3 	.word	0x0000ccc3
    439c:	0000ccdd 	.word	0x0000ccdd
    43a0:	0000ccfb 	.word	0x0000ccfb
    43a4:	0000cd20 	.word	0x0000cd20
    43a8:	0000cd3a 	.word	0x0000cd3a

000043ac <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    43ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43b0:	4b2a      	ldr	r3, [pc, #168]	; (445c <bus_fault.constprop.0+0xb0>)
    43b2:	4c2b      	ldr	r4, [pc, #172]	; (4460 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    43b4:	4d2b      	ldr	r5, [pc, #172]	; (4464 <bus_fault.constprop.0+0xb8>)
    43b6:	1ae4      	subs	r4, r4, r3
    43b8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    43ba:	01a4      	lsls	r4, r4, #6
    43bc:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    43c0:	4607      	mov	r7, r0
    43c2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    43c4:	4828      	ldr	r0, [pc, #160]	; (4468 <bus_fault.constprop.0+0xbc>)
    43c6:	4641      	mov	r1, r8
    43c8:	f005 fca4 	bl	9d14 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    43cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43ce:	04d9      	lsls	r1, r3, #19
    43d0:	d503      	bpl.n	43da <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    43d2:	4826      	ldr	r0, [pc, #152]	; (446c <bus_fault.constprop.0+0xc0>)
    43d4:	4641      	mov	r1, r8
    43d6:	f005 fc9d 	bl	9d14 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    43da:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43dc:	051a      	lsls	r2, r3, #20
    43de:	d504      	bpl.n	43ea <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    43e0:	4823      	ldr	r0, [pc, #140]	; (4470 <bus_fault.constprop.0+0xc4>)
    43e2:	f044 0101 	orr.w	r1, r4, #1
    43e6:	f005 fc95 	bl	9d14 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    43ea:	4d1e      	ldr	r5, [pc, #120]	; (4464 <bus_fault.constprop.0+0xb8>)
    43ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43ee:	059b      	lsls	r3, r3, #22
    43f0:	d512      	bpl.n	4418 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    43f2:	f044 0801 	orr.w	r8, r4, #1
    43f6:	481f      	ldr	r0, [pc, #124]	; (4474 <bus_fault.constprop.0+0xc8>)
    43f8:	4641      	mov	r1, r8
    43fa:	f005 fc8b 	bl	9d14 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    43fe:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4400:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4402:	0418      	lsls	r0, r3, #16
    4404:	d508      	bpl.n	4418 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4406:	481c      	ldr	r0, [pc, #112]	; (4478 <bus_fault.constprop.0+0xcc>)
    4408:	4642      	mov	r2, r8
    440a:	f005 fc90 	bl	9d2e <log_1>
			if (from_hard_fault != 0) {
    440e:	b11f      	cbz	r7, 4418 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4410:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4412:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4416:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4418:	4d12      	ldr	r5, [pc, #72]	; (4464 <bus_fault.constprop.0+0xb8>)
    441a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    441c:	0559      	lsls	r1, r3, #21
    441e:	d504      	bpl.n	442a <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    4420:	4816      	ldr	r0, [pc, #88]	; (447c <bus_fault.constprop.0+0xd0>)
    4422:	f044 0101 	orr.w	r1, r4, #1
    4426:	f005 fc75 	bl	9d14 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    442a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    442c:	05da      	lsls	r2, r3, #23
    442e:	d50d      	bpl.n	444c <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    4430:	4813      	ldr	r0, [pc, #76]	; (4480 <bus_fault.constprop.0+0xd4>)
    4432:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4436:	f005 fc6d 	bl	9d14 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    443a:	4a0a      	ldr	r2, [pc, #40]	; (4464 <bus_fault.constprop.0+0xb8>)
    443c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    443e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4440:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4444:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4446:	7030      	strb	r0, [r6, #0]
}
    4448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    444c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    444e:	049b      	lsls	r3, r3, #18
    4450:	d5f3      	bpl.n	443a <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4452:	480c      	ldr	r0, [pc, #48]	; (4484 <bus_fault.constprop.0+0xd8>)
    4454:	f044 0101 	orr.w	r1, r4, #1
    4458:	e7ed      	b.n	4436 <bus_fault.constprop.0+0x8a>
    445a:	bf00      	nop
    445c:	0000bee4 	.word	0x0000bee4
    4460:	0000bf14 	.word	0x0000bf14
    4464:	e000ed00 	.word	0xe000ed00
    4468:	0000cd65 	.word	0x0000cd65
    446c:	0000cd7b 	.word	0x0000cd7b
    4470:	0000cd8c 	.word	0x0000cd8c
    4474:	0000cd9f 	.word	0x0000cd9f
    4478:	0000cdb8 	.word	0x0000cdb8
    447c:	0000cdcd 	.word	0x0000cdcd
    4480:	0000cde8 	.word	0x0000cde8
    4484:	0000ce00 	.word	0x0000ce00

00004488 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    448c:	4b28      	ldr	r3, [pc, #160]	; (4530 <mem_manage_fault.constprop.0+0xa8>)
    448e:	4c29      	ldr	r4, [pc, #164]	; (4534 <mem_manage_fault.constprop.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4490:	4d29      	ldr	r5, [pc, #164]	; (4538 <mem_manage_fault.constprop.0+0xb0>)
    4492:	1ae4      	subs	r4, r4, r3
    4494:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    4496:	01a4      	lsls	r4, r4, #6
    4498:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    449c:	4607      	mov	r7, r0
    449e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    44a0:	4826      	ldr	r0, [pc, #152]	; (453c <mem_manage_fault.constprop.0+0xb4>)
    44a2:	4641      	mov	r1, r8
    44a4:	f005 fc36 	bl	9d14 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    44a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44aa:	06d8      	lsls	r0, r3, #27
    44ac:	d503      	bpl.n	44b6 <mem_manage_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    44ae:	4824      	ldr	r0, [pc, #144]	; (4540 <mem_manage_fault.constprop.0+0xb8>)
    44b0:	4641      	mov	r1, r8
    44b2:	f005 fc2f 	bl	9d14 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    44b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44b8:	0719      	lsls	r1, r3, #28
    44ba:	d504      	bpl.n	44c6 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    44bc:	4821      	ldr	r0, [pc, #132]	; (4544 <mem_manage_fault.constprop.0+0xbc>)
    44be:	f044 0101 	orr.w	r1, r4, #1
    44c2:	f005 fc27 	bl	9d14 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    44c6:	4d1c      	ldr	r5, [pc, #112]	; (4538 <mem_manage_fault.constprop.0+0xb0>)
    44c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44ca:	079a      	lsls	r2, r3, #30
    44cc:	d512      	bpl.n	44f4 <mem_manage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    44ce:	f044 0801 	orr.w	r8, r4, #1
    44d2:	4641      	mov	r1, r8
    44d4:	481c      	ldr	r0, [pc, #112]	; (4548 <mem_manage_fault.constprop.0+0xc0>)
    44d6:	f005 fc1d 	bl	9d14 <log_0>
		uint32_t temp = SCB->MMFAR;
    44da:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    44dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44de:	061b      	lsls	r3, r3, #24
    44e0:	d508      	bpl.n	44f4 <mem_manage_fault.constprop.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    44e2:	481a      	ldr	r0, [pc, #104]	; (454c <mem_manage_fault.constprop.0+0xc4>)
    44e4:	4642      	mov	r2, r8
    44e6:	f005 fc22 	bl	9d2e <log_1>
			if (from_hard_fault != 0) {
    44ea:	b11f      	cbz	r7, 44f4 <mem_manage_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    44ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    44f2:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    44f4:	4d10      	ldr	r5, [pc, #64]	; (4538 <mem_manage_fault.constprop.0+0xb0>)
    44f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    44f8:	07d8      	lsls	r0, r3, #31
    44fa:	d504      	bpl.n	4506 <mem_manage_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    44fc:	4814      	ldr	r0, [pc, #80]	; (4550 <mem_manage_fault.constprop.0+0xc8>)
    44fe:	f044 0101 	orr.w	r1, r4, #1
    4502:	f005 fc07 	bl	9d14 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4506:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4508:	0699      	lsls	r1, r3, #26
    450a:	d504      	bpl.n	4516 <mem_manage_fault.constprop.0+0x8e>
		PR_FAULT_INFO(
    450c:	4811      	ldr	r0, [pc, #68]	; (4554 <mem_manage_fault.constprop.0+0xcc>)
    450e:	f044 0101 	orr.w	r1, r4, #1
    4512:	f005 fbff 	bl	9d14 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4516:	4b08      	ldr	r3, [pc, #32]	; (4538 <mem_manage_fault.constprop.0+0xb0>)
    4518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    451a:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    451c:	bf58      	it	pl
    451e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4522:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4524:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4528:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    452a:	7030      	strb	r0, [r6, #0]
}
    452c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4530:	0000bee4 	.word	0x0000bee4
    4534:	0000bf14 	.word	0x0000bf14
    4538:	e000ed00 	.word	0xe000ed00
    453c:	0000ce2f 	.word	0x0000ce2f
    4540:	0000ce45 	.word	0x0000ce45
    4544:	0000cd8c 	.word	0x0000cd8c
    4548:	0000ce78 	.word	0x0000ce78
    454c:	0000ce90 	.word	0x0000ce90
    4550:	0000cea6 	.word	0x0000cea6
    4554:	0000ce00 	.word	0x0000ce00

00004558 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    455c:	4b58      	ldr	r3, [pc, #352]	; (46c0 <z_arm_fault+0x168>)
    455e:	685e      	ldr	r6, [r3, #4]
{
    4560:	b08b      	sub	sp, #44	; 0x2c
    4562:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4564:	f3c6 0408 	ubfx	r4, r6, #0, #9
    4568:	2500      	movs	r5, #0
    456a:	f385 8811 	msr	BASEPRI, r5
    456e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4572:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4576:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    457a:	d10d      	bne.n	4598 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    457c:	f002 030c 	and.w	r3, r2, #12
    4580:	2b08      	cmp	r3, #8
    4582:	d10b      	bne.n	459c <z_arm_fault+0x44>
    4584:	494f      	ldr	r1, [pc, #316]	; (46c4 <z_arm_fault+0x16c>)
    4586:	4b50      	ldr	r3, [pc, #320]	; (46c8 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4588:	4850      	ldr	r0, [pc, #320]	; (46cc <z_arm_fault+0x174>)
    458a:	1ac9      	subs	r1, r1, r3
    458c:	08c9      	lsrs	r1, r1, #3
    458e:	0189      	lsls	r1, r1, #6
    4590:	f041 0101 	orr.w	r1, r1, #1
    4594:	f005 fbbe 	bl	9d14 <log_0>
		return NULL;
    4598:	462f      	mov	r7, r5
    459a:	e003      	b.n	45a4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    459c:	0712      	lsls	r2, r2, #28
    459e:	d401      	bmi.n	45a4 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    45a0:	4607      	mov	r7, r0
			*nested_exc = true;
    45a2:	2501      	movs	r5, #1
	*recoverable = false;
    45a4:	2300      	movs	r3, #0
    45a6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    45aa:	1ee3      	subs	r3, r4, #3
    45ac:	2b09      	cmp	r3, #9
    45ae:	d86d      	bhi.n	468c <z_arm_fault+0x134>
    45b0:	e8df f003 	tbb	[pc, r3]
    45b4:	3f5f5b05 	.word	0x3f5f5b05
    45b8:	6c6c6c6c 	.word	0x6c6c6c6c
    45bc:	636c      	.short	0x636c
    45be:	4b42      	ldr	r3, [pc, #264]	; (46c8 <z_arm_fault+0x170>)
    45c0:	4e40      	ldr	r6, [pc, #256]	; (46c4 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    45c2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 46c0 <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
    45c6:	4842      	ldr	r0, [pc, #264]	; (46d0 <z_arm_fault+0x178>)
    45c8:	1af6      	subs	r6, r6, r3
    45ca:	08f6      	lsrs	r6, r6, #3
    45cc:	01b6      	lsls	r6, r6, #6
    45ce:	f046 0601 	orr.w	r6, r6, #1
    45d2:	4631      	mov	r1, r6
    45d4:	f005 fb9e 	bl	9d14 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    45d8:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    45dc:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    45e0:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    45e4:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    45e8:	d005      	beq.n	45f6 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    45ea:	483a      	ldr	r0, [pc, #232]	; (46d4 <z_arm_fault+0x17c>)
    45ec:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    45ee:	f005 fb91 	bl	9d14 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    45f2:	2400      	movs	r4, #0
}
    45f4:	e020      	b.n	4638 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    45f6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    45fa:	005b      	lsls	r3, r3, #1
    45fc:	d51c      	bpl.n	4638 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    45fe:	4836      	ldr	r0, [pc, #216]	; (46d8 <z_arm_fault+0x180>)
    4600:	4631      	mov	r1, r6
    4602:	f005 fb87 	bl	9d14 <log_0>
		if (SCB_MMFSR != 0) {
    4606:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    460a:	b12b      	cbz	r3, 4618 <z_arm_fault+0xc0>
			reason = mem_manage_fault(esf, 1, recoverable);
    460c:	f10d 0107 	add.w	r1, sp, #7
    4610:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4612:	f7ff ff39 	bl	4488 <mem_manage_fault.constprop.0>
    4616:	e00e      	b.n	4636 <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    4618:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    461c:	b12b      	cbz	r3, 462a <z_arm_fault+0xd2>
			reason = bus_fault(esf, 1, recoverable);
    461e:	f10d 0107 	add.w	r1, sp, #7
    4622:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4624:	f7ff fec2 	bl	43ac <bus_fault.constprop.0>
    4628:	e005      	b.n	4636 <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    462a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    462e:	b29b      	uxth	r3, r3
    4630:	b113      	cbz	r3, 4638 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    4632:	f7ff fe5f 	bl	42f4 <usage_fault.constprop.0>
    4636:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4638:	f89d 3007 	ldrb.w	r3, [sp, #7]
    463c:	b993      	cbnz	r3, 4664 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    463e:	2220      	movs	r2, #32
    4640:	4639      	mov	r1, r7
    4642:	a802      	add	r0, sp, #8
    4644:	f006 faea 	bl	ac1c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4648:	9b09      	ldr	r3, [sp, #36]	; 0x24
    464a:	b39d      	cbz	r5, 46b4 <z_arm_fault+0x15c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    464c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4650:	b922      	cbnz	r2, 465c <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4652:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4656:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    465a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    465c:	a902      	add	r1, sp, #8
    465e:	4620      	mov	r0, r4
    4660:	f7ff fd9c 	bl	419c <z_arm_fatal_error>
}
    4664:	b00b      	add	sp, #44	; 0x2c
    4666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    466a:	f10d 0107 	add.w	r1, sp, #7
    466e:	2000      	movs	r0, #0
    4670:	e7cf      	b.n	4612 <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    4672:	f10d 0107 	add.w	r1, sp, #7
    4676:	2000      	movs	r0, #0
    4678:	e7d4      	b.n	4624 <z_arm_fault+0xcc>
    467a:	4912      	ldr	r1, [pc, #72]	; (46c4 <z_arm_fault+0x16c>)
    467c:	4b12      	ldr	r3, [pc, #72]	; (46c8 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    467e:	4817      	ldr	r0, [pc, #92]	; (46dc <z_arm_fault+0x184>)
    4680:	1ac9      	subs	r1, r1, r3
    4682:	08c9      	lsrs	r1, r1, #3
    4684:	0189      	lsls	r1, r1, #6
    4686:	f041 0101 	orr.w	r1, r1, #1
    468a:	e7b0      	b.n	45ee <z_arm_fault+0x96>
    468c:	4a0e      	ldr	r2, [pc, #56]	; (46c8 <z_arm_fault+0x170>)
    468e:	4b0d      	ldr	r3, [pc, #52]	; (46c4 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
    4690:	4813      	ldr	r0, [pc, #76]	; (46e0 <z_arm_fault+0x188>)
    4692:	4914      	ldr	r1, [pc, #80]	; (46e4 <z_arm_fault+0x18c>)
    4694:	1a9b      	subs	r3, r3, r2
    4696:	08db      	lsrs	r3, r3, #3
    4698:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    469c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    46a0:	bf18      	it	ne
    46a2:	4601      	movne	r1, r0
    46a4:	f043 0301 	orr.w	r3, r3, #1
    46a8:	480f      	ldr	r0, [pc, #60]	; (46e8 <z_arm_fault+0x190>)
    46aa:	f1a4 0210 	sub.w	r2, r4, #16
    46ae:	f005 fb52 	bl	9d56 <log_2>
    46b2:	e79e      	b.n	45f2 <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    46b4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    46b8:	f023 0301 	bic.w	r3, r3, #1
    46bc:	e7cd      	b.n	465a <z_arm_fault+0x102>
    46be:	bf00      	nop
    46c0:	e000ed00 	.word	0xe000ed00
    46c4:	0000bf14 	.word	0x0000bf14
    46c8:	0000bee4 	.word	0x0000bee4
    46cc:	0000cec5 	.word	0x0000cec5
    46d0:	0000cef0 	.word	0x0000cef0
    46d4:	0000cf07 	.word	0x0000cf07
    46d8:	0000cf28 	.word	0x0000cf28
    46dc:	0000cf47 	.word	0x0000cf47
    46e0:	0000cf80 	.word	0x0000cf80
    46e4:	0000cf6b 	.word	0x0000cf6b
    46e8:	0000cf99 	.word	0x0000cf99

000046ec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    46ec:	4a02      	ldr	r2, [pc, #8]	; (46f8 <z_arm_fault_init+0xc>)
    46ee:	6953      	ldr	r3, [r2, #20]
    46f0:	f043 0310 	orr.w	r3, r3, #16
    46f4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    46f6:	4770      	bx	lr
    46f8:	e000ed00 	.word	0xe000ed00

000046fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    46fc:	4b04      	ldr	r3, [pc, #16]	; (4710 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    46fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4700:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    4702:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4704:	d003      	beq.n	470e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4706:	4903      	ldr	r1, [pc, #12]	; (4714 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    470c:	600a      	str	r2, [r1, #0]

0000470e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    470e:	4770      	bx	lr
	ldr r3, =_kernel
    4710:	20002984 	.word	0x20002984
	ldr r1, =_SCS_ICSR
    4714:	e000ed04 	.word	0xe000ed04

00004718 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4718:	4907      	ldr	r1, [pc, #28]	; (4738 <z_arm_clear_arm_mpu_config+0x20>)
    471a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    471e:	2300      	movs	r3, #0
	int num_regions =
    4720:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    4724:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    4726:	4293      	cmp	r3, r2
    4728:	d100      	bne.n	472c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    472a:	4770      	bx	lr
  MPU->RNR = rnr;
    472c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    4730:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    4734:	3301      	adds	r3, #1
    4736:	e7f6      	b.n	4726 <z_arm_clear_arm_mpu_config+0xe>
    4738:	e000ed00 	.word	0xe000ed00

0000473c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    473c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    473e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4740:	2300      	movs	r3, #0
    4742:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4746:	f7ff ffe7 	bl	4718 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    474a:	4b14      	ldr	r3, [pc, #80]	; (479c <z_arm_init_arch_hw_at_boot+0x60>)
    474c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    4754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    4758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    475c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    4760:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4764:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    4768:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    476c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4770:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4774:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    4778:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    477c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4780:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    4784:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    4788:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    478c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4790:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4792:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4796:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    479a:	bd08      	pop	{r3, pc}
    479c:	e000e100 	.word	0xe000e100

000047a0 <z_arm_interrupt_init>:
    47a0:	4804      	ldr	r0, [pc, #16]	; (47b4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    47a2:	2300      	movs	r3, #0
    47a4:	2120      	movs	r1, #32
    47a6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    47a8:	3301      	adds	r3, #1
    47aa:	2b30      	cmp	r3, #48	; 0x30
    47ac:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    47b0:	d1f9      	bne.n	47a6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    47b2:	4770      	bx	lr
    47b4:	e000e100 	.word	0xe000e100

000047b8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    47b8:	4b06      	ldr	r3, [pc, #24]	; (47d4 <z_impl_k_thread_abort+0x1c>)
    47ba:	689b      	ldr	r3, [r3, #8]
    47bc:	4283      	cmp	r3, r0
    47be:	d107      	bne.n	47d0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    47c0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    47c4:	b123      	cbz	r3, 47d0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    47c6:	4a04      	ldr	r2, [pc, #16]	; (47d8 <z_impl_k_thread_abort+0x20>)
    47c8:	6853      	ldr	r3, [r2, #4]
    47ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    47ce:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    47d0:	f004 b9c8 	b.w	8b64 <z_thread_abort>
    47d4:	20002984 	.word	0x20002984
    47d8:	e000ed00 	.word	0xe000ed00

000047dc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    47dc:	4b02      	ldr	r3, [pc, #8]	; (47e8 <z_arm_configure_static_mpu_regions+0xc>)
    47de:	4a03      	ldr	r2, [pc, #12]	; (47ec <z_arm_configure_static_mpu_regions+0x10>)
    47e0:	4803      	ldr	r0, [pc, #12]	; (47f0 <z_arm_configure_static_mpu_regions+0x14>)
    47e2:	2101      	movs	r1, #1
    47e4:	f000 b87c 	b.w	48e0 <arm_core_mpu_configure_static_mpu_regions>
    47e8:	20040000 	.word	0x20040000
    47ec:	20000000 	.word	0x20000000
    47f0:	0000c25c 	.word	0x0000c25c

000047f4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    47f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    47f6:	4f2a      	ldr	r7, [pc, #168]	; (48a0 <mpu_configure_regions+0xac>)
    47f8:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    47fa:	2100      	movs	r1, #0
    47fc:	42b1      	cmp	r1, r6
    47fe:	da14      	bge.n	482a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    4800:	6844      	ldr	r4, [r0, #4]
    4802:	2c00      	cmp	r4, #0
    4804:	d048      	beq.n	4898 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4806:	b1c3      	cbz	r3, 483a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4808:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    480c:	ea14 0f0c 	tst.w	r4, ip
    4810:	d00d      	beq.n	482e <mpu_configure_regions+0x3a>
    4812:	4a24      	ldr	r2, [pc, #144]	; (48a4 <mpu_configure_regions+0xb0>)
    4814:	4b24      	ldr	r3, [pc, #144]	; (48a8 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4816:	4825      	ldr	r0, [pc, #148]	; (48ac <mpu_configure_regions+0xb8>)
    4818:	1ad2      	subs	r2, r2, r3
    481a:	08d2      	lsrs	r2, r2, #3
    481c:	0192      	lsls	r2, r2, #6
    481e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4822:	f005 fa84 	bl	9d2e <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4826:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    482a:	4610      	mov	r0, r2
    482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    482e:	2c1f      	cmp	r4, #31
    4830:	d9ef      	bls.n	4812 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    4832:	6805      	ldr	r5, [r0, #0]
		&&
    4834:	ea1c 0f05 	tst.w	ip, r5
    4838:	d1eb      	bne.n	4812 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    483a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    483c:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    483e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    4842:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    4844:	d916      	bls.n	4874 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    4846:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    484a:	d815      	bhi.n	4878 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    484c:	3c01      	subs	r4, #1
    484e:	fab4 f484 	clz	r4, r4
    4852:	f1c4 041f 	rsb	r4, r4, #31
    4856:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4858:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    485a:	ea4c 0404 	orr.w	r4, ip, r4
    485e:	d90d      	bls.n	487c <mpu_configure_regions+0x88>
    4860:	4a10      	ldr	r2, [pc, #64]	; (48a4 <mpu_configure_regions+0xb0>)
    4862:	4b11      	ldr	r3, [pc, #68]	; (48a8 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4864:	4812      	ldr	r0, [pc, #72]	; (48b0 <mpu_configure_regions+0xbc>)
    4866:	1ad2      	subs	r2, r2, r3
    4868:	08d2      	lsrs	r2, r2, #3
    486a:	0192      	lsls	r2, r2, #6
    486c:	f042 0201 	orr.w	r2, r2, #1
    4870:	4629      	mov	r1, r5
    4872:	e7d6      	b.n	4822 <mpu_configure_regions+0x2e>
		return REGION_32B;
    4874:	2408      	movs	r4, #8
    4876:	e7ef      	b.n	4858 <mpu_configure_regions+0x64>
		return REGION_4G;
    4878:	243e      	movs	r4, #62	; 0x3e
    487a:	e7ed      	b.n	4858 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    487c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    4880:	432a      	orrs	r2, r5
    4882:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4886:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    488a:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    488e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4892:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    4896:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    4898:	3101      	adds	r1, #1
    489a:	300c      	adds	r0, #12
    489c:	e7ae      	b.n	47fc <mpu_configure_regions+0x8>
    489e:	bf00      	nop
    48a0:	e000ed00 	.word	0xe000ed00
    48a4:	0000bf0c 	.word	0x0000bf0c
    48a8:	0000bee4 	.word	0x0000bee4
    48ac:	0000cfb0 	.word	0x0000cfb0
    48b0:	0000cfd3 	.word	0x0000cfd3

000048b4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    48b4:	4b04      	ldr	r3, [pc, #16]	; (48c8 <arm_core_mpu_enable+0x14>)
    48b6:	2205      	movs	r2, #5
    48b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    48bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48c0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    48c4:	4770      	bx	lr
    48c6:	bf00      	nop
    48c8:	e000ed00 	.word	0xe000ed00

000048cc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    48cc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    48d0:	4b02      	ldr	r3, [pc, #8]	; (48dc <arm_core_mpu_disable+0x10>)
    48d2:	2200      	movs	r2, #0
    48d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    48d8:	4770      	bx	lr
    48da:	bf00      	nop
    48dc:	e000ed00 	.word	0xe000ed00

000048e0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    48e0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    48e2:	4c03      	ldr	r4, [pc, #12]	; (48f0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    48e4:	2301      	movs	r3, #1
    48e6:	7822      	ldrb	r2, [r4, #0]
    48e8:	f7ff ff84 	bl	47f4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    48ec:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    48ee:	bd10      	pop	{r4, pc}
    48f0:	20002f76 	.word	0x20002f76

000048f4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    48f4:	4914      	ldr	r1, [pc, #80]	; (4948 <z_arm_mpu_init+0x54>)
    48f6:	6808      	ldr	r0, [r1, #0]
    48f8:	2808      	cmp	r0, #8
{
    48fa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    48fc:	d821      	bhi.n	4942 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    48fe:	f7ff ffe5 	bl	48cc <arm_core_mpu_disable>
	MPU->RNR = index;
    4902:	4c12      	ldr	r4, [pc, #72]	; (494c <z_arm_mpu_init+0x58>)
    4904:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4906:	2200      	movs	r2, #0
    4908:	4290      	cmp	r0, r2
    490a:	f101 010c 	add.w	r1, r1, #12
    490e:	d105      	bne.n	491c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4910:	4b0f      	ldr	r3, [pc, #60]	; (4950 <z_arm_mpu_init+0x5c>)
    4912:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4914:	f7ff ffce 	bl	48b4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4918:	2000      	movs	r0, #0
}
    491a:	bd10      	pop	{r4, pc}
    491c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4920:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4924:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4928:	4313      	orrs	r3, r2
    492a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    492e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4932:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4936:	f043 0301 	orr.w	r3, r3, #1
    493a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    493e:	3201      	adds	r2, #1
    4940:	e7e2      	b.n	4908 <z_arm_mpu_init+0x14>
		return -1;
    4942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4946:	e7e8      	b.n	491a <z_arm_mpu_init+0x26>
    4948:	0000c268 	.word	0x0000c268
    494c:	e000ed00 	.word	0xe000ed00
    4950:	20002f76 	.word	0x20002f76

00004954 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4954:	4b01      	ldr	r3, [pc, #4]	; (495c <__stdout_hook_install+0x8>)
    4956:	6018      	str	r0, [r3, #0]
}
    4958:	4770      	bx	lr
    495a:	bf00      	nop
    495c:	20000050 	.word	0x20000050

00004960 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4960:	f04f 0320 	mov.w	r3, #32
    4964:	f3ef 8211 	mrs	r2, BASEPRI
    4968:	f383 8811 	msr	BASEPRI, r3
    496c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4970:	4906      	ldr	r1, [pc, #24]	; (498c <nordicsemi_nrf52_init+0x2c>)
    4972:	2301      	movs	r3, #1
    4974:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4978:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    497c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4980:	f382 8811 	msr	BASEPRI, r2
    4984:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4988:	2000      	movs	r0, #0
    498a:	4770      	bx	lr
    498c:	4001e000 	.word	0x4001e000

00004990 <sys_arch_reboot>:
    *p_gpregret = val;
    4990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4994:	b2c0      	uxtb	r0, r0
    4996:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    499a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    499e:	4905      	ldr	r1, [pc, #20]	; (49b4 <sys_arch_reboot+0x24>)
    49a0:	4b05      	ldr	r3, [pc, #20]	; (49b8 <sys_arch_reboot+0x28>)
    49a2:	68ca      	ldr	r2, [r1, #12]
    49a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    49a8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    49aa:	60cb      	str	r3, [r1, #12]
    49ac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    49b0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    49b2:	e7fd      	b.n	49b0 <sys_arch_reboot+0x20>
    49b4:	e000ed00 	.word	0xe000ed00
    49b8:	05fa0004 	.word	0x05fa0004

000049bc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    49bc:	b120      	cbz	r0, 49c8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    49be:	4b03      	ldr	r3, [pc, #12]	; (49cc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    49c0:	0180      	lsls	r0, r0, #6
    49c2:	f043 0301 	orr.w	r3, r3, #1
    49c6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    49c8:	4770      	bx	lr
    49ca:	bf00      	nop
    49cc:	0000bfd0 	.word	0x0000bfd0

000049d0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    49d0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    49d2:	4b09      	ldr	r3, [pc, #36]	; (49f8 <gpio_nrfx_init+0x28>)
    49d4:	781a      	ldrb	r2, [r3, #0]
    49d6:	b96a      	cbnz	r2, 49f4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    49d8:	2101      	movs	r1, #1
    49da:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    49dc:	2006      	movs	r0, #6
    49de:	2105      	movs	r1, #5
    49e0:	f7ff fb78 	bl	40d4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    49e4:	2006      	movs	r0, #6
    49e6:	f7ff fb43 	bl	4070 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    49ea:	4b04      	ldr	r3, [pc, #16]	; (49fc <gpio_nrfx_init+0x2c>)
    49ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    49f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    49f4:	2000      	movs	r0, #0
    49f6:	bd08      	pop	{r3, pc}
    49f8:	20002f77 	.word	0x20002f77
    49fc:	40006000 	.word	0x40006000

00004a00 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4a00:	4b2b      	ldr	r3, [pc, #172]	; (4ab0 <gpio_nrfx_config+0xb0>)
{
    4a02:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
    4a04:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4a06:	482b      	ldr	r0, [pc, #172]	; (4ab4 <gpio_nrfx_config+0xb4>)
    4a08:	4013      	ands	r3, r2
    4a0a:	4283      	cmp	r3, r0
    4a0c:	d041      	beq.n	4a92 <gpio_nrfx_config+0x92>
    4a0e:	d80d      	bhi.n	4a2c <gpio_nrfx_config+0x2c>
    4a10:	2b06      	cmp	r3, #6
    4a12:	d015      	beq.n	4a40 <gpio_nrfx_config+0x40>
    4a14:	d805      	bhi.n	4a22 <gpio_nrfx_config+0x22>
    4a16:	b19b      	cbz	r3, 4a40 <gpio_nrfx_config+0x40>
    4a18:	2b02      	cmp	r3, #2
    4a1a:	d03c      	beq.n	4a96 <gpio_nrfx_config+0x96>
    4a1c:	f06f 0015 	mvn.w	r0, #21
    4a20:	e036      	b.n	4a90 <gpio_nrfx_config+0x90>
    4a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4a26:	d1f9      	bne.n	4a1c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    4a28:	2301      	movs	r3, #1
    4a2a:	e009      	b.n	4a40 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4a2c:	4822      	ldr	r0, [pc, #136]	; (4ab8 <gpio_nrfx_config+0xb8>)
    4a2e:	4283      	cmp	r3, r0
    4a30:	d033      	beq.n	4a9a <gpio_nrfx_config+0x9a>
    4a32:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4a36:	d032      	beq.n	4a9e <gpio_nrfx_config+0x9e>
    4a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4a3c:	d1ee      	bne.n	4a1c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    4a3e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    4a40:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    4a42:	bf54      	ite	pl
    4a44:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    4a48:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4a4a:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    4a4e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    4a50:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4a54:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    4a58:	d507      	bpl.n	4a6a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4a5a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4a5e:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4a60:	d01f      	beq.n	4aa2 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4a62:	2201      	movs	r2, #1
    4a64:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    4a66:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4a6a:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    4a6c:	4c13      	ldr	r4, [pc, #76]	; (4abc <gpio_nrfx_config+0xbc>)
    4a6e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    4a70:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4a74:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    4a78:	bf18      	it	ne
    4a7a:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4a7e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4a82:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4a86:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    4a8a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    4a8e:	2000      	movs	r0, #0
}
    4a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    4a92:	2307      	movs	r3, #7
    4a94:	e7d4      	b.n	4a40 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    4a96:	2304      	movs	r3, #4
    4a98:	e7d2      	b.n	4a40 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    4a9a:	2305      	movs	r3, #5
    4a9c:	e7d0      	b.n	4a40 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    4a9e:	2303      	movs	r3, #3
    4aa0:	e7ce      	b.n	4a40 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    4aa2:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    4aa4:	bf42      	ittt	mi
    4aa6:	2201      	movmi	r2, #1
    4aa8:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    4aaa:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    4aae:	e7dc      	b.n	4a6a <gpio_nrfx_config+0x6a>
    4ab0:	00f00006 	.word	0x00f00006
    4ab4:	00100006 	.word	0x00100006
    4ab8:	00400002 	.word	0x00400002
    4abc:	50000300 	.word	0x50000300

00004ac0 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4ac0:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    4ac4:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    4ac6:	4b08      	ldr	r3, [pc, #32]	; (4ae8 <nrf_gpio_cfg_sense_set+0x28>)
    4ac8:	2801      	cmp	r0, #1
    4aca:	bf18      	it	ne
    4acc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4ad0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4ad4:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    4ad8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4adc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    4ae0:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    4ae4:	4770      	bx	lr
    4ae6:	bf00      	nop
    4ae8:	50000300 	.word	0x50000300

00004aec <check_level_trigger_pins>:
{
    4aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return port->data;
    4af0:	6903      	ldr	r3, [r0, #16]
	return port->config;
    4af2:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
    4af6:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
    4af8:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4b78 <check_level_trigger_pins+0x8c>
{
    4afc:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    4afe:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    4b02:	430a      	orrs	r2, r1
    4b04:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    4b08:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    4b0c:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    4b0e:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    4b12:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    4b14:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    4b18:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    4b1a:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    4b1c:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    4b20:	b917      	cbnz	r7, 4b28 <check_level_trigger_pins+0x3c>
}
    4b22:	4628      	mov	r0, r5
    4b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    4b28:	423c      	tst	r4, r7
    4b2a:	d021      	beq.n	4b70 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4b2c:	f89a 3008 	ldrb.w	r3, [sl, #8]
    4b30:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    4b34:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4b36:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
    4b3a:	d114      	bne.n	4b66 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
    4b3c:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
    4b3e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    4b40:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
    4b44:	bf14      	ite	ne
    4b46:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    4b4a:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4b4c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4b54:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    4b58:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    4b5a:	bf02      	ittt	eq
    4b5c:	f8d8 3000 	ldreq.w	r3, [r8]
    4b60:	4323      	orreq	r3, r4
    4b62:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    4b66:	2100      	movs	r1, #0
    4b68:	f7ff ffaa 	bl	4ac0 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    4b6c:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    4b70:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    4b74:	0064      	lsls	r4, r4, #1
    4b76:	e7d3      	b.n	4b20 <check_level_trigger_pins+0x34>
    4b78:	50000300 	.word	0x50000300

00004b7c <gpiote_event_handler>:
{
    4b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    4b7e:	2400      	movs	r4, #0
{
    4b80:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    4b82:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    4b86:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4b8a:	4e28      	ldr	r6, [pc, #160]	; (4c2c <gpiote_event_handler+0xb0>)
    4b8c:	f8d6 517c 	ldr.w	r5, [r6, #380]	; 0x17c
	if (port_event) {
    4b90:	b16d      	cbz	r5, 4bae <gpiote_event_handler+0x32>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    4b92:	a902      	add	r1, sp, #8
    4b94:	4826      	ldr	r0, [pc, #152]	; (4c30 <gpiote_event_handler+0xb4>)
    4b96:	f7ff ffa9 	bl	4aec <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    4b9a:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    4b9c:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    4b9e:	4825      	ldr	r0, [pc, #148]	; (4c34 <gpiote_event_handler+0xb8>)
    4ba0:	f7ff ffa4 	bl	4aec <check_level_trigger_pins>
		fired_triggers[1] =
    4ba4:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ba6:	f8c6 417c 	str.w	r4, [r6, #380]	; 0x17c
    4baa:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
{
    4bae:	4922      	ldr	r1, [pc, #136]	; (4c38 <gpiote_event_handler+0xbc>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    4bb0:	4c1e      	ldr	r4, [pc, #120]	; (4c2c <gpiote_event_handler+0xb0>)
    4bb2:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    4bb4:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4bb6:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    4bb8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    4bbc:	fa06 f002 	lsl.w	r0, r6, r2
    4bc0:	4218      	tst	r0, r3
    4bc2:	d016      	beq.n	4bf2 <gpiote_event_handler+0x76>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4bc4:	680b      	ldr	r3, [r1, #0]
    4bc6:	b1a3      	cbz	r3, 4bf2 <gpiote_event_handler+0x76>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4bc8:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    4bcc:	af04      	add	r7, sp, #16
    4bce:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4bd2:	f8c1 c000 	str.w	ip, [r1]
    4bd6:	f3c3 3040 	ubfx	r0, r3, #13, #1
    4bda:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    4bde:	f3c3 2304 	ubfx	r3, r3, #8, #5
    4be2:	f850 7c10 	ldr.w	r7, [r0, #-16]
    4be6:	fa06 f303 	lsl.w	r3, r6, r3
    4bea:	433b      	orrs	r3, r7
    4bec:	f840 3c10 	str.w	r3, [r0, #-16]
    4bf0:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4bf2:	3201      	adds	r2, #1
    4bf4:	2a08      	cmp	r2, #8
    4bf6:	f101 0104 	add.w	r1, r1, #4
    4bfa:	d1dd      	bne.n	4bb8 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
    4bfc:	9a00      	ldr	r2, [sp, #0]
    4bfe:	b122      	cbz	r2, 4c0a <gpiote_event_handler+0x8e>
	gpio_fire_callbacks(list, port, pins);
    4c00:	4b0e      	ldr	r3, [pc, #56]	; (4c3c <gpiote_event_handler+0xc0>)
    4c02:	490b      	ldr	r1, [pc, #44]	; (4c30 <gpiote_event_handler+0xb4>)
    4c04:	6858      	ldr	r0, [r3, #4]
    4c06:	f006 f88f 	bl	ad28 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
    4c0a:	9a01      	ldr	r2, [sp, #4]
    4c0c:	b122      	cbz	r2, 4c18 <gpiote_event_handler+0x9c>
	gpio_fire_callbacks(list, port, pins);
    4c0e:	4b0c      	ldr	r3, [pc, #48]	; (4c40 <gpiote_event_handler+0xc4>)
    4c10:	4908      	ldr	r1, [pc, #32]	; (4c34 <gpiote_event_handler+0xb8>)
    4c12:	6858      	ldr	r0, [r3, #4]
    4c14:	f006 f888 	bl	ad28 <gpio_fire_callbacks.isra.0>
	if (port_event) {
    4c18:	b12d      	cbz	r5, 4c26 <gpiote_event_handler+0xaa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    4c1a:	4805      	ldr	r0, [pc, #20]	; (4c30 <gpiote_event_handler+0xb4>)
    4c1c:	f006 f895 	bl	ad4a <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    4c20:	4804      	ldr	r0, [pc, #16]	; (4c34 <gpiote_event_handler+0xb8>)
    4c22:	f006 f892 	bl	ad4a <cfg_level_pins>
}
    4c26:	b005      	add	sp, #20
    4c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c2a:	bf00      	nop
    4c2c:	40006000 	.word	0x40006000
    4c30:	0000bcd4 	.word	0x0000bcd4
    4c34:	0000bcec 	.word	0x0000bcec
    4c38:	40006100 	.word	0x40006100
    4c3c:	2000278c 	.word	0x2000278c
    4c40:	200027a8 	.word	0x200027a8

00004c44 <gpio_nrfx_pin_interrupt_configure>:
{
    4c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c46:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c48:	6842      	ldr	r2, [r0, #4]
	return port->data;
    4c4a:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c4c:	7a12      	ldrb	r2, [r2, #8]
    4c4e:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    4c52:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
    4c56:	460e      	mov	r6, r1
    4c58:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    4c5c:	d110      	bne.n	4c80 <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
    4c5e:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
    4c60:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
    4c62:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
    4c66:	4961      	ldr	r1, [pc, #388]	; (4dec <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4c68:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    4c6c:	bf18      	it	ne
    4c6e:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4c72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4c76:	07d0      	lsls	r0, r2, #31
    4c78:	d507      	bpl.n	4c8a <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
    4c7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4c7e:	e09a      	b.n	4db6 <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4c80:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
    4c84:	68f9      	ldr	r1, [r7, #12]
    4c86:	f000 8098 	beq.w	4dba <gpio_nrfx_pin_interrupt_configure+0x176>
    4c8a:	68fa      	ldr	r2, [r7, #12]
    4c8c:	2101      	movs	r1, #1
    4c8e:	40b1      	lsls	r1, r6
    4c90:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    4c92:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4c94:	60f9      	str	r1, [r7, #12]
    4c96:	2101      	movs	r1, #1
    4c98:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    4c9a:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    4c9e:	bf0c      	ite	eq
    4ca0:	430a      	orreq	r2, r1
    4ca2:	438a      	bicne	r2, r1
    4ca4:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    4ca6:	69ba      	ldr	r2, [r7, #24]
    4ca8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    4cac:	bf0c      	ite	eq
    4cae:	430a      	orreq	r2, r1
    4cb0:	438a      	bicne	r2, r1
    4cb2:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    4cb4:	693a      	ldr	r2, [r7, #16]
    4cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    4cba:	bf0c      	ite	eq
    4cbc:	4311      	orreq	r1, r2
    4cbe:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
    4cc2:	4a4b      	ldr	r2, [pc, #300]	; (4df0 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
    4cc4:	6139      	str	r1, [r7, #16]
    4cc6:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4cca:	2000      	movs	r0, #0
    4ccc:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4cce:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    4cd2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    4cd6:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    4cda:	428d      	cmp	r5, r1
    4cdc:	d172      	bne.n	4dc4 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
    4cde:	fa23 f100 	lsr.w	r1, r3, r0
    4ce2:	07c9      	lsls	r1, r1, #31
    4ce4:	d56e      	bpl.n	4dc4 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    4ce6:	0083      	lsls	r3, r0, #2
    4ce8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4cec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4cf0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    4cf4:	f021 0101 	bic.w	r1, r1, #1
    4cf8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    4cfc:	2301      	movs	r3, #1
    4cfe:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    4d00:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    4d04:	b2c0      	uxtb	r0, r0
    4d06:	f002 fb05 	bl	7314 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    4d0a:	4628      	mov	r0, r5
    4d0c:	2100      	movs	r1, #0
    4d0e:	f7ff fed7 	bl	4ac0 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    4d12:	68f8      	ldr	r0, [r7, #12]
    4d14:	40f0      	lsrs	r0, r6
    4d16:	f010 0001 	ands.w	r0, r0, #1
    4d1a:	d04c      	beq.n	4db6 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
    4d1c:	6978      	ldr	r0, [r7, #20]
    4d1e:	40f0      	lsrs	r0, r6
    4d20:	f010 0401 	ands.w	r4, r0, #1
    4d24:	d055      	beq.n	4dd2 <gpio_nrfx_pin_interrupt_configure+0x18e>
				if (data->double_edge & BIT(pin)) {
    4d26:	69bb      	ldr	r3, [r7, #24]
    4d28:	40f3      	lsrs	r3, r6
    4d2a:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    4d2c:	bf5f      	itttt	pl
    4d2e:	6939      	ldrpl	r1, [r7, #16]
    4d30:	fa21 f606 	lsrpl.w	r6, r1, r6
    4d34:	f006 0601 	andpl.w	r6, r6, #1
    4d38:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    4d3c:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    4d40:	bf54      	ite	pl
    4d42:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    4d44:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    4d46:	f002 fb05 	bl	7354 <nrfx_gpiote_channel_alloc>
    4d4a:	4b2a      	ldr	r3, [pc, #168]	; (4df4 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
    4d4c:	4298      	cmp	r0, r3
    4d4e:	d13d      	bne.n	4dcc <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    4d50:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4d54:	0093      	lsls	r3, r2, #2
    4d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d5a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d5e:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4d60:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    4d64:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    4d68:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4d6c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d70:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    4d74:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    4d78:	430d      	orrs	r5, r1
    4d7a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    4d7e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    4d82:	0093      	lsls	r3, r2, #2
    4d84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d88:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4d8c:	2000      	movs	r0, #0
    4d8e:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    4d90:	f89d 1007 	ldrb.w	r1, [sp, #7]
    4d94:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4d96:	008b      	lsls	r3, r1, #2
    4d98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d9c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4da0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4da4:	f042 0201 	orr.w	r2, r2, #1
    4da8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    4dac:	4a10      	ldr	r2, [pc, #64]	; (4df0 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    4dae:	2301      	movs	r3, #1
    4db0:	408b      	lsls	r3, r1
    4db2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4db6:	b003      	add	sp, #12
    4db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    4dba:	2201      	movs	r2, #1
    4dbc:	40b2      	lsls	r2, r6
    4dbe:	ea21 0102 	bic.w	r1, r1, r2
    4dc2:	e766      	b.n	4c92 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    4dc4:	3001      	adds	r0, #1
    4dc6:	2808      	cmp	r0, #8
    4dc8:	d181      	bne.n	4cce <gpio_nrfx_pin_interrupt_configure+0x8a>
    4dca:	e79e      	b.n	4d0a <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    4dcc:	f06f 0012 	mvn.w	r0, #18
    4dd0:	e7f1      	b.n	4db6 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4dd2:	6939      	ldr	r1, [r7, #16]
    4dd4:	40f1      	lsrs	r1, r6
    4dd6:	f001 0101 	and.w	r1, r1, #1
    4dda:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    4dde:	4628      	mov	r0, r5
    4de0:	b2c9      	uxtb	r1, r1
    4de2:	f7ff fe6d 	bl	4ac0 <nrf_gpio_cfg_sense_set>
	int res = 0;
    4de6:	4620      	mov	r0, r4
    4de8:	e7e5      	b.n	4db6 <gpio_nrfx_pin_interrupt_configure+0x172>
    4dea:	bf00      	nop
    4dec:	50000300 	.word	0x50000300
    4df0:	40006000 	.word	0x40006000
    4df4:	0bad0000 	.word	0x0bad0000

00004df8 <lis2dh_sample_fetch_temp>:
{
    4df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
    4dfa:	6904      	ldr	r4, [r0, #16]
	const struct lis2dh_config *cfg = dev->config;
    4dfc:	6845      	ldr	r5, [r0, #4]
	ret = lis2dh->hw_tf->read_data(dev, cfg->temperature.dout_addr, raw,
    4dfe:	6863      	ldr	r3, [r4, #4]
    4e00:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
    4e04:	681e      	ldr	r6, [r3, #0]
    4e06:	aa01      	add	r2, sp, #4
    4e08:	2302      	movs	r3, #2
    4e0a:	47b0      	blx	r6
	if (ret < 0) {
    4e0c:	2800      	cmp	r0, #0
    4e0e:	da0d      	bge.n	4e2c <lis2dh_sample_fetch_temp+0x34>
    4e10:	4b11      	ldr	r3, [pc, #68]	; (4e58 <lis2dh_sample_fetch_temp+0x60>)
    4e12:	4912      	ldr	r1, [pc, #72]	; (4e5c <lis2dh_sample_fetch_temp+0x64>)
		LOG_WRN("Failed to fetch raw temperature sample");
    4e14:	4812      	ldr	r0, [pc, #72]	; (4e60 <lis2dh_sample_fetch_temp+0x68>)
    4e16:	1ac9      	subs	r1, r1, r3
    4e18:	08c9      	lsrs	r1, r1, #3
    4e1a:	0189      	lsls	r1, r1, #6
    4e1c:	f041 0102 	orr.w	r1, r1, #2
    4e20:	f004 ff78 	bl	9d14 <log_0>
		ret = -EIO;
    4e24:	f06f 0004 	mvn.w	r0, #4
}
    4e28:	b002      	add	sp, #8
    4e2a:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh->temperature.val1 = (int32_t)((int8_t)raw[1]);
    4e2c:	f99d 1005 	ldrsb.w	r1, [sp, #5]
    4e30:	6161      	str	r1, [r4, #20]
		if (cfg->temperature.fractional_bits == 0) {
    4e32:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
    4e36:	b90a      	cbnz	r2, 4e3c <lis2dh_sample_fetch_temp+0x44>
			lis2dh->temperature.val2 = 0;
    4e38:	61a2      	str	r2, [r4, #24]
    4e3a:	e7f5      	b.n	4e28 <lis2dh_sample_fetch_temp+0x30>
				(raw[0] >> (8 - cfg->temperature.fractional_bits));
    4e3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4e40:	f1c2 0508 	rsb	r5, r2, #8
    4e44:	412b      	asrs	r3, r5
			lis2dh->temperature.val2 = (lis2dh->temperature.val2 * 1000000);
    4e46:	4d07      	ldr	r5, [pc, #28]	; (4e64 <lis2dh_sample_fetch_temp+0x6c>)
    4e48:	436b      	muls	r3, r5
			lis2dh->temperature.val2 >>= cfg->temperature.fractional_bits;
    4e4a:	4113      	asrs	r3, r2
			if (lis2dh->temperature.val1 < 0) {
    4e4c:	2900      	cmp	r1, #0
				lis2dh->temperature.val2 *= -1;
    4e4e:	bfb8      	it	lt
    4e50:	425b      	neglt	r3, r3
    4e52:	61a3      	str	r3, [r4, #24]
	return ret;
    4e54:	e7e8      	b.n	4e28 <lis2dh_sample_fetch_temp+0x30>
    4e56:	bf00      	nop
    4e58:	0000bee4 	.word	0x0000bee4
    4e5c:	0000bef4 	.word	0x0000bef4
    4e60:	0000d013 	.word	0x0000d013
    4e64:	000f4240 	.word	0x000f4240

00004e68 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
    4e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
    4e6c:	6847      	ldr	r7, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
    4e6e:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
    4e72:	4606      	mov	r6, r0
    4e74:	b088      	sub	sp, #32
	int status;
	uint8_t id;
	uint8_t raw[6];

	lis2dh->bus = device_get_binding(cfg->bus_name);
    4e76:	6838      	ldr	r0, [r7, #0]
    4e78:	f003 f810 	bl	7e9c <z_impl_device_get_binding>
    4e7c:	4d55      	ldr	r5, [pc, #340]	; (4fd4 <lis2dh_init+0x16c>)
    4e7e:	4b56      	ldr	r3, [pc, #344]	; (4fd8 <lis2dh_init+0x170>)
    4e80:	f8c8 0000 	str.w	r0, [r8]
    4e84:	1aed      	subs	r5, r5, r3
    4e86:	08ed      	lsrs	r5, r5, #3
    4e88:	01ad      	lsls	r5, r5, #6
	if (!lis2dh->bus) {
    4e8a:	b958      	cbnz	r0, 4ea4 <lis2dh_init+0x3c>
		LOG_ERR("master not found: %s", cfg->bus_name);
    4e8c:	6839      	ldr	r1, [r7, #0]
    4e8e:	4853      	ldr	r0, [pc, #332]	; (4fdc <lis2dh_init+0x174>)
    4e90:	f045 0201 	orr.w	r2, r5, #1
		LOG_ERR("Failed to read chip id.");
		return status;
	}

	if (id != LIS2DH_CHIP_ID) {
		LOG_ERR("Invalid chip ID: %02x\n", id);
    4e94:	f004 ff4b 	bl	9d2e <log_1>
		return -EINVAL;
    4e98:	f06f 0415 	mvn.w	r4, #21

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
    4e9c:	4620      	mov	r0, r4
    4e9e:	b008      	add	sp, #32
    4ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	cfg->bus_init(dev);
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	4630      	mov	r0, r6
    4ea8:	4798      	blx	r3
	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
    4eaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4eae:	f10d 0203 	add.w	r2, sp, #3
    4eb2:	689b      	ldr	r3, [r3, #8]
    4eb4:	210f      	movs	r1, #15
    4eb6:	4630      	mov	r0, r6
    4eb8:	4798      	blx	r3
	if (status < 0) {
    4eba:	1e04      	subs	r4, r0, #0
    4ebc:	da05      	bge.n	4eca <lis2dh_init+0x62>
		LOG_ERR("Failed to read chip id.");
    4ebe:	4848      	ldr	r0, [pc, #288]	; (4fe0 <lis2dh_init+0x178>)
    4ec0:	f045 0101 	orr.w	r1, r5, #1
			LOG_ERR("Failed to initialize interrupts.");
    4ec4:	f004 ff26 	bl	9d14 <log_0>
			return status;
    4ec8:	e7e8      	b.n	4e9c <lis2dh_init+0x34>
	if (id != LIS2DH_CHIP_ID) {
    4eca:	f89d 1003 	ldrb.w	r1, [sp, #3]
    4ece:	2933      	cmp	r1, #51	; 0x33
    4ed0:	d003      	beq.n	4eda <lis2dh_init+0x72>
		LOG_ERR("Invalid chip ID: %02x\n", id);
    4ed2:	4844      	ldr	r0, [pc, #272]	; (4fe4 <lis2dh_init+0x17c>)
    4ed4:	f045 0201 	orr.w	r2, r5, #1
    4ed8:	e7dc      	b.n	4e94 <lis2dh_init+0x2c>
	if (cfg->is_lsm303agr_dev) {
    4eda:	7f3b      	ldrb	r3, [r7, #28]
    4edc:	b15b      	cbz	r3, 4ef6 <lis2dh_init+0x8e>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
    4ede:	4b42      	ldr	r3, [pc, #264]	; (4fe8 <lis2dh_init+0x180>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
    4ee0:	f644 1216 	movw	r2, #18710	; 0x4916
    4ee4:	f242 418b 	movw	r1, #9355	; 0x248b
    4ee8:	e9c3 1200 	strd	r1, r2, [r3]
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
    4eec:	4a3f      	ldr	r2, [pc, #252]	; (4fec <lis2dh_init+0x184>)
    4eee:	f249 202d 	movw	r0, #37421	; 0x922d
    4ef2:	e9c3 0202 	strd	r0, r2, [r3, #8]
	if (cfg->disc_pull_up) {
    4ef6:	7f7b      	ldrb	r3, [r7, #29]
    4ef8:	b16b      	cbz	r3, 4f16 <lis2dh_init+0xae>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
    4efa:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4efe:	691c      	ldr	r4, [r3, #16]
    4f00:	2380      	movs	r3, #128	; 0x80
    4f02:	461a      	mov	r2, r3
    4f04:	211e      	movs	r1, #30
    4f06:	4630      	mov	r0, r6
    4f08:	47a0      	blx	r4
		if (status < 0) {
    4f0a:	1e04      	subs	r4, r0, #0
    4f0c:	da03      	bge.n	4f16 <lis2dh_init+0xae>
			LOG_ERR("Failed to disconnect SDO/SA0 pull-up.");
    4f0e:	4838      	ldr	r0, [pc, #224]	; (4ff0 <lis2dh_init+0x188>)
    4f10:	f045 0101 	orr.w	r1, r5, #1
    4f14:	e7d6      	b.n	4ec4 <lis2dh_init+0x5c>
	(void)memset(raw, 0, sizeof(raw));
    4f16:	2206      	movs	r2, #6
    4f18:	2100      	movs	r1, #0
    4f1a:	a801      	add	r0, sp, #4
    4f1c:	f005 fe89 	bl	ac32 <memset>
	raw[0] = LIS2DH_ACCEL_EN_BITS;
    4f20:	2307      	movs	r3, #7
    4f22:	f88d 3004 	strb.w	r3, [sp, #4]
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
    4f26:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4f2a:	aa01      	add	r2, sp, #4
    4f2c:	685c      	ldr	r4, [r3, #4]
    4f2e:	2120      	movs	r1, #32
    4f30:	2306      	movs	r3, #6
    4f32:	4630      	mov	r0, r6
    4f34:	47a0      	blx	r4
	if (status < 0) {
    4f36:	1e04      	subs	r4, r0, #0
    4f38:	da03      	bge.n	4f42 <lis2dh_init+0xda>
		LOG_ERR("Failed to reset ctrl registers.");
    4f3a:	482e      	ldr	r0, [pc, #184]	; (4ff4 <lis2dh_init+0x18c>)
    4f3c:	f045 0101 	orr.w	r1, r5, #1
    4f40:	e7c0      	b.n	4ec4 <lis2dh_init+0x5c>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
    4f42:	4b29      	ldr	r3, [pc, #164]	; (4fe8 <lis2dh_init+0x180>)
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	f8c8 3010 	str.w	r3, [r8, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4,
    4f4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4f4e:	2280      	movs	r2, #128	; 0x80
    4f50:	68db      	ldr	r3, [r3, #12]
    4f52:	2123      	movs	r1, #35	; 0x23
    4f54:	4630      	mov	r0, r6
    4f56:	4798      	blx	r3
	if (status < 0) {
    4f58:	1e04      	subs	r4, r0, #0
    4f5a:	da03      	bge.n	4f64 <lis2dh_init+0xfc>
		LOG_ERR("Failed to set full scale ctrl register.");
    4f5c:	4826      	ldr	r0, [pc, #152]	; (4ff8 <lis2dh_init+0x190>)
    4f5e:	f045 0101 	orr.w	r1, r5, #1
    4f62:	e7af      	b.n	4ec4 <lis2dh_init+0x5c>
	status = lis2dh->hw_tf->update_reg(dev, cfg->temperature.cfg_addr,
    4f64:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4f68:	f897 3020 	ldrb.w	r3, [r7, #32]
    4f6c:	6914      	ldr	r4, [r2, #16]
    4f6e:	7ff9      	ldrb	r1, [r7, #31]
    4f70:	461a      	mov	r2, r3
    4f72:	4630      	mov	r0, r6
    4f74:	47a0      	blx	r4
	if (status < 0) {
    4f76:	1e04      	subs	r4, r0, #0
    4f78:	da03      	bge.n	4f82 <lis2dh_init+0x11a>
		LOG_ERR("Failed to enable temperature measurement");
    4f7a:	4820      	ldr	r0, [pc, #128]	; (4ffc <lis2dh_init+0x194>)
    4f7c:	f045 0101 	orr.w	r1, r5, #1
    4f80:	e7a0      	b.n	4ec4 <lis2dh_init+0x5c>
	if (cfg->gpio_drdy.port != NULL || cfg->gpio_int.port != NULL) {
    4f82:	68fb      	ldr	r3, [r7, #12]
    4f84:	b90b      	cbnz	r3, 4f8a <lis2dh_init+0x122>
    4f86:	697b      	ldr	r3, [r7, #20]
    4f88:	b143      	cbz	r3, 4f9c <lis2dh_init+0x134>
		status = lis2dh_init_interrupt(dev);
    4f8a:	4630      	mov	r0, r6
    4f8c:	f000 fac2 	bl	5514 <lis2dh_init_interrupt>
		if (status < 0) {
    4f90:	1e04      	subs	r4, r0, #0
    4f92:	da03      	bge.n	4f9c <lis2dh_init+0x134>
			LOG_ERR("Failed to initialize interrupts.");
    4f94:	481a      	ldr	r0, [pc, #104]	; (5000 <lis2dh_init+0x198>)
    4f96:	f045 0101 	orr.w	r1, r5, #1
    4f9a:	e793      	b.n	4ec4 <lis2dh_init+0x5c>
	LOG_INF("bus=%s fs=%d, odr=0x%x lp_en=0x%x scale=%d",
    4f9c:	683b      	ldr	r3, [r7, #0]
    4f9e:	9303      	str	r3, [sp, #12]
    4fa0:	2202      	movs	r2, #2
    4fa2:	2304      	movs	r3, #4
    4fa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4fa8:	2300      	movs	r3, #0
    4faa:	9306      	str	r3, [sp, #24]
    4fac:	f8d8 3010 	ldr.w	r3, [r8, #16]
    4fb0:	4814      	ldr	r0, [pc, #80]	; (5004 <lis2dh_init+0x19c>)
    4fb2:	9307      	str	r3, [sp, #28]
    4fb4:	2205      	movs	r2, #5
    4fb6:	f045 0303 	orr.w	r3, r5, #3
    4fba:	a903      	add	r1, sp, #12
    4fbc:	f004 ff00 	bl	9dc0 <log_n>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    4fc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4fc4:	2247      	movs	r2, #71	; 0x47
    4fc6:	68db      	ldr	r3, [r3, #12]
    4fc8:	2120      	movs	r1, #32
    4fca:	4630      	mov	r0, r6
    4fcc:	4798      	blx	r3
    4fce:	4604      	mov	r4, r0
    4fd0:	e764      	b.n	4e9c <lis2dh_init+0x34>
    4fd2:	bf00      	nop
    4fd4:	0000bef4 	.word	0x0000bef4
    4fd8:	0000bee4 	.word	0x0000bee4
    4fdc:	0000d03a 	.word	0x0000d03a
    4fe0:	0000d04f 	.word	0x0000d04f
    4fe4:	0000d067 	.word	0x0000d067
    4fe8:	20000054 	.word	0x20000054
    4fec:	0001b694 	.word	0x0001b694
    4ff0:	0000d07e 	.word	0x0000d07e
    4ff4:	0000d0a4 	.word	0x0000d0a4
    4ff8:	0000d0c4 	.word	0x0000d0c4
    4ffc:	0000d0ec 	.word	0x0000d0ec
    5000:	0000d115 	.word	0x0000d115
    5004:	0000d136 	.word	0x0000d136

00005008 <lis2dh_channel_get>:
{
    5008:	4603      	mov	r3, r0
    500a:	b570      	push	{r4, r5, r6, lr}
    500c:	4610      	mov	r0, r2
	struct lis2dh_data *lis2dh = dev->data;
    500e:	691d      	ldr	r5, [r3, #16]
	switch (chan) {
    5010:	290c      	cmp	r1, #12
    5012:	d82f      	bhi.n	5074 <lis2dh_channel_get+0x6c>
    5014:	e8df f001 	tbb	[pc, r1]
    5018:	0a2c072a 	.word	0x0a2c072a
    501c:	2e2e2e2e 	.word	0x2e2e2e2e
    5020:	2e2e2e2e 	.word	0x2e2e2e2e
    5024:	23          	.byte	0x23
    5025:	00          	.byte	0x00
    5026:	2401      	movs	r4, #1
		ofs_start = ofs_end = 2;
    5028:	4622      	mov	r2, r4
    502a:	e001      	b.n	5030 <lis2dh_channel_get+0x28>
		ofs_end = 2;
    502c:	2402      	movs	r4, #2
		ofs_start = 0;
    502e:	2200      	movs	r2, #0
	val->val1 = converted_val / 1000000;
    5030:	4912      	ldr	r1, [pc, #72]	; (507c <lis2dh_channel_get+0x74>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
    5032:	4294      	cmp	r4, r2
    5034:	f100 0008 	add.w	r0, r0, #8
    5038:	db16      	blt.n	5068 <lis2dh_channel_get+0x60>
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
    503a:	1d13      	adds	r3, r2, #4
    503c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
    5040:	692e      	ldr	r6, [r5, #16]
    5042:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
    5046:	111b      	asrs	r3, r3, #4
    5048:	4373      	muls	r3, r6
	val->val1 = converted_val / 1000000;
    504a:	fb93 f6f1 	sdiv	r6, r3, r1
	val->val2 = converted_val % 1000000;
    504e:	fb01 3316 	mls	r3, r1, r6, r3
	val->val1 = converted_val / 1000000;
    5052:	f840 6c08 	str.w	r6, [r0, #-8]
	val->val2 = converted_val % 1000000;
    5056:	f840 3c04 	str.w	r3, [r0, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
    505a:	3201      	adds	r2, #1
    505c:	e7e9      	b.n	5032 <lis2dh_channel_get+0x2a>
		memcpy(val, &lis2dh->temperature, sizeof(*val));
    505e:	2208      	movs	r2, #8
    5060:	f105 0114 	add.w	r1, r5, #20
    5064:	f005 fdda 	bl	ac1c <memcpy>
	return 0;
    5068:	2000      	movs	r0, #0
}
    506a:	bd70      	pop	{r4, r5, r6, pc}
		ofs_start = ofs_end = 0;
    506c:	2400      	movs	r4, #0
    506e:	e7db      	b.n	5028 <lis2dh_channel_get+0x20>
		ofs_start = ofs_end = 2;
    5070:	2402      	movs	r4, #2
    5072:	e7d9      	b.n	5028 <lis2dh_channel_get+0x20>
	switch (chan) {
    5074:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5078:	e7f7      	b.n	506a <lis2dh_channel_get+0x62>
    507a:	bf00      	nop
    507c:	000f4240 	.word	0x000f4240

00005080 <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
    5080:	b538      	push	{r3, r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
    5082:	6905      	ldr	r5, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
    5084:	686b      	ldr	r3, [r5, #4]
    5086:	f105 0208 	add.w	r2, r5, #8
    508a:	681c      	ldr	r4, [r3, #0]
    508c:	2127      	movs	r1, #39	; 0x27
    508e:	2307      	movs	r3, #7
    5090:	47a0      	blx	r4
	if (status < 0) {
    5092:	1e04      	subs	r4, r0, #0
    5094:	da0b      	bge.n	50ae <lis2dh_fetch_xyz.constprop.0+0x2e>
    5096:	4909      	ldr	r1, [pc, #36]	; (50bc <lis2dh_fetch_xyz.constprop.0+0x3c>)
    5098:	4b09      	ldr	r3, [pc, #36]	; (50c0 <lis2dh_fetch_xyz.constprop.0+0x40>)
		LOG_WRN("Could not read accel axis data");
    509a:	480a      	ldr	r0, [pc, #40]	; (50c4 <lis2dh_fetch_xyz.constprop.0+0x44>)
    509c:	1ac9      	subs	r1, r1, r3
    509e:	08c9      	lsrs	r1, r1, #3
    50a0:	0189      	lsls	r1, r1, #6
    50a2:	f041 0102 	orr.w	r1, r1, #2
    50a6:	f004 fe35 	bl	9d14 <log_0>
}
    50aa:	4620      	mov	r0, r4
    50ac:	bd38      	pop	{r3, r4, r5, pc}
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
    50ae:	7a2b      	ldrb	r3, [r5, #8]
		status = 0;
    50b0:	f013 0f0f 	tst.w	r3, #15
    50b4:	bf18      	it	ne
    50b6:	2400      	movne	r4, #0
    50b8:	e7f7      	b.n	50aa <lis2dh_fetch_xyz.constprop.0+0x2a>
    50ba:	bf00      	nop
    50bc:	0000bef4 	.word	0x0000bef4
    50c0:	0000bee4 	.word	0x0000bee4
    50c4:	0000d18b 	.word	0x0000d18b

000050c8 <lis2dh_i2c_init>:

int lis2dh_i2c_init(const struct device *dev)
{
	struct lis2dh_data *data = dev->data;

	data->hw_tf = &lis2dh_i2c_transfer_fn;
    50c8:	6903      	ldr	r3, [r0, #16]
    50ca:	4a02      	ldr	r2, [pc, #8]	; (50d4 <lis2dh_i2c_init+0xc>)
    50cc:	605a      	str	r2, [r3, #4]

	return 0;
}
    50ce:	2000      	movs	r0, #0
    50d0:	4770      	bx	lr
    50d2:	bf00      	nop
    50d4:	0000c2fc 	.word	0x0000c2fc

000050d8 <lis2dh_thread>:
	}
}

#ifdef CONFIG_LIS2DH_TRIGGER_OWN_THREAD
static void lis2dh_thread(struct lis2dh_data *lis2dh)
{
    50d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    50dc:	4b79      	ldr	r3, [pc, #484]	; (52c4 <lis2dh_thread+0x1ec>)
    50de:	4d7a      	ldr	r5, [pc, #488]	; (52c8 <lis2dh_thread+0x1f0>)
			LOG_ERR("clearing interrupt 2 failed: %d", status);
    50e0:	4f7a      	ldr	r7, [pc, #488]	; (52cc <lis2dh_thread+0x1f4>)
    50e2:	1aed      	subs	r5, r5, r3
    50e4:	08ed      	lsrs	r5, r5, #3
    50e6:	01ad      	lsls	r5, r5, #6
{
    50e8:	b085      	sub	sp, #20
    50ea:	4606      	mov	r6, r0
			LOG_ERR("clearing interrupt 2 failed: %d", status);
    50ec:	f045 0501 	orr.w	r5, r5, #1
	return z_impl_k_sem_take(sem, timeout);
    50f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    50f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    50f8:	f506 6099 	add.w	r0, r6, #1224	; 0x4c8
    50fc:	f003 fa14 	bl	8528 <z_impl_k_sem_take>
	while (1) {
		k_sem_take(&lis2dh->gpio_sem, K_FOREVER);
		lis2dh_thread_cb(lis2dh->dev);
    5100:	69f4      	ldr	r4, [r6, #28]
	const struct lis2dh_config *cfg = dev->config;
    5102:	6863      	ldr	r3, [r4, #4]
	struct lis2dh_data *lis2dh = dev->data;
    5104:	f8d4 8010 	ldr.w	r8, [r4, #16]
	if (cfg->gpio_drdy.port &&
    5108:	68da      	ldr	r2, [r3, #12]
    510a:	2a00      	cmp	r2, #0
    510c:	d056      	beq.n	51bc <lis2dh_thread+0xe4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    510e:	f3bf 8f5b 	dmb	ish
    5112:	f108 0240 	add.w	r2, r8, #64	; 0x40
    5116:	e852 1f00 	ldrex	r1, [r2]
    511a:	f021 0001 	bic.w	r0, r1, #1
    511e:	e842 0c00 	strex	ip, r0, [r2]
    5122:	f1bc 0f00 	cmp.w	ip, #0
    5126:	d1f6      	bne.n	5116 <lis2dh_thread+0x3e>
    5128:	f3bf 8f5b 	dmb	ish
    512c:	07ca      	lsls	r2, r1, #31
    512e:	d545      	bpl.n	51bc <lis2dh_thread+0xe4>
	uint8_t ctrl1 = 0U;
    5130:	2300      	movs	r3, #0
    5132:	f88d 3007 	strb.w	r3, [sp, #7]
	struct lis2dh_data *lis2dh = dev->data;
    5136:	f8d4 8010 	ldr.w	r8, [r4, #16]
	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &ctrl1);
    513a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    513e:	2120      	movs	r1, #32
    5140:	689b      	ldr	r3, [r3, #8]
    5142:	f10d 0207 	add.w	r2, sp, #7
    5146:	4620      	mov	r0, r4
    5148:	4798      	blx	r3
	if (unlikely(status < 0)) {
    514a:	1e01      	subs	r1, r0, #0
    514c:	db31      	blt.n	51b2 <lis2dh_thread+0xda>
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    514e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5152:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5156:	2120      	movs	r1, #32
    5158:	68db      	ldr	r3, [r3, #12]
    515a:	f002 020f 	and.w	r2, r2, #15
    515e:	4620      	mov	r0, r4
    5160:	4798      	blx	r3
	if (unlikely(status < 0)) {
    5162:	1e01      	subs	r1, r0, #0
    5164:	db25      	blt.n	51b2 <lis2dh_thread+0xda>
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
    5166:	f8d8 3004 	ldr.w	r3, [r8, #4]
    516a:	2127      	movs	r1, #39	; 0x27
    516c:	f8d3 9000 	ldr.w	r9, [r3]
    5170:	aa02      	add	r2, sp, #8
    5172:	2307      	movs	r3, #7
    5174:	4620      	mov	r0, r4
    5176:	47c8      	blx	r9
	if (unlikely(status < 0)) {
    5178:	1e01      	subs	r1, r0, #0
    517a:	db1a      	blt.n	51b2 <lis2dh_thread+0xda>
	gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy,
    517c:	6860      	ldr	r0, [r4, #4]
    517e:	f44f 21b8 	mov.w	r1, #376832	; 0x5c000
    5182:	300c      	adds	r0, #12
    5184:	f005 fee8 	bl	af58 <gpio_pin_interrupt_configure_dt.isra.0>
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1, ctrl1);
    5188:	f8d8 3004 	ldr.w	r3, [r8, #4]
    518c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5190:	68db      	ldr	r3, [r3, #12]
    5192:	2120      	movs	r1, #32
    5194:	4620      	mov	r0, r4
    5196:	4798      	blx	r3
	if (unlikely(status < 0)) {
    5198:	1e01      	subs	r1, r0, #0
    519a:	db0a      	blt.n	51b2 <lis2dh_thread+0xda>
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
    519c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    51a0:	f8d3 8010 	ldr.w	r8, [r3, #16]
    51a4:	2310      	movs	r3, #16
    51a6:	2122      	movs	r1, #34	; 0x22
    51a8:	461a      	mov	r2, r3
    51aa:	4620      	mov	r0, r4
    51ac:	47c0      	blx	r8
		if (unlikely(status < 0)) {
    51ae:	1e01      	subs	r1, r0, #0
    51b0:	da9e      	bge.n	50f0 <lis2dh_thread+0x18>
			LOG_ERR("lis2dh_start_trigger_int1: %d", status);
    51b2:	4847      	ldr	r0, [pc, #284]	; (52d0 <lis2dh_thread+0x1f8>)
    51b4:	462a      	mov	r2, r5
			LOG_ERR("clearing interrupt 2 failed: %d", status);
    51b6:	f004 fdba 	bl	9d2e <log_1>
			return;
    51ba:	e799      	b.n	50f0 <lis2dh_thread+0x18>
	if (cfg->gpio_int.port &&
    51bc:	695a      	ldr	r2, [r3, #20]
    51be:	b362      	cbz	r2, 521a <lis2dh_thread+0x142>
    51c0:	f3bf 8f5b 	dmb	ish
    51c4:	f108 0240 	add.w	r2, r8, #64	; 0x40
    51c8:	e852 1f00 	ldrex	r1, [r2]
    51cc:	f021 0002 	bic.w	r0, r1, #2
    51d0:	e842 0c00 	strex	ip, r0, [r2]
    51d4:	f1bc 0f00 	cmp.w	ip, #0
    51d8:	d1f6      	bne.n	51c8 <lis2dh_thread+0xf0>
    51da:	f3bf 8f5b 	dmb	ish
    51de:	0788      	lsls	r0, r1, #30
    51e0:	d51b      	bpl.n	521a <lis2dh_thread+0x142>
	const struct lis2dh_config *cfg = dev->config;
    51e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
	struct lis2dh_data *lis2dh = dev->data;
    51e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
	gpio_pin_interrupt_configure_dt(&cfg->gpio_int,
    51ea:	f44f 21b8 	mov.w	r1, #376832	; 0x5c000
    51ee:	f108 0014 	add.w	r0, r8, #20
    51f2:	f005 feb1 	bl	af58 <gpio_pin_interrupt_configure_dt.isra.0>
	return lis2dh->hw_tf->write_reg(
    51f6:	f898 201e 	ldrb.w	r2, [r8, #30]
    51fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
    51fe:	2a00      	cmp	r2, #0
    5200:	bf14      	ite	ne
    5202:	2130      	movne	r1, #48	; 0x30
    5204:	2134      	moveq	r1, #52	; 0x34
    5206:	68db      	ldr	r3, [r3, #12]
    5208:	222a      	movs	r2, #42	; 0x2a
    520a:	4620      	mov	r0, r4
    520c:	4798      	blx	r3
		if (unlikely(status < 0)) {
    520e:	1e01      	subs	r1, r0, #0
    5210:	f6bf af6e 	bge.w	50f0 <lis2dh_thread+0x18>
			LOG_ERR("lis2dh_start_trigger_int2: %d", status);
    5214:	482f      	ldr	r0, [pc, #188]	; (52d4 <lis2dh_thread+0x1fc>)
    5216:	462a      	mov	r2, r5
    5218:	e7cd      	b.n	51b6 <lis2dh_thread+0xde>
	if (cfg->gpio_drdy.port &&
    521a:	68da      	ldr	r2, [r3, #12]
    521c:	b302      	cbz	r2, 5260 <lis2dh_thread+0x188>
    521e:	f3bf 8f5b 	dmb	ish
    5222:	f108 0240 	add.w	r2, r8, #64	; 0x40
    5226:	e852 1f00 	ldrex	r1, [r2]
    522a:	f021 0010 	bic.w	r0, r1, #16
    522e:	e842 0c00 	strex	ip, r0, [r2]
    5232:	f1bc 0f00 	cmp.w	ip, #0
    5236:	d1f6      	bne.n	5226 <lis2dh_thread+0x14e>
    5238:	f3bf 8f5b 	dmb	ish
    523c:	06c9      	lsls	r1, r1, #27
    523e:	d50f      	bpl.n	5260 <lis2dh_thread+0x188>
		struct sensor_trigger drdy_trigger = {
    5240:	2301      	movs	r3, #1
    5242:	f8ad 3008 	strh.w	r3, [sp, #8]
    5246:	f8b8 3044 	ldrh.w	r3, [r8, #68]	; 0x44
    524a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (likely(lis2dh->handler_drdy != NULL)) {
    524e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
		if (likely(lis2dh->handler_anymotion != NULL)) {
    5252:	2b00      	cmp	r3, #0
    5254:	f43f af4c 	beq.w	50f0 <lis2dh_thread+0x18>
			lis2dh->handler_anymotion(dev, &anym_trigger);
    5258:	a902      	add	r1, sp, #8
    525a:	4620      	mov	r0, r4
    525c:	4798      	blx	r3
	while (1) {
    525e:	e747      	b.n	50f0 <lis2dh_thread+0x18>
	if (cfg->gpio_int.port &&
    5260:	695a      	ldr	r2, [r3, #20]
    5262:	2a00      	cmp	r2, #0
    5264:	f43f af44 	beq.w	50f0 <lis2dh_thread+0x18>
    5268:	f3bf 8f5b 	dmb	ish
    526c:	f108 0240 	add.w	r2, r8, #64	; 0x40
    5270:	e852 1f00 	ldrex	r1, [r2]
    5274:	f021 0020 	bic.w	r0, r1, #32
    5278:	e842 0c00 	strex	ip, r0, [r2]
    527c:	f1bc 0f00 	cmp.w	ip, #0
    5280:	d1f6      	bne.n	5270 <lis2dh_thread+0x198>
    5282:	f3bf 8f5b 	dmb	ish
    5286:	068a      	lsls	r2, r1, #26
    5288:	f57f af32 	bpl.w	50f0 <lis2dh_thread+0x18>
		struct sensor_trigger anym_trigger = {
    528c:	2202      	movs	r2, #2
		status = lis2dh->hw_tf->read_reg(dev,
    528e:	7f9b      	ldrb	r3, [r3, #30]
		struct sensor_trigger anym_trigger = {
    5290:	f8ad 2008 	strh.w	r2, [sp, #8]
    5294:	f8b8 2044 	ldrh.w	r2, [r8, #68]	; 0x44
    5298:	f8ad 200a 	strh.w	r2, [sp, #10]
		status = lis2dh->hw_tf->read_reg(dev,
    529c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    52a0:	2b00      	cmp	r3, #0
    52a2:	f8d2 9008 	ldr.w	r9, [r2, #8]
    52a6:	bf14      	ite	ne
    52a8:	2131      	movne	r1, #49	; 0x31
    52aa:	2135      	moveq	r1, #53	; 0x35
    52ac:	f10d 0207 	add.w	r2, sp, #7
    52b0:	4620      	mov	r0, r4
    52b2:	47c8      	blx	r9
		if (status < 0) {
    52b4:	1e01      	subs	r1, r0, #0
    52b6:	da02      	bge.n	52be <lis2dh_thread+0x1e6>
			LOG_ERR("clearing interrupt 2 failed: %d", status);
    52b8:	462a      	mov	r2, r5
    52ba:	4638      	mov	r0, r7
    52bc:	e77b      	b.n	51b6 <lis2dh_thread+0xde>
		if (likely(lis2dh->handler_anymotion != NULL)) {
    52be:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
    52c2:	e7c6      	b.n	5252 <lis2dh_thread+0x17a>
    52c4:	0000bee4 	.word	0x0000bee4
    52c8:	0000bef4 	.word	0x0000bef4
    52cc:	0000d1fa 	.word	0x0000d1fa
    52d0:	0000d1be 	.word	0x0000d1be
    52d4:	0000d1dc 	.word	0x0000d1dc

000052d8 <lis2dh_trigger_set>:
	if (trig->type == SENSOR_TRIG_DATA_READY &&
    52d8:	880b      	ldrh	r3, [r1, #0]
    52da:	2b01      	cmp	r3, #1
{
    52dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    52e0:	4604      	mov	r4, r0
    52e2:	4616      	mov	r6, r2
	if (trig->type == SENSOR_TRIG_DATA_READY &&
    52e4:	d14a      	bne.n	537c <lis2dh_trigger_set+0xa4>
    52e6:	f8b1 8002 	ldrh.w	r8, [r1, #2]
    52ea:	f1b8 0f03 	cmp.w	r8, #3
    52ee:	d10d      	bne.n	530c <lis2dh_trigger_set+0x34>
	const struct lis2dh_config *cfg = dev->config;
    52f0:	6840      	ldr	r0, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
    52f2:	6925      	ldr	r5, [r4, #16]
	if (cfg->gpio_drdy.port == NULL) {
    52f4:	68c3      	ldr	r3, [r0, #12]
    52f6:	b963      	cbnz	r3, 5312 <lis2dh_trigger_set+0x3a>
    52f8:	4949      	ldr	r1, [pc, #292]	; (5420 <lis2dh_trigger_set+0x148>)
    52fa:	4b4a      	ldr	r3, [pc, #296]	; (5424 <lis2dh_trigger_set+0x14c>)
		LOG_ERR("trigger_set DRDY int not supported");
    52fc:	484a      	ldr	r0, [pc, #296]	; (5428 <lis2dh_trigger_set+0x150>)
    52fe:	1ac9      	subs	r1, r1, r3
    5300:	08c9      	lsrs	r1, r1, #3
    5302:	0189      	lsls	r1, r1, #6
    5304:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("trigger_set AnyMotion int not supported");
    5308:	f004 fd04 	bl	9d14 <log_0>
	return -ENOTSUP;
    530c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5310:	e031      	b.n	5376 <lis2dh_trigger_set+0x9e>
	gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy,
    5312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    5316:	300c      	adds	r0, #12
	atomic_clear_bit(&lis2dh->trig_flags, TRIGGED_INT1);
    5318:	f105 0740 	add.w	r7, r5, #64	; 0x40
	gpio_pin_interrupt_configure_dt(&cfg->gpio_drdy,
    531c:	f005 fe1c 	bl	af58 <gpio_pin_interrupt_configure_dt.isra.0>
    5320:	f3bf 8f5b 	dmb	ish
    5324:	e857 3f00 	ldrex	r3, [r7]
    5328:	f023 0310 	bic.w	r3, r3, #16
    532c:	e847 3200 	strex	r2, r3, [r7]
    5330:	2a00      	cmp	r2, #0
    5332:	d1f7      	bne.n	5324 <lis2dh_trigger_set+0x4c>
    5334:	f3bf 8f5b 	dmb	ish
	status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
    5338:	686b      	ldr	r3, [r5, #4]
    533a:	2210      	movs	r2, #16
    533c:	f8d3 9010 	ldr.w	r9, [r3, #16]
    5340:	2122      	movs	r1, #34	; 0x22
    5342:	2300      	movs	r3, #0
    5344:	4620      	mov	r0, r4
    5346:	47c8      	blx	r9
	lis2dh->handler_drdy = handler;
    5348:	63ae      	str	r6, [r5, #56]	; 0x38
	if ((handler == NULL) || (status < 0)) {
    534a:	b1a6      	cbz	r6, 5376 <lis2dh_trigger_set+0x9e>
    534c:	2800      	cmp	r0, #0
    534e:	db12      	blt.n	5376 <lis2dh_trigger_set+0x9e>
	lis2dh->chan_drdy = chan;
    5350:	f8a5 8044 	strh.w	r8, [r5, #68]	; 0x44
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5354:	f3bf 8f5b 	dmb	ish
    5358:	e857 3f00 	ldrex	r3, [r7]
    535c:	f043 0301 	orr.w	r3, r3, #1
    5360:	e847 3200 	strex	r2, r3, [r7]
    5364:	2a00      	cmp	r2, #0
    5366:	d1f7      	bne.n	5358 <lis2dh_trigger_set+0x80>
    5368:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    536c:	f505 6099 	add.w	r0, r5, #1224	; 0x4c8
    5370:	f003 f8ba 	bl	84e8 <z_impl_k_sem_give>
	return 0;
    5374:	2000      	movs	r0, #0
}
    5376:	b003      	add	sp, #12
    5378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (trig->type == SENSOR_TRIG_DELTA) {
    537c:	2b02      	cmp	r3, #2
    537e:	d1c5      	bne.n	530c <lis2dh_trigger_set+0x34>
	const struct lis2dh_config *cfg = dev->config;
    5380:	6847      	ldr	r7, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
    5382:	6905      	ldr	r5, [r0, #16]
	if (cfg->gpio_int.port == NULL) {
    5384:	697b      	ldr	r3, [r7, #20]
    5386:	b943      	cbnz	r3, 539a <lis2dh_trigger_set+0xc2>
    5388:	4925      	ldr	r1, [pc, #148]	; (5420 <lis2dh_trigger_set+0x148>)
    538a:	4b26      	ldr	r3, [pc, #152]	; (5424 <lis2dh_trigger_set+0x14c>)
		LOG_ERR("trigger_set AnyMotion int not supported");
    538c:	4827      	ldr	r0, [pc, #156]	; (542c <lis2dh_trigger_set+0x154>)
    538e:	1ac9      	subs	r1, r1, r3
    5390:	08c9      	lsrs	r1, r1, #3
    5392:	0189      	lsls	r1, r1, #6
    5394:	f041 0101 	orr.w	r1, r1, #1
    5398:	e7b6      	b.n	5308 <lis2dh_trigger_set+0x30>
	gpio_pin_interrupt_configure_dt(&cfg->gpio_int,
    539a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    539e:	f107 0014 	add.w	r0, r7, #20
	atomic_clear_bit(&lis2dh->trig_flags, TRIGGED_INT2);
    53a2:	f105 0840 	add.w	r8, r5, #64	; 0x40
	gpio_pin_interrupt_configure_dt(&cfg->gpio_int,
    53a6:	f005 fdd7 	bl	af58 <gpio_pin_interrupt_configure_dt.isra.0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53aa:	f3bf 8f5b 	dmb	ish
    53ae:	e858 3f00 	ldrex	r3, [r8]
    53b2:	f023 0320 	bic.w	r3, r3, #32
    53b6:	e848 3200 	strex	r2, r3, [r8]
    53ba:	2a00      	cmp	r2, #0
    53bc:	d1f7      	bne.n	53ae <lis2dh_trigger_set+0xd6>
    53be:	f3bf 8f5b 	dmb	ish
	if (cfg->anym_on_int1) {
    53c2:	7fbb      	ldrb	r3, [r7, #30]
    53c4:	b13b      	cbz	r3, 53d6 <lis2dh_trigger_set+0xfe>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
    53c6:	686b      	ldr	r3, [r5, #4]
    53c8:	2210      	movs	r2, #16
    53ca:	f8d3 9010 	ldr.w	r9, [r3, #16]
    53ce:	2122      	movs	r1, #34	; 0x22
    53d0:	2300      	movs	r3, #0
    53d2:	4620      	mov	r0, r4
    53d4:	47c8      	blx	r9
	status = lis2dh->hw_tf->write_reg(
    53d6:	7fba      	ldrb	r2, [r7, #30]
    53d8:	686b      	ldr	r3, [r5, #4]
    53da:	2a00      	cmp	r2, #0
    53dc:	bf14      	ite	ne
    53de:	2130      	movne	r1, #48	; 0x30
    53e0:	2134      	moveq	r1, #52	; 0x34
    53e2:	68db      	ldr	r3, [r3, #12]
    53e4:	2200      	movs	r2, #0
    53e6:	4620      	mov	r0, r4
    53e8:	4798      	blx	r3
	status = lis2dh->hw_tf->read_reg(
    53ea:	7fba      	ldrb	r2, [r7, #30]
    53ec:	686b      	ldr	r3, [r5, #4]
    53ee:	2a00      	cmp	r2, #0
    53f0:	689b      	ldr	r3, [r3, #8]
    53f2:	f10d 0207 	add.w	r2, sp, #7
    53f6:	bf14      	ite	ne
    53f8:	2131      	movne	r1, #49	; 0x31
    53fa:	2135      	moveq	r1, #53	; 0x35
    53fc:	4620      	mov	r0, r4
    53fe:	4798      	blx	r3
	lis2dh->handler_anymotion = handler;
    5400:	63ee      	str	r6, [r5, #60]	; 0x3c
	if ((handler == NULL) || (status < 0)) {
    5402:	2e00      	cmp	r6, #0
    5404:	d0b7      	beq.n	5376 <lis2dh_trigger_set+0x9e>
    5406:	2800      	cmp	r0, #0
    5408:	dbb5      	blt.n	5376 <lis2dh_trigger_set+0x9e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    540a:	f3bf 8f5b 	dmb	ish
    540e:	e858 3f00 	ldrex	r3, [r8]
    5412:	f043 0302 	orr.w	r3, r3, #2
    5416:	e848 3200 	strex	r2, r3, [r8]
    541a:	2a00      	cmp	r2, #0
    541c:	d0a4      	beq.n	5368 <lis2dh_trigger_set+0x90>
    541e:	e7f6      	b.n	540e <lis2dh_trigger_set+0x136>
    5420:	0000bef4 	.word	0x0000bef4
    5424:	0000bee4 	.word	0x0000bee4
    5428:	0000d21a 	.word	0x0000d21a
    542c:	0000d23d 	.word	0x0000d23d

00005430 <lis2dh_acc_slope_config>:
{
    5430:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr == SENSOR_ATTR_SLOPE_TH) {
    5432:	2903      	cmp	r1, #3
	struct lis2dh_data *lis2dh = dev->data;
    5434:	6906      	ldr	r6, [r0, #16]
	const struct lis2dh_config *cfg = dev->config;
    5436:	6847      	ldr	r7, [r0, #4]
{
    5438:	b085      	sub	sp, #20
    543a:	4605      	mov	r5, r0
    543c:	4614      	mov	r4, r2
	if (attr == SENSOR_ATTR_SLOPE_TH) {
    543e:	d140      	bne.n	54c2 <lis2dh_acc_slope_config+0x92>
		status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL4,
    5440:	6873      	ldr	r3, [r6, #4]
    5442:	f10d 020f 	add.w	r2, sp, #15
    5446:	689b      	ldr	r3, [r3, #8]
    5448:	2123      	movs	r1, #35	; 0x23
    544a:	4798      	blx	r3
		if (status < 0) {
    544c:	2800      	cmp	r0, #0
    544e:	db33      	blt.n	54b8 <lis2dh_acc_slope_config+0x88>
				      >> LIS2DH_FS_SHIFT));
    5450:	f89d 200f 	ldrb.w	r2, [sp, #15]
		slope_th_ums2 = val->val1 * 1000000 + val->val2;
    5454:	4829      	ldr	r0, [pc, #164]	; (54fc <lis2dh_acc_slope_config+0xcc>)
		range_g = 2 * (1 << ((LIS2DH_FS_MASK & reg_val)
    5456:	2302      	movs	r3, #2
				      >> LIS2DH_FS_SHIFT));
    5458:	f3c2 1201 	ubfx	r2, r2, #4, #2
		range_g = 2 * (1 << ((LIS2DH_FS_MASK & reg_val)
    545c:	fa03 f202 	lsl.w	r2, r3, r2
		slope_th_ums2 = val->val1 * 1000000 + val->val2;
    5460:	e9d4 1300 	ldrd	r1, r3, [r4]
    5464:	fb00 3301 	mla	r3, r0, r1, r3
		if ((slope_th_ums2 - 1) > (range_g * SENSOR_G)) {
    5468:	4825      	ldr	r0, [pc, #148]	; (5500 <lis2dh_acc_slope_config+0xd0>)
    546a:	3b01      	subs	r3, #1
    546c:	fb82 4100 	smull	r4, r1, r2, r0
    5470:	429c      	cmp	r4, r3
    5472:	f171 0100 	sbcs.w	r1, r1, #0
    5476:	db21      	blt.n	54bc <lis2dh_acc_slope_config+0x8c>
    5478:	4c22      	ldr	r4, [pc, #136]	; (5504 <lis2dh_acc_slope_config+0xd4>)
		reg_val = 128 / range_g * (slope_th_ums2 - 1) / SENSOR_G;
    547a:	2180      	movs	r1, #128	; 0x80
    547c:	fbb1 f1f2 	udiv	r1, r1, r2
    5480:	4359      	muls	r1, r3
    5482:	fbb1 f1f0 	udiv	r1, r1, r0
    5486:	4820      	ldr	r0, [pc, #128]	; (5508 <lis2dh_acc_slope_config+0xd8>)
    5488:	f88d 100f 	strb.w	r1, [sp, #15]
    548c:	1a24      	subs	r4, r4, r0
    548e:	08e4      	lsrs	r4, r4, #3
		LOG_INF("int2_ths=0x%x range_g=%d ums2=%u", reg_val,
    5490:	01a4      	lsls	r4, r4, #6
    5492:	f044 0403 	orr.w	r4, r4, #3
    5496:	b2c9      	uxtb	r1, r1
    5498:	481c      	ldr	r0, [pc, #112]	; (550c <lis2dh_acc_slope_config+0xdc>)
    549a:	f8ad 4000 	strh.w	r4, [sp]
    549e:	f004 fc73 	bl	9d88 <log_3>
		status = lis2dh->hw_tf->write_reg(dev,
    54a2:	7fba      	ldrb	r2, [r7, #30]
    54a4:	6873      	ldr	r3, [r6, #4]
    54a6:	2a00      	cmp	r2, #0
    54a8:	68db      	ldr	r3, [r3, #12]
    54aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    54ae:	bf14      	ite	ne
    54b0:	2132      	movne	r1, #50	; 0x32
    54b2:	2136      	moveq	r1, #54	; 0x36
    54b4:	4628      	mov	r0, r5
    54b6:	4798      	blx	r3
}
    54b8:	b005      	add	sp, #20
    54ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EINVAL;
    54bc:	f06f 0015 	mvn.w	r0, #21
    54c0:	e7fa      	b.n	54b8 <lis2dh_acc_slope_config+0x88>
		if (val->val1 < 0 || val->val1 > 127) {
    54c2:	6811      	ldr	r1, [r2, #0]
    54c4:	297f      	cmp	r1, #127	; 0x7f
    54c6:	d816      	bhi.n	54f6 <lis2dh_acc_slope_config+0xc6>
    54c8:	4a0f      	ldr	r2, [pc, #60]	; (5508 <lis2dh_acc_slope_config+0xd8>)
    54ca:	4b0e      	ldr	r3, [pc, #56]	; (5504 <lis2dh_acc_slope_config+0xd4>)
		LOG_INF("int2_dur=0x%x", val->val1);
    54cc:	4810      	ldr	r0, [pc, #64]	; (5510 <lis2dh_acc_slope_config+0xe0>)
    54ce:	1a9b      	subs	r3, r3, r2
    54d0:	08db      	lsrs	r3, r3, #3
    54d2:	019b      	lsls	r3, r3, #6
    54d4:	f043 0203 	orr.w	r2, r3, #3
    54d8:	f004 fc29 	bl	9d2e <log_1>
		status = lis2dh->hw_tf->write_reg(dev,
    54dc:	7fba      	ldrb	r2, [r7, #30]
    54de:	6873      	ldr	r3, [r6, #4]
    54e0:	2a00      	cmp	r2, #0
    54e2:	68db      	ldr	r3, [r3, #12]
    54e4:	7822      	ldrb	r2, [r4, #0]
    54e6:	bf14      	ite	ne
    54e8:	2133      	movne	r1, #51	; 0x33
    54ea:	2137      	moveq	r1, #55	; 0x37
    54ec:	4628      	mov	r0, r5
}
    54ee:	b005      	add	sp, #20
    54f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		status = lis2dh->hw_tf->write_reg(dev,
    54f4:	4718      	bx	r3
			return -ENOTSUP;
    54f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    54fa:	e7dd      	b.n	54b8 <lis2dh_acc_slope_config+0x88>
    54fc:	000f4240 	.word	0x000f4240
    5500:	0095a33a 	.word	0x0095a33a
    5504:	0000bef4 	.word	0x0000bef4
    5508:	0000bee4 	.word	0x0000bee4
    550c:	0000d265 	.word	0x0000d265
    5510:	0000d286 	.word	0x0000d286

00005514 <lis2dh_init_interrupt>:
	lis2dh_thread_cb(lis2dh->dev);
}
#endif

int lis2dh_init_interrupt(const struct device *dev)
{
    5514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lis2dh_data *lis2dh = dev->data;
    5518:	6906      	ldr	r6, [r0, #16]
	const struct lis2dh_config *cfg = dev->config;
    551a:	6845      	ldr	r5, [r0, #4]
	int status;
	uint8_t raw[2];

	lis2dh->dev = dev;
    551c:	61f0      	str	r0, [r6, #28]
{
    551e:	b08a      	sub	sp, #40	; 0x28
    5520:	4607      	mov	r7, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    5522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5526:	2100      	movs	r1, #0
    5528:	f506 6099 	add.w	r0, r6, #1224	; 0x4c8
    552c:	f006 fa1f 	bl	b96e <z_impl_k_sem_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5530:	2200      	movs	r2, #0
    5532:	2300      	movs	r3, #0
    5534:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5538:	2300      	movs	r3, #0
    553a:	f06f 0205 	mvn.w	r2, #5
    553e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    5542:	e9cd 3301 	strd	r3, r3, [sp, #4]
    5546:	9600      	str	r6, [sp, #0]
    5548:	4b73      	ldr	r3, [pc, #460]	; (5718 <lis2dh_init_interrupt+0x204>)
    554a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    554e:	f106 0148 	add.w	r1, r6, #72	; 0x48
    5552:	f506 6089 	add.w	r0, r6, #1096	; 0x448
    5556:	f002 fe6f 	bl	8238 <z_impl_k_thread_create>
	/*
	 * Setup INT1 (for DRDY) if defined in DT
	 */

	/* setup data ready gpio interrupt */
	if (!device_is_ready(cfg->gpio_drdy.port)) {
    555a:	68e8      	ldr	r0, [r5, #12]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    555c:	f006 f98d 	bl	b87a <z_device_ready>
    5560:	b1b0      	cbz	r0, 5590 <lis2dh_init_interrupt+0x7c>
		status = 0;
		goto check_gpio_int;
	}

	/* data ready int1 gpio configuration */
	status = gpio_pin_configure_dt(&cfg->gpio_drdy, GPIO_INPUT);
    5562:	f105 000c 	add.w	r0, r5, #12
    5566:	f005 fce1 	bl	af2c <gpio_pin_configure_dt.constprop.0>
    556a:	4a6c      	ldr	r2, [pc, #432]	; (571c <lis2dh_init_interrupt+0x208>)
    556c:	4b6c      	ldr	r3, [pc, #432]	; (5720 <lis2dh_init_interrupt+0x20c>)
    556e:	eba3 0802 	sub.w	r8, r3, r2
    5572:	ea4f 08d8 	mov.w	r8, r8, lsr #3
	if (status < 0) {
    5576:	1e04      	subs	r4, r0, #0
    5578:	7c2a      	ldrb	r2, [r5, #16]
    557a:	68e8      	ldr	r0, [r5, #12]
    557c:	ea4f 1888 	mov.w	r8, r8, lsl #6
    5580:	da17      	bge.n	55b2 <lis2dh_init_interrupt+0x9e>
	}

	/* any motion int2 gpio configuration */
	status = gpio_pin_configure_dt(&cfg->gpio_int, GPIO_INPUT);
	if (status < 0) {
		LOG_ERR("Could not configure %s.%02u",
    5582:	6801      	ldr	r1, [r0, #0]
    5584:	4867      	ldr	r0, [pc, #412]	; (5724 <lis2dh_init_interrupt+0x210>)
    5586:	f048 0301 	orr.w	r3, r8, #1
    558a:	f004 fbe4 	bl	9d56 <log_2>
			cfg->gpio_int.port->name, cfg->gpio_int.pin);
		return status;
    558e:	e024      	b.n	55da <lis2dh_init_interrupt+0xc6>
		if (cfg->gpio_drdy.port != NULL) {
    5590:	68eb      	ldr	r3, [r5, #12]
    5592:	2b00      	cmp	r3, #0
    5594:	d033      	beq.n	55fe <lis2dh_init_interrupt+0xea>
    5596:	4961      	ldr	r1, [pc, #388]	; (571c <lis2dh_init_interrupt+0x208>)
    5598:	4a61      	ldr	r2, [pc, #388]	; (5720 <lis2dh_init_interrupt+0x20c>)
    559a:	1a52      	subs	r2, r2, r1
    559c:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("device %s is not ready", cfg->gpio_drdy.port->name);
    559e:	0192      	lsls	r2, r2, #6
    55a0:	6819      	ldr	r1, [r3, #0]
    55a2:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("device %s is not ready", cfg->gpio_int.port->name);
    55a6:	4860      	ldr	r0, [pc, #384]	; (5728 <lis2dh_init_interrupt+0x214>)
    55a8:	f004 fbc1 	bl	9d2e <log_1>
			return -ENODEV;
    55ac:	f06f 0412 	mvn.w	r4, #18
    55b0:	e013      	b.n	55da <lis2dh_init_interrupt+0xc6>
			   BIT(cfg->gpio_drdy.pin));
    55b2:	2401      	movs	r4, #1
    55b4:	fa04 f302 	lsl.w	r3, r4, r2
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    55b8:	4a5c      	ldr	r2, [pc, #368]	; (572c <lis2dh_init_interrupt+0x218>)
	callback->pin_mask = pin_mask;
    55ba:	e9c6 2309 	strd	r2, r3, [r6, #36]	; 0x24
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    55be:	6883      	ldr	r3, [r0, #8]
    55c0:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&lis2dh->gpio_int1_cb,
    55c2:	f106 0120 	add.w	r1, r6, #32
    55c6:	b163      	cbz	r3, 55e2 <lis2dh_init_interrupt+0xce>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    55c8:	4622      	mov	r2, r4
    55ca:	4798      	blx	r3
	if (status < 0) {
    55cc:	1e04      	subs	r4, r0, #0
    55ce:	da0b      	bge.n	55e8 <lis2dh_init_interrupt+0xd4>
		LOG_ERR("Could not add gpio int1 callback");
    55d0:	4857      	ldr	r0, [pc, #348]	; (5730 <lis2dh_init_interrupt+0x21c>)
    55d2:	f048 0101 	orr.w	r1, r8, #1
    55d6:	f004 fb9d 	bl	9d14 <log_0>
		return status;
	}

end:
	return status;
}
    55da:	4620      	mov	r0, r4
    55dc:	b00a      	add	sp, #40	; 0x28
    55de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTSUP;
    55e2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    55e6:	e7f3      	b.n	55d0 <lis2dh_init_interrupt+0xbc>
	LOG_INF("%s: int1 on %s.%02u", dev->name,
    55e8:	68ea      	ldr	r2, [r5, #12]
    55ea:	7c2b      	ldrb	r3, [r5, #16]
    55ec:	6839      	ldr	r1, [r7, #0]
    55ee:	4851      	ldr	r0, [pc, #324]	; (5734 <lis2dh_init_interrupt+0x220>)
    55f0:	f048 0803 	orr.w	r8, r8, #3
    55f4:	f8ad 8000 	strh.w	r8, [sp]
    55f8:	6812      	ldr	r2, [r2, #0]
    55fa:	f004 fbc5 	bl	9d88 <log_3>
	if (!device_is_ready(cfg->gpio_int.port)) {
    55fe:	6968      	ldr	r0, [r5, #20]
    5600:	f006 f93b 	bl	b87a <z_device_ready>
    5604:	b958      	cbnz	r0, 561e <lis2dh_init_interrupt+0x10a>
		if (cfg->gpio_int.port != NULL) {
    5606:	696c      	ldr	r4, [r5, #20]
    5608:	2c00      	cmp	r4, #0
    560a:	d0e6      	beq.n	55da <lis2dh_init_interrupt+0xc6>
    560c:	4a44      	ldr	r2, [pc, #272]	; (5720 <lis2dh_init_interrupt+0x20c>)
    560e:	4b43      	ldr	r3, [pc, #268]	; (571c <lis2dh_init_interrupt+0x208>)
			LOG_ERR("device %s is not ready", cfg->gpio_int.port->name);
    5610:	6821      	ldr	r1, [r4, #0]
    5612:	1ad2      	subs	r2, r2, r3
    5614:	08d2      	lsrs	r2, r2, #3
    5616:	0192      	lsls	r2, r2, #6
    5618:	f042 0201 	orr.w	r2, r2, #1
    561c:	e7c3      	b.n	55a6 <lis2dh_init_interrupt+0x92>
	status = gpio_pin_configure_dt(&cfg->gpio_int, GPIO_INPUT);
    561e:	f105 0014 	add.w	r0, r5, #20
    5622:	f005 fc83 	bl	af2c <gpio_pin_configure_dt.constprop.0>
    5626:	4a3d      	ldr	r2, [pc, #244]	; (571c <lis2dh_init_interrupt+0x208>)
    5628:	4b3d      	ldr	r3, [pc, #244]	; (5720 <lis2dh_init_interrupt+0x20c>)
    562a:	eba3 0802 	sub.w	r8, r3, r2
    562e:	ea4f 08d8 	mov.w	r8, r8, lsr #3
	if (status < 0) {
    5632:	1e04      	subs	r4, r0, #0
    5634:	7e2a      	ldrb	r2, [r5, #24]
    5636:	6968      	ldr	r0, [r5, #20]
    5638:	ea4f 1888 	mov.w	r8, r8, lsl #6
    563c:	dba1      	blt.n	5582 <lis2dh_init_interrupt+0x6e>
			   BIT(cfg->gpio_int.pin));
    563e:	2401      	movs	r4, #1
    5640:	fa04 f302 	lsl.w	r3, r4, r2
	callback->handler = handler;
    5644:	4a3c      	ldr	r2, [pc, #240]	; (5738 <lis2dh_init_interrupt+0x224>)
	callback->pin_mask = pin_mask;
    5646:	e9c6 230c 	strd	r2, r3, [r6, #48]	; 0x30
	if (api->manage_callback == NULL) {
    564a:	6883      	ldr	r3, [r0, #8]
    564c:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&lis2dh->gpio_int2_cb,
    564e:	f106 012c 	add.w	r1, r6, #44	; 0x2c
    5652:	b153      	cbz	r3, 566a <lis2dh_init_interrupt+0x156>
	return api->manage_callback(port, callback, true);
    5654:	4622      	mov	r2, r4
    5656:	4798      	blx	r3
	if (status < 0) {
    5658:	1e04      	subs	r4, r0, #0
    565a:	da09      	bge.n	5670 <lis2dh_init_interrupt+0x15c>
		LOG_ERR("Could not add gpio int2 callback (%d)", status);
    565c:	4837      	ldr	r0, [pc, #220]	; (573c <lis2dh_init_interrupt+0x228>)
    565e:	f048 0201 	orr.w	r2, r8, #1
    5662:	4621      	mov	r1, r4
		LOG_ERR("latch enable reg write failed (%d)", status);
    5664:	f004 fb63 	bl	9d2e <log_1>
		return status;
    5668:	e7b7      	b.n	55da <lis2dh_init_interrupt+0xc6>
		return -ENOTSUP;
    566a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    566e:	e7f5      	b.n	565c <lis2dh_init_interrupt+0x148>
	LOG_INF("%s: int2 on %s.%02u", dev->name,
    5670:	6969      	ldr	r1, [r5, #20]
    5672:	7e2b      	ldrb	r3, [r5, #24]
    5674:	4832      	ldr	r0, [pc, #200]	; (5740 <lis2dh_init_interrupt+0x22c>)
    5676:	f048 0203 	orr.w	r2, r8, #3
    567a:	f8ad 2000 	strh.w	r2, [sp]
    567e:	680a      	ldr	r2, [r1, #0]
    5680:	6839      	ldr	r1, [r7, #0]
    5682:	f004 fb81 	bl	9d88 <log_3>
	status = lis2dh->hw_tf->write_reg(
    5686:	7faa      	ldrb	r2, [r5, #30]
    5688:	6873      	ldr	r3, [r6, #4]
    568a:	2a00      	cmp	r2, #0
    568c:	bf14      	ite	ne
    568e:	2130      	movne	r1, #48	; 0x30
    5690:	2134      	moveq	r1, #52	; 0x34
    5692:	68db      	ldr	r3, [r3, #12]
    5694:	2200      	movs	r2, #0
    5696:	4638      	mov	r0, r7
    5698:	4798      	blx	r3
	if (status < 0) {
    569a:	1e04      	subs	r4, r0, #0
    569c:	da04      	bge.n	56a8 <lis2dh_init_interrupt+0x194>
		LOG_ERR("Interrupt disable reg write failed (%d)", status);
    569e:	4829      	ldr	r0, [pc, #164]	; (5744 <lis2dh_init_interrupt+0x230>)
    56a0:	f048 0201 	orr.w	r2, r8, #1
    56a4:	4621      	mov	r1, r4
    56a6:	e7dd      	b.n	5664 <lis2dh_init_interrupt+0x150>
	(void)memset(raw, 0, sizeof(raw));
    56a8:	2100      	movs	r1, #0
    56aa:	2202      	movs	r2, #2
    56ac:	a809      	add	r0, sp, #36	; 0x24
    56ae:	f005 fac0 	bl	ac32 <memset>
	status = lis2dh->hw_tf->write_data(
    56b2:	6873      	ldr	r3, [r6, #4]
    56b4:	685c      	ldr	r4, [r3, #4]
    56b6:	7fab      	ldrb	r3, [r5, #30]
    56b8:	2b00      	cmp	r3, #0
    56ba:	bf14      	ite	ne
    56bc:	2132      	movne	r1, #50	; 0x32
    56be:	2136      	moveq	r1, #54	; 0x36
    56c0:	2302      	movs	r3, #2
    56c2:	aa09      	add	r2, sp, #36	; 0x24
    56c4:	4638      	mov	r0, r7
    56c6:	47a0      	blx	r4
	if (status < 0) {
    56c8:	1e04      	subs	r4, r0, #0
    56ca:	da04      	bge.n	56d6 <lis2dh_init_interrupt+0x1c2>
		LOG_ERR("Burst write to THS failed (%d)", status);
    56cc:	481e      	ldr	r0, [pc, #120]	; (5748 <lis2dh_init_interrupt+0x234>)
    56ce:	f048 0201 	orr.w	r2, r8, #1
    56d2:	4621      	mov	r1, r4
    56d4:	e7c6      	b.n	5664 <lis2dh_init_interrupt+0x150>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
    56d6:	6873      	ldr	r3, [r6, #4]
    56d8:	691c      	ldr	r4, [r3, #16]
	if (cfg->anym_on_int1) {
    56da:	7fab      	ldrb	r3, [r5, #30]
    56dc:	b19b      	cbz	r3, 5706 <lis2dh_init_interrupt+0x1f2>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
    56de:	2340      	movs	r3, #64	; 0x40
    56e0:	461a      	mov	r2, r3
    56e2:	2122      	movs	r1, #34	; 0x22
    56e4:	4638      	mov	r0, r7
    56e6:	47a0      	blx	r4
		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL5,
    56e8:	6873      	ldr	r3, [r6, #4]
    56ea:	68db      	ldr	r3, [r3, #12]
    56ec:	2208      	movs	r2, #8
		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL5,
    56ee:	2124      	movs	r1, #36	; 0x24
    56f0:	4638      	mov	r0, r7
    56f2:	4798      	blx	r3
	if (status < 0) {
    56f4:	2800      	cmp	r0, #0
		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL5,
    56f6:	4604      	mov	r4, r0
	if (status < 0) {
    56f8:	f6bf af6f 	bge.w	55da <lis2dh_init_interrupt+0xc6>
		LOG_ERR("latch enable reg write failed (%d)", status);
    56fc:	4601      	mov	r1, r0
    56fe:	f048 0201 	orr.w	r2, r8, #1
    5702:	4812      	ldr	r0, [pc, #72]	; (574c <lis2dh_init_interrupt+0x238>)
    5704:	e7ae      	b.n	5664 <lis2dh_init_interrupt+0x150>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL6,
    5706:	2320      	movs	r3, #32
    5708:	461a      	mov	r2, r3
    570a:	2125      	movs	r1, #37	; 0x25
    570c:	4638      	mov	r0, r7
    570e:	47a0      	blx	r4
		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL5,
    5710:	6873      	ldr	r3, [r6, #4]
    5712:	2202      	movs	r2, #2
    5714:	68db      	ldr	r3, [r3, #12]
    5716:	e7ea      	b.n	56ee <lis2dh_init_interrupt+0x1da>
    5718:	000050d9 	.word	0x000050d9
    571c:	0000bee4 	.word	0x0000bee4
    5720:	0000bef4 	.word	0x0000bef4
    5724:	0000d2ab 	.word	0x0000d2ab
    5728:	0000d294 	.word	0x0000d294
    572c:	0000af89 	.word	0x0000af89
    5730:	0000d2c7 	.word	0x0000d2c7
    5734:	0000d2e8 	.word	0x0000d2e8
    5738:	0000afad 	.word	0x0000afad
    573c:	0000d2fc 	.word	0x0000d2fc
    5740:	0000d322 	.word	0x0000d322
    5744:	0000d336 	.word	0x0000d336
    5748:	0000d35e 	.word	0x0000d35e
    574c:	0000d37d 	.word	0x0000d37d

00005750 <spi_2_init>:
#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEVICE(2);
    5750:	b538      	push	{r3, r4, r5, lr}
    5752:	4604      	mov	r4, r0
    5754:	2200      	movs	r2, #0
    5756:	2101      	movs	r1, #1
    5758:	2023      	movs	r0, #35	; 0x23
    575a:	f7fe fcbb 	bl	40d4 <z_arm_irq_priority_set>
	return dev->data;
    575e:	6923      	ldr	r3, [r4, #16]
	return dev->config;
    5760:	6860      	ldr	r0, [r4, #4]
	dev_data->dev = dev;
    5762:	64dc      	str	r4, [r3, #76]	; 0x4c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
    5764:	4a0d      	ldr	r2, [pc, #52]	; (579c <spi_2_init+0x4c>)
    5766:	f100 0108 	add.w	r1, r0, #8
    576a:	f002 f981 	bl	7a70 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    576e:	4b0c      	ldr	r3, [pc, #48]	; (57a0 <spi_2_init+0x50>)
    5770:	4298      	cmp	r0, r3
    5772:	d011      	beq.n	5798 <spi_2_init+0x48>
    5774:	4b0b      	ldr	r3, [pc, #44]	; (57a4 <spi_2_init+0x54>)
    5776:	4a0c      	ldr	r2, [pc, #48]	; (57a8 <spi_2_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
    5778:	6821      	ldr	r1, [r4, #0]
    577a:	480c      	ldr	r0, [pc, #48]	; (57ac <spi_2_init+0x5c>)
    577c:	1ad2      	subs	r2, r2, r3
    577e:	08d2      	lsrs	r2, r2, #3
    5780:	0192      	lsls	r2, r2, #6
    5782:	f042 0201 	orr.w	r2, r2, #1
    5786:	f004 fad2 	bl	9d2e <log_1>
		return -EBUSY;
    578a:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(2);
    578e:	6920      	ldr	r0, [r4, #16]
    5790:	f005 fc53 	bl	b03a <spi_context_unlock_unconditionally>
    5794:	4628      	mov	r0, r5
    5796:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    5798:	2500      	movs	r5, #0
    579a:	e7f8      	b.n	578e <spi_2_init+0x3e>
    579c:	0000582d 	.word	0x0000582d
    57a0:	0bad0000 	.word	0x0bad0000
    57a4:	0000bee4 	.word	0x0000bee4
    57a8:	0000bf3c 	.word	0x0000bf3c
    57ac:	0000d3a0 	.word	0x0000d3a0

000057b0 <transfer_next_chunk>:
{
    57b0:	b530      	push	{r4, r5, lr}
	return dev->data;
    57b2:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    57b4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
		return ctx->rx_len;
    57b6:	6cab      	ldr	r3, [r5, #72]	; 0x48
{
    57b8:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
    57ba:	b982      	cbnz	r2, 57de <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
    57bc:	bb73      	cbnz	r3, 581c <transfer_next_chunk+0x6c>
	int error = 0;
    57be:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    57c0:	2200      	movs	r2, #0
    57c2:	4611      	mov	r1, r2
    57c4:	4628      	mov	r0, r5
    57c6:	f005 fc13 	bl	aff0 <_spi_context_cs_control>
	ctx->sync_status = status;
    57ca:	62ac      	str	r4, [r5, #40]	; 0x28
	z_impl_k_sem_give(sem);
    57cc:	f105 0018 	add.w	r0, r5, #24
    57d0:	f002 fe8a 	bl	84e8 <z_impl_k_sem_give>
	dev_data->busy = false;
    57d4:	2300      	movs	r3, #0
    57d6:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
}
    57da:	b005      	add	sp, #20
    57dc:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
    57de:	4611      	mov	r1, r2
    57e0:	b113      	cbz	r3, 57e8 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    57e2:	429a      	cmp	r2, r3
    57e4:	bf28      	it	cs
    57e6:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    57e8:	6bec      	ldr	r4, [r5, #60]	; 0x3c
		dev_data->chunk_len = chunk_len;
    57ea:	6529      	str	r1, [r5, #80]	; 0x50
		xfer.p_tx_buffer = ctx->tx_buf;
    57ec:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    57ee:	b1bc      	cbz	r4, 5820 <transfer_next_chunk+0x70>
    57f0:	2a00      	cmp	r2, #0
    57f2:	bf18      	it	ne
    57f4:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    57f6:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    57f8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    57fa:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    57fc:	b192      	cbz	r2, 5824 <transfer_next_chunk+0x74>
    57fe:	2b00      	cmp	r3, #0
    5800:	bf18      	it	ne
    5802:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    5804:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    5806:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    5808:	2200      	movs	r2, #0
    580a:	4669      	mov	r1, sp
    580c:	f002 f9d2 	bl	7bb4 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    5810:	4b05      	ldr	r3, [pc, #20]	; (5828 <transfer_next_chunk+0x78>)
    5812:	4298      	cmp	r0, r3
    5814:	d0e1      	beq.n	57da <transfer_next_chunk+0x2a>
		error = -EIO;
    5816:	f06f 0404 	mvn.w	r4, #4
    581a:	e7d1      	b.n	57c0 <transfer_next_chunk+0x10>
    581c:	4619      	mov	r1, r3
    581e:	e7e3      	b.n	57e8 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    5820:	4622      	mov	r2, r4
    5822:	e7e8      	b.n	57f6 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    5824:	4613      	mov	r3, r2
    5826:	e7ed      	b.n	5804 <transfer_next_chunk+0x54>
    5828:	0bad0000 	.word	0x0bad0000

0000582c <event_handler>:
{
    582c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    582e:	7803      	ldrb	r3, [r0, #0]
{
    5830:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    5832:	2b00      	cmp	r3, #0
    5834:	d14e      	bne.n	58d4 <event_handler+0xa8>
	if (!ctx->tx_len) {
    5836:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5838:	b163      	cbz	r3, 5854 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    583a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
	if (len > ctx->tx_len) {
    583c:	429a      	cmp	r2, r3
    583e:	d91d      	bls.n	587c <event_handler+0x50>
    5840:	4925      	ldr	r1, [pc, #148]	; (58d8 <event_handler+0xac>)
    5842:	4b26      	ldr	r3, [pc, #152]	; (58dc <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    5844:	4826      	ldr	r0, [pc, #152]	; (58e0 <event_handler+0xb4>)
    5846:	1ac9      	subs	r1, r1, r3
    5848:	08c9      	lsrs	r1, r1, #3
    584a:	0189      	lsls	r1, r1, #6
    584c:	f041 0101 	orr.w	r1, r1, #1
    5850:	f004 fa60 	bl	9d14 <log_0>
	if (!ctx->rx_len) {
    5854:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5856:	b163      	cbz	r3, 5872 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    5858:	6d22      	ldr	r2, [r4, #80]	; 0x50
	if (len > ctx->rx_len) {
    585a:	429a      	cmp	r2, r3
    585c:	d924      	bls.n	58a8 <event_handler+0x7c>
    585e:	491e      	ldr	r1, [pc, #120]	; (58d8 <event_handler+0xac>)
    5860:	4b1e      	ldr	r3, [pc, #120]	; (58dc <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    5862:	481f      	ldr	r0, [pc, #124]	; (58e0 <event_handler+0xb4>)
    5864:	1ac9      	subs	r1, r1, r3
    5866:	08c9      	lsrs	r1, r1, #3
    5868:	0189      	lsls	r1, r1, #6
    586a:	f041 0101 	orr.w	r1, r1, #1
    586e:	f004 fa51 	bl	9d14 <log_0>
		transfer_next_chunk(dev_data->dev);
    5872:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
}
    5874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    5878:	f7ff bf9a 	b.w	57b0 <transfer_next_chunk>
	ctx->tx_len -= len;
    587c:	1a9b      	subs	r3, r3, r2
    587e:	640b      	str	r3, [r1, #64]	; 0x40
	if (!ctx->tx_len) {
    5880:	b963      	cbnz	r3, 589c <event_handler+0x70>
		ctx->tx_count--;
    5882:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    5884:	3b01      	subs	r3, #1
    5886:	630b      	str	r3, [r1, #48]	; 0x30
		if (ctx->tx_count) {
    5888:	b163      	cbz	r3, 58a4 <event_handler+0x78>
			ctx->current_tx++;
    588a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    588c:	f103 0208 	add.w	r2, r3, #8
    5890:	62ca      	str	r2, [r1, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    5892:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    5894:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    5896:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
    5898:	640b      	str	r3, [r1, #64]	; 0x40
    589a:	e7db      	b.n	5854 <event_handler+0x28>
	} else if (ctx->tx_buf) {
    589c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    589e:	2b00      	cmp	r3, #0
    58a0:	d0d8      	beq.n	5854 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    58a2:	4413      	add	r3, r2
    58a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    58a6:	e7d5      	b.n	5854 <event_handler+0x28>
	ctx->rx_len -= len;
    58a8:	1a9b      	subs	r3, r3, r2
    58aa:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
    58ac:	b963      	cbnz	r3, 58c8 <event_handler+0x9c>
		ctx->rx_count--;
    58ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    58b0:	3b01      	subs	r3, #1
    58b2:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
    58b4:	b163      	cbz	r3, 58d0 <event_handler+0xa4>
			ctx->current_rx++;
    58b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58b8:	f103 0208 	add.w	r2, r3, #8
    58bc:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    58be:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    58c0:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    58c2:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
    58c4:	64a3      	str	r3, [r4, #72]	; 0x48
    58c6:	e7d4      	b.n	5872 <event_handler+0x46>
	} else if (ctx->rx_buf) {
    58c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    58ca:	2b00      	cmp	r3, #0
    58cc:	d0d1      	beq.n	5872 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    58ce:	4413      	add	r3, r2
    58d0:	6463      	str	r3, [r4, #68]	; 0x44
    58d2:	e7ce      	b.n	5872 <event_handler+0x46>
}
    58d4:	bd10      	pop	{r4, pc}
    58d6:	bf00      	nop
    58d8:	0000bf3c 	.word	0x0000bf3c
    58dc:	0000bee4 	.word	0x0000bee4
    58e0:	0000d3c0 	.word	0x0000d3c0

000058e4 <spi_nrfx_transceive>:
{
    58e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58e8:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    58ea:	888b      	ldrh	r3, [r1, #4]
	return dev->data;
    58ec:	6904      	ldr	r4, [r0, #16]
    58ee:	045b      	lsls	r3, r3, #17
{
    58f0:	4680      	mov	r8, r0
    58f2:	460d      	mov	r5, r1
    58f4:	4617      	mov	r7, r2
    58f6:	d42c      	bmi.n	5952 <spi_nrfx_transceive+0x6e>
	return z_impl_k_sem_take(sem, timeout);
    58f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    58fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5900:	f104 0008 	add.w	r0, r4, #8
    5904:	f002 fe10 	bl	8528 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    5908:	6065      	str	r5, [r4, #4]
	return dev->data;
    590a:	f8d8 2010 	ldr.w	r2, [r8, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
    590e:	6813      	ldr	r3, [r2, #0]
    5910:	429d      	cmp	r5, r3
    5912:	f000 80b5 	beq.w	5a80 <spi_nrfx_transceive+0x19c>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    5916:	88ab      	ldrh	r3, [r5, #4]
    5918:	07d8      	lsls	r0, r3, #31
    591a:	d521      	bpl.n	5960 <spi_nrfx_transceive+0x7c>
    591c:	4a98      	ldr	r2, [pc, #608]	; (5b80 <spi_nrfx_transceive+0x29c>)
    591e:	4b99      	ldr	r3, [pc, #612]	; (5b84 <spi_nrfx_transceive+0x2a0>)
		LOG_ERR("Slave mode is not supported on %s",
    5920:	f8d8 1000 	ldr.w	r1, [r8]
    5924:	4898      	ldr	r0, [pc, #608]	; (5b88 <spi_nrfx_transceive+0x2a4>)
    5926:	1ad2      	subs	r2, r2, r3
    5928:	08d2      	lsrs	r2, r2, #3
    592a:	0192      	lsls	r2, r2, #6
    592c:	f042 0201 	orr.w	r2, r2, #1
    5930:	f004 f9fd 	bl	9d2e <log_1>
		return -EINVAL;
    5934:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    5938:	6823      	ldr	r3, [r4, #0]
    593a:	889b      	ldrh	r3, [r3, #4]
    593c:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    5940:	d104      	bne.n	594c <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
    5942:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    5944:	f104 0008 	add.w	r0, r4, #8
    5948:	f002 fdce 	bl	84e8 <z_impl_k_sem_give>
}
    594c:	4628      	mov	r0, r5
    594e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    5952:	6923      	ldr	r3, [r4, #16]
    5954:	2b00      	cmp	r3, #0
    5956:	d1cf      	bne.n	58f8 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
    5958:	6863      	ldr	r3, [r4, #4]
    595a:	4299      	cmp	r1, r3
    595c:	d1cc      	bne.n	58f8 <spi_nrfx_transceive+0x14>
    595e:	e7d4      	b.n	590a <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    5960:	0719      	lsls	r1, r3, #28
    5962:	d50a      	bpl.n	597a <spi_nrfx_transceive+0x96>
    5964:	4986      	ldr	r1, [pc, #536]	; (5b80 <spi_nrfx_transceive+0x29c>)
    5966:	4b87      	ldr	r3, [pc, #540]	; (5b84 <spi_nrfx_transceive+0x2a0>)
		LOG_ERR("Loopback mode is not supported");
    5968:	4888      	ldr	r0, [pc, #544]	; (5b8c <spi_nrfx_transceive+0x2a8>)
    596a:	1ac9      	subs	r1, r1, r3
    596c:	08c9      	lsrs	r1, r1, #3
    596e:	0189      	lsls	r1, r1, #6
    5970:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    5974:	f004 f9ce 	bl	9d14 <log_0>
    5978:	e7dc      	b.n	5934 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    597a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
    597e:	d008      	beq.n	5992 <spi_nrfx_transceive+0xae>
    5980:	497f      	ldr	r1, [pc, #508]	; (5b80 <spi_nrfx_transceive+0x29c>)
    5982:	4b80      	ldr	r3, [pc, #512]	; (5b84 <spi_nrfx_transceive+0x2a0>)
		LOG_ERR("Only single line mode is supported");
    5984:	4882      	ldr	r0, [pc, #520]	; (5b90 <spi_nrfx_transceive+0x2ac>)
    5986:	1ac9      	subs	r1, r1, r3
    5988:	08c9      	lsrs	r1, r1, #3
    598a:	0189      	lsls	r1, r1, #6
    598c:	f041 0101 	orr.w	r1, r1, #1
    5990:	e7f0      	b.n	5974 <spi_nrfx_transceive+0x90>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    5992:	f3c3 1345 	ubfx	r3, r3, #5, #6
    5996:	2b08      	cmp	r3, #8
    5998:	d008      	beq.n	59ac <spi_nrfx_transceive+0xc8>
    599a:	4979      	ldr	r1, [pc, #484]	; (5b80 <spi_nrfx_transceive+0x29c>)
    599c:	4b79      	ldr	r3, [pc, #484]	; (5b84 <spi_nrfx_transceive+0x2a0>)
		LOG_ERR("Word sizes other than 8 bits"
    599e:	487d      	ldr	r0, [pc, #500]	; (5b94 <spi_nrfx_transceive+0x2b0>)
    59a0:	1ac9      	subs	r1, r1, r3
    59a2:	08c9      	lsrs	r1, r1, #3
    59a4:	0189      	lsls	r1, r1, #6
    59a6:	f041 0101 	orr.w	r1, r1, #1
    59aa:	e7e3      	b.n	5974 <spi_nrfx_transceive+0x90>
	if (spi_cfg->frequency < 125000) {
    59ac:	6829      	ldr	r1, [r5, #0]
    59ae:	4b7a      	ldr	r3, [pc, #488]	; (5b98 <spi_nrfx_transceive+0x2b4>)
    59b0:	4299      	cmp	r1, r3
    59b2:	d808      	bhi.n	59c6 <spi_nrfx_transceive+0xe2>
    59b4:	4972      	ldr	r1, [pc, #456]	; (5b80 <spi_nrfx_transceive+0x29c>)
    59b6:	4b73      	ldr	r3, [pc, #460]	; (5b84 <spi_nrfx_transceive+0x2a0>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    59b8:	4878      	ldr	r0, [pc, #480]	; (5b9c <spi_nrfx_transceive+0x2b8>)
    59ba:	1ac9      	subs	r1, r1, r3
    59bc:	08c9      	lsrs	r1, r1, #3
    59be:	0189      	lsls	r1, r1, #6
    59c0:	f041 0101 	orr.w	r1, r1, #1
    59c4:	e7d6      	b.n	5974 <spi_nrfx_transceive+0x90>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    59c6:	68ab      	ldr	r3, [r5, #8]
	return dev->config;
    59c8:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
    59cc:	6015      	str	r5, [r2, #0]
    59ce:	2b00      	cmp	r3, #0
    59d0:	f000 80a6 	beq.w	5b20 <spi_nrfx_transceive+0x23c>
    59d4:	6818      	ldr	r0, [r3, #0]
    59d6:	2800      	cmp	r0, #0
    59d8:	f000 80a2 	beq.w	5b20 <spi_nrfx_transceive+0x23c>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    59dc:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_dt_flags |
    59de:	7a5b      	ldrb	r3, [r3, #9]
	struct gpio_driver_data *data =
    59e0:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    59e4:	f8d0 a008 	ldr.w	sl, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    59e8:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    59ec:	07da      	lsls	r2, r3, #31
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    59ee:	bf54      	ite	pl
    59f0:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    59f4:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    59f8:	f04f 0b01 	mov.w	fp, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    59fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5a00:	fa0b fb01 	lsl.w	fp, fp, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5a04:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5a06:	bf4c      	ite	mi
    5a08:	ea4c 030b 	orrmi.w	r3, ip, fp
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5a0c:	ea2c 030b 	bicpl.w	r3, ip, fp
    5a10:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    5a14:	f8da 3000 	ldr.w	r3, [sl]
    5a18:	4798      	blx	r3
	nrf_spi_configure(spi->p_reg,
    5a1a:	88a9      	ldrh	r1, [r5, #4]
    5a1c:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    5a20:	0788      	lsls	r0, r1, #30
    5a22:	f001 0304 	and.w	r3, r1, #4
    5a26:	f140 8086 	bpl.w	5b36 <spi_nrfx_transceive+0x252>
			return NRF_SPI_MODE_2;
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	bf14      	ite	ne
    5a2e:	2303      	movne	r3, #3
    5a30:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    5a32:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
    5a34:	f3c1 1100 	ubfx	r1, r1, #4, #1
    5a38:	f000 8081 	beq.w	5b3e <spi_nrfx_transceive+0x25a>
    5a3c:	2b03      	cmp	r3, #3
    5a3e:	f000 8081 	beq.w	5b44 <spi_nrfx_transceive+0x260>
    5a42:	2b01      	cmp	r3, #1
    5a44:	d101      	bne.n	5a4a <spi_nrfx_transceive+0x166>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    5a46:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
    5a4a:	4b55      	ldr	r3, [pc, #340]	; (5ba0 <spi_nrfx_transceive+0x2bc>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    5a4c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
    5a50:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
    5a52:	4299      	cmp	r1, r3
    5a54:	d979      	bls.n	5b4a <spi_nrfx_transceive+0x266>
	} else if (frequency < 500000) {
    5a56:	4b53      	ldr	r3, [pc, #332]	; (5ba4 <spi_nrfx_transceive+0x2c0>)
    5a58:	4299      	cmp	r1, r3
    5a5a:	d979      	bls.n	5b50 <spi_nrfx_transceive+0x26c>
	} else if (frequency < 1000000) {
    5a5c:	4b52      	ldr	r3, [pc, #328]	; (5ba8 <spi_nrfx_transceive+0x2c4>)
    5a5e:	4299      	cmp	r1, r3
    5a60:	d979      	bls.n	5b56 <spi_nrfx_transceive+0x272>
	} else if (frequency < 2000000) {
    5a62:	4b52      	ldr	r3, [pc, #328]	; (5bac <spi_nrfx_transceive+0x2c8>)
    5a64:	4299      	cmp	r1, r3
    5a66:	d979      	bls.n	5b5c <spi_nrfx_transceive+0x278>
	} else if (frequency < 4000000) {
    5a68:	4b51      	ldr	r3, [pc, #324]	; (5bb0 <spi_nrfx_transceive+0x2cc>)
    5a6a:	4299      	cmp	r1, r3
    5a6c:	d979      	bls.n	5b62 <spi_nrfx_transceive+0x27e>
		return NRF_SPI_FREQ_8M;
    5a6e:	4b51      	ldr	r3, [pc, #324]	; (5bb4 <spi_nrfx_transceive+0x2d0>)
    5a70:	4299      	cmp	r1, r3
    5a72:	bf34      	ite	cc
    5a74:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
    5a78:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    5a7c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
    5a80:	2301      	movs	r3, #1
    5a82:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
	if (tx_bufs) {
    5a86:	2f00      	cmp	r7, #0
    5a88:	d06e      	beq.n	5b68 <spi_nrfx_transceive+0x284>
		ctx->current_tx = tx_bufs->buffers;
    5a8a:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
    5a8c:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
    5a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
		ctx->tx_count = tx_bufs->count;
    5a90:	6322      	str	r2, [r4, #48]	; 0x30
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    5a92:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    5a94:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    5a96:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_len = ctx->current_tx->len / dfs;
    5a98:	6423      	str	r3, [r4, #64]	; 0x40
	if (rx_bufs) {
    5a9a:	2e00      	cmp	r6, #0
    5a9c:	d069      	beq.n	5b72 <spi_nrfx_transceive+0x28e>
		ctx->current_rx = rx_bufs->buffers;
    5a9e:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
    5aa0:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
    5aa2:	6363      	str	r3, [r4, #52]	; 0x34
		ctx->rx_count = rx_bufs->count;
    5aa4:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    5aa6:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    5aa8:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    5aaa:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_len = ctx->current_rx->len / dfs;
    5aac:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->sync_status = 0;
    5aae:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    5ab0:	4632      	mov	r2, r6
    5ab2:	2101      	movs	r1, #1
    5ab4:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    5ab6:	62a6      	str	r6, [r4, #40]	; 0x28
	_spi_context_cs_control(ctx, on, false);
    5ab8:	f005 fa9a 	bl	aff0 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    5abc:	4640      	mov	r0, r8
    5abe:	f7ff fe77 	bl	57b0 <transfer_next_chunk>
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    5ac2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    5ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
		     ctx->config->frequency;
    5ac6:	4627      	mov	r7, r4
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    5ac8:	429d      	cmp	r5, r3
    5aca:	bf38      	it	cc
    5acc:	461d      	movcc	r5, r3
    5ace:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    5ad2:	435d      	muls	r5, r3
		     ctx->config->frequency;
    5ad4:	f857 3b18 	ldr.w	r3, [r7], #24
			return (t * to_hz + off) / from_hz;
    5ad8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	fbb5 f5f3 	udiv	r5, r5, r3
    5ae2:	4631      	mov	r1, r6
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    5ae4:	35c8      	adds	r5, #200	; 0xc8
    5ae6:	f240 30e7 	movw	r0, #999	; 0x3e7
    5aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5aee:	2300      	movs	r3, #0
    5af0:	fbe5 010c 	umlal	r0, r1, r5, ip
    5af4:	f7fa fb54 	bl	1a0 <__aeabi_uldivmod>
    5af8:	4602      	mov	r2, r0
    5afa:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    5afc:	4638      	mov	r0, r7
    5afe:	f002 fd13 	bl	8528 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
    5b02:	2800      	cmp	r0, #0
    5b04:	d03a      	beq.n	5b7c <spi_nrfx_transceive+0x298>
    5b06:	4b1f      	ldr	r3, [pc, #124]	; (5b84 <spi_nrfx_transceive+0x2a0>)
    5b08:	491d      	ldr	r1, [pc, #116]	; (5b80 <spi_nrfx_transceive+0x29c>)
		LOG_ERR("Timeout waiting for transfer complete");
    5b0a:	482b      	ldr	r0, [pc, #172]	; (5bb8 <spi_nrfx_transceive+0x2d4>)
    5b0c:	1ac9      	subs	r1, r1, r3
    5b0e:	08c9      	lsrs	r1, r1, #3
    5b10:	0189      	lsls	r1, r1, #6
    5b12:	f041 0101 	orr.w	r1, r1, #1
    5b16:	f004 f8fd 	bl	9d14 <log_0>
		return -ETIMEDOUT;
    5b1a:	f06f 0573 	mvn.w	r5, #115	; 0x73
    5b1e:	e70b      	b.n	5938 <spi_nrfx_transceive+0x54>
    5b20:	4b18      	ldr	r3, [pc, #96]	; (5b84 <spi_nrfx_transceive+0x2a0>)
    5b22:	4917      	ldr	r1, [pc, #92]	; (5b80 <spi_nrfx_transceive+0x29c>)
		LOG_INF("CS control inhibited (no GPIO device)");
    5b24:	4825      	ldr	r0, [pc, #148]	; (5bbc <spi_nrfx_transceive+0x2d8>)
    5b26:	1ac9      	subs	r1, r1, r3
    5b28:	08c9      	lsrs	r1, r1, #3
    5b2a:	0189      	lsls	r1, r1, #6
    5b2c:	f041 0103 	orr.w	r1, r1, #3
    5b30:	f004 f8f0 	bl	9d14 <log_0>
    5b34:	e771      	b.n	5a1a <spi_nrfx_transceive+0x136>
			return NRF_SPI_MODE_0;
    5b36:	3b00      	subs	r3, #0
    5b38:	bf18      	it	ne
    5b3a:	2301      	movne	r3, #1
    5b3c:	e779      	b.n	5a32 <spi_nrfx_transceive+0x14e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    5b3e:	f041 0104 	orr.w	r1, r1, #4
        break;
    5b42:	e782      	b.n	5a4a <spi_nrfx_transceive+0x166>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    5b44:	f041 0106 	orr.w	r1, r1, #6
        break;
    5b48:	e77f      	b.n	5a4a <spi_nrfx_transceive+0x166>
		return NRF_SPI_FREQ_125K;
    5b4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    5b4e:	e795      	b.n	5a7c <spi_nrfx_transceive+0x198>
		return NRF_SPI_FREQ_250K;
    5b50:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    5b54:	e792      	b.n	5a7c <spi_nrfx_transceive+0x198>
		return NRF_SPI_FREQ_500K;
    5b56:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    5b5a:	e78f      	b.n	5a7c <spi_nrfx_transceive+0x198>
		return NRF_SPI_FREQ_1M;
    5b5c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5b60:	e78c      	b.n	5a7c <spi_nrfx_transceive+0x198>
		return NRF_SPI_FREQ_2M;
    5b62:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    5b66:	e789      	b.n	5a7c <spi_nrfx_transceive+0x198>
		ctx->tx_count = 0;
    5b68:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
		ctx->tx_len = 0;
    5b6c:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
    5b70:	e793      	b.n	5a9a <spi_nrfx_transceive+0x1b6>
		ctx->rx_count = 0;
    5b72:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
		ctx->rx_len = 0;
    5b76:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
    5b7a:	e798      	b.n	5aae <spi_nrfx_transceive+0x1ca>
	status = ctx->sync_status;
    5b7c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return status;
    5b7e:	e6db      	b.n	5938 <spi_nrfx_transceive+0x54>
    5b80:	0000bf3c 	.word	0x0000bf3c
    5b84:	0000bee4 	.word	0x0000bee4
    5b88:	0000d3de 	.word	0x0000d3de
    5b8c:	0000d400 	.word	0x0000d400
    5b90:	0000d41f 	.word	0x0000d41f
    5b94:	0000d442 	.word	0x0000d442
    5b98:	0001e847 	.word	0x0001e847
    5b9c:	0000d471 	.word	0x0000d471
    5ba0:	0003d08f 	.word	0x0003d08f
    5ba4:	0007a11f 	.word	0x0007a11f
    5ba8:	000f423f 	.word	0x000f423f
    5bac:	001e847f 	.word	0x001e847f
    5bb0:	003d08ff 	.word	0x003d08ff
    5bb4:	007a1200 	.word	0x007a1200
    5bb8:	0000d4c8 	.word	0x0000d4c8
    5bbc:	0000d4a2 	.word	0x0000d4a2

00005bc0 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
    5bc0:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
    5bc4:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
    5bc8:	280a      	cmp	r0, #10
    5bca:	bf9a      	itte	ls
    5bcc:	4b02      	ldrls	r3, [pc, #8]	; (5bd8 <qspi_get_zephyr_ret_code+0x18>)
    5bce:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
    5bd2:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
    5bd6:	4770      	bx	lr
    5bd8:	0000c4fa 	.word	0x0000c4fa

00005bdc <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
    5bdc:	4b02      	ldr	r3, [pc, #8]	; (5be8 <qspi_nor_pages_layout+0xc>)
    5bde:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    5be0:	2301      	movs	r3, #1
    5be2:	6013      	str	r3, [r2, #0]
}
    5be4:	4770      	bx	lr
    5be6:	bf00      	nop
    5be8:	0000c330 	.word	0x0000c330

00005bec <qspi_flash_get_parameters>:
qspi_flash_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &qspi_flash_parameters;
}
    5bec:	4800      	ldr	r0, [pc, #0]	; (5bf0 <qspi_flash_get_parameters+0x4>)
    5bee:	4770      	bx	lr
    5bf0:	0000c340 	.word	0x0000c340

00005bf4 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
    5bf4:	4b05      	ldr	r3, [pc, #20]	; (5c0c <qspi_wait_for_completion.isra.0+0x18>)
    5bf6:	4299      	cmp	r1, r3
    5bf8:	d106      	bne.n	5c08 <qspi_wait_for_completion.isra.0+0x14>
    5bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c02:	3020      	adds	r0, #32
    5c04:	f002 bc90 	b.w	8528 <z_impl_k_sem_take>
}
    5c08:	4770      	bx	lr
    5c0a:	bf00      	nop
    5c0c:	0bad0000 	.word	0x0bad0000

00005c10 <qspi_send_cmd>:
{
    5c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (cmd->tx_buf) {
    5c12:	684d      	ldr	r5, [r1, #4]
{
    5c14:	4606      	mov	r6, r0
	if (cmd->tx_buf) {
    5c16:	b1e5      	cbz	r5, 5c52 <qspi_send_cmd+0x42>
		tx_buf = cmd->tx_buf->buf;
    5c18:	e9d5 5300 	ldrd	r5, r3, [r5]
	if (cmd->rx_buf) {
    5c1c:	6888      	ldr	r0, [r1, #8]
    5c1e:	b1d0      	cbz	r0, 5c56 <qspi_send_cmd+0x46>
		rx_len = cmd->rx_buf->len;
    5c20:	e9d0 7400 	ldrd	r7, r4, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
    5c24:	b1cc      	cbz	r4, 5c5a <qspi_send_cmd+0x4a>
    5c26:	b1c3      	cbz	r3, 5c5a <qspi_send_cmd+0x4a>
		if (rx_len != tx_len) {
    5c28:	429c      	cmp	r4, r3
    5c2a:	d10e      	bne.n	5c4a <qspi_send_cmd+0x3a>
		xfer_len += tx_len;
    5c2c:	1c5c      	adds	r4, r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    5c2e:	2c09      	cmp	r4, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
    5c30:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    5c32:	d915      	bls.n	5c60 <qspi_send_cmd+0x50>
    5c34:	4a1b      	ldr	r2, [pc, #108]	; (5ca4 <qspi_send_cmd+0x94>)
    5c36:	4b1c      	ldr	r3, [pc, #112]	; (5ca8 <qspi_send_cmd+0x98>)
		LOG_WRN("cinstr %02x transfer too long: %zu",
    5c38:	481c      	ldr	r0, [pc, #112]	; (5cac <qspi_send_cmd+0x9c>)
    5c3a:	1a9b      	subs	r3, r3, r2
    5c3c:	08db      	lsrs	r3, r3, #3
    5c3e:	019b      	lsls	r3, r3, #6
    5c40:	f043 0302 	orr.w	r3, r3, #2
    5c44:	4622      	mov	r2, r4
    5c46:	f004 f886 	bl	9d56 <log_2>
}
    5c4a:	f06f 0015 	mvn.w	r0, #21
    5c4e:	b003      	add	sp, #12
    5c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
    5c52:	462b      	mov	r3, r5
    5c54:	e7e2      	b.n	5c1c <qspi_send_cmd+0xc>
	void *rx_buf = NULL;
    5c56:	4607      	mov	r7, r0
	size_t rx_len = 0;
    5c58:	4604      	mov	r4, r0
		xfer_len += tx_len + rx_len;
    5c5a:	3301      	adds	r3, #1
    5c5c:	441c      	add	r4, r3
    5c5e:	e7e6      	b.n	5c2e <qspi_send_cmd+0x1e>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    5c60:	2301      	movs	r3, #1
	qspi_lock(dev);
    5c62:	6930      	ldr	r0, [r6, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    5c64:	f88d 3002 	strb.w	r3, [sp, #2]
    5c68:	f88d 3003 	strb.w	r3, [sp, #3]
    5c6c:	2300      	movs	r3, #0
    5c6e:	f88d 3004 	strb.w	r3, [sp, #4]
    5c72:	f88d 1000 	strb.w	r1, [sp]
    5c76:	f88d 4001 	strb.w	r4, [sp, #1]
    5c7a:	f88d 2005 	strb.w	r2, [sp, #5]
	qspi_lock(dev);
    5c7e:	f005 fa06 	bl	b08e <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    5c82:	463a      	mov	r2, r7
    5c84:	4629      	mov	r1, r5
    5c86:	4668      	mov	r0, sp
    5c88:	f001 fdcc 	bl	7824 <nrfx_qspi_cinstr_xfer>
    5c8c:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
    5c8e:	6930      	ldr	r0, [r6, #16]
    5c90:	3010      	adds	r0, #16
    5c92:	f005 f9f4 	bl	b07e <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
    5c96:	4620      	mov	r0, r4
}
    5c98:	b003      	add	sp, #12
    5c9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return qspi_get_zephyr_ret_code(res);
    5c9e:	f7ff bf8f 	b.w	5bc0 <qspi_get_zephyr_ret_code>
    5ca2:	bf00      	nop
    5ca4:	0000bee4 	.word	0x0000bee4
    5ca8:	0000bf24 	.word	0x0000bf24
    5cac:	0000d501 	.word	0x0000d501

00005cb0 <anomaly_122_uninit>:
{
    5cb0:	b538      	push	{r3, r4, r5, lr}
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5cb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5cb6:	4604      	mov	r4, r0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5cb8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5cbc:	2b08      	cmp	r3, #8
    5cbe:	d12a      	bne.n	5d16 <anomaly_122_uninit+0x66>
	qspi_lock(dev);
    5cc0:	6900      	ldr	r0, [r0, #16]
    5cc2:	f005 f9e4 	bl	b08e <qspi_lock.isra.0>
	return dev->data;
    5cc6:	6925      	ldr	r5, [r4, #16]
    5cc8:	2200      	movs	r2, #0
    5cca:	2300      	movs	r3, #0
    5ccc:	f105 0030 	add.w	r0, r5, #48	; 0x30
    5cd0:	f002 fc2a 	bl	8528 <z_impl_k_sem_take>
	if (last) {
    5cd4:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5cd6:	b993      	cbnz	r3, 5cfe <anomaly_122_uninit+0x4e>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
    5cd8:	4d0f      	ldr	r5, [pc, #60]	; (5d18 <anomaly_122_uninit+0x68>)
    5cda:	f001 fde3 	bl	78a4 <nrfx_qspi_mem_busy_check>
    5cde:	42a8      	cmp	r0, r5
    5ce0:	d113      	bne.n	5d0a <anomaly_122_uninit+0x5a>
    reg->PIN_CNF[pin_number] = cnf;
    5ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5ce6:	2203      	movs	r2, #3
    5ce8:	f8c3 2744 	str.w	r2, [r3, #1860]	; 0x744
    p_reg->OUTSET = set_mask;
    5cec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5cf0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		nrfx_qspi_uninit();
    5cf4:	f001 fdfa 	bl	78ec <nrfx_qspi_uninit>
		qspi_initialized = false;
    5cf8:	4b08      	ldr	r3, [pc, #32]	; (5d1c <anomaly_122_uninit+0x6c>)
    5cfa:	2200      	movs	r2, #0
    5cfc:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
    5cfe:	6920      	ldr	r0, [r4, #16]
}
    5d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
    5d04:	3010      	adds	r0, #16
    5d06:	f005 b9ba 	b.w	b07e <k_sem_give>
	return z_impl_k_sleep(timeout);
    5d0a:	2100      	movs	r1, #0
    5d0c:	f240 6067 	movw	r0, #1639	; 0x667
    5d10:	f002 ff08 	bl	8b24 <z_impl_k_sleep>
    5d14:	e7e1      	b.n	5cda <anomaly_122_uninit+0x2a>
}
    5d16:	bd38      	pop	{r3, r4, r5, pc}
    5d18:	0bad0000 	.word	0x0bad0000
    5d1c:	20002f78 	.word	0x20002f78

00005d20 <anomaly_122_init.isra.0>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5d20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
static int anomaly_122_init(const struct device *dev)
    5d24:	b570      	push	{r4, r5, r6, lr}
            if (var1 == 0x08)
    5d26:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5d2a:	2b08      	cmp	r3, #8
    5d2c:	4604      	mov	r4, r0
    5d2e:	d11c      	bne.n	5d6a <anomaly_122_init.isra.0+0x4a>
	if (!qspi_initialized) {
    5d30:	4e0f      	ldr	r6, [pc, #60]	; (5d70 <anomaly_122_init.isra.0+0x50>)
    5d32:	f005 f9ac 	bl	b08e <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
    5d36:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5d3a:	f005 f9a0 	bl	b07e <k_sem_give>
	if (!qspi_initialized) {
    5d3e:	7833      	ldrb	r3, [r6, #0]
    5d40:	b98b      	cbnz	r3, 5d66 <anomaly_122_init.isra.0+0x46>
		res = nrfx_qspi_init(&QSPIconfig, qspi_handler, dev_data);
    5d42:	490c      	ldr	r1, [pc, #48]	; (5d74 <anomaly_122_init.isra.0+0x54>)
    5d44:	480c      	ldr	r0, [pc, #48]	; (5d78 <anomaly_122_init.isra.0+0x58>)
    5d46:	4622      	mov	r2, r4
    5d48:	f001 fc94 	bl	7674 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
    5d4c:	f7ff ff38 	bl	5bc0 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
    5d50:	fab0 f380 	clz	r3, r0
    5d54:	095b      	lsrs	r3, r3, #5
    5d56:	4605      	mov	r5, r0
    5d58:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
    5d5a:	f104 0010 	add.w	r0, r4, #16
    5d5e:	f005 f98e 	bl	b07e <k_sem_give>
}
    5d62:	4628      	mov	r0, r5
    5d64:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    5d66:	2500      	movs	r5, #0
    5d68:	e7f7      	b.n	5d5a <anomaly_122_init.isra.0+0x3a>
		return 0;
    5d6a:	2500      	movs	r5, #0
    5d6c:	e7f9      	b.n	5d62 <anomaly_122_init.isra.0+0x42>
    5d6e:	bf00      	nop
    5d70:	20002f78 	.word	0x20002f78
    5d74:	0000b083 	.word	0x0000b083
    5d78:	200027cc 	.word	0x200027cc

00005d7c <qspi_nor_read>:
{
    5d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d80:	4607      	mov	r7, r0
    5d82:	b085      	sub	sp, #20
    5d84:	460e      	mov	r6, r1
    5d86:	461c      	mov	r4, r3
	if (!dest) {
    5d88:	4690      	mov	r8, r2
    5d8a:	b1aa      	cbz	r2, 5db8 <qspi_nor_read+0x3c>
	if (!size) {
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	f000 80a1 	beq.w	5ed4 <qspi_nor_read+0x158>
	if (addr < 0 ||
    5d92:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
    5d94:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
    5d96:	db03      	blt.n	5da0 <qspi_nor_read+0x24>
    5d98:	6852      	ldr	r2, [r2, #4]
	    (addr + size) > params->size) {
    5d9a:	440b      	add	r3, r1
	if (addr < 0 ||
    5d9c:	4293      	cmp	r3, r2
    5d9e:	d90e      	bls.n	5dbe <qspi_nor_read+0x42>
    5da0:	4a4d      	ldr	r2, [pc, #308]	; (5ed8 <qspi_nor_read+0x15c>)
    5da2:	4b4e      	ldr	r3, [pc, #312]	; (5edc <qspi_nor_read+0x160>)
		LOG_ERR("read error: address or size "
    5da4:	484e      	ldr	r0, [pc, #312]	; (5ee0 <qspi_nor_read+0x164>)
    5da6:	1a9b      	subs	r3, r3, r2
    5da8:	08db      	lsrs	r3, r3, #3
    5daa:	019b      	lsls	r3, r3, #6
    5dac:	f043 0301 	orr.w	r3, r3, #1
    5db0:	4622      	mov	r2, r4
    5db2:	4631      	mov	r1, r6
    5db4:	f003 ffcf 	bl	9d56 <log_2>
		return -EINVAL;
    5db8:	f06f 0515 	mvn.w	r5, #21
    5dbc:	e084      	b.n	5ec8 <qspi_nor_read+0x14c>
	int rc = ANOMALY_122_INIT(dev);
    5dbe:	6900      	ldr	r0, [r0, #16]
    5dc0:	f7ff ffae 	bl	5d20 <anomaly_122_init.isra.0>
	if (rc != 0) {
    5dc4:	4605      	mov	r5, r0
    5dc6:	2800      	cmp	r0, #0
    5dc8:	d17b      	bne.n	5ec2 <qspi_nor_read+0x146>
	qspi_lock(dev);
    5dca:	4275      	negs	r5, r6
    5dcc:	f005 0503 	and.w	r5, r5, #3
    5dd0:	6938      	ldr	r0, [r7, #16]
    5dd2:	f005 f95c 	bl	b08e <qspi_lock.isra.0>
		flash_prefix = size;
    5dd6:	42a5      	cmp	r5, r4
    5dd8:	bf28      	it	cs
    5dda:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
    5ddc:	f1d8 0300 	rsbs	r3, r8, #0
    5de0:	f003 0303 	and.w	r3, r3, #3
    5de4:	f008 0b03 	and.w	fp, r8, #3
    5de8:	bf58      	it	pl
    5dea:	f1c3 0b00 	rsbpl	fp, r3, #0
    5dee:	f1cb 0b00 	rsb	fp, fp, #0
    5df2:	f00b 0b03 	and.w	fp, fp, #3
		dest_prefix = size;
    5df6:	45a3      	cmp	fp, r4
    5df8:	bf28      	it	cs
    5dfa:	46a3      	movcs	fp, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    5dfc:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
    5dfe:	eba4 040b 	sub.w	r4, r4, fp
	off_t dest_middle = size - dest_prefix -
    5e02:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
    5e06:	f023 0903 	bic.w	r9, r3, #3
	if (flash_middle > dest_middle) {
    5e0a:	45a1      	cmp	r9, r4
		flash_suffix = size - flash_prefix - flash_middle;
    5e0c:	bfc8      	it	gt
    5e0e:	46a1      	movgt	r9, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    5e10:	f003 0a03 	and.w	sl, r3, #3
		flash_suffix = size - flash_prefix - flash_middle;
    5e14:	bfc8      	it	gt
    5e16:	eba3 0a04 	subgt.w	sl, r3, r4
	if (flash_middle != 0) {
    5e1a:	f1b9 0f00 	cmp.w	r9, #0
    5e1e:	d018      	beq.n	5e52 <qspi_nor_read+0xd6>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
    5e20:	eb08 030b 	add.w	r3, r8, fp
    5e24:	1972      	adds	r2, r6, r5
    5e26:	4649      	mov	r1, r9
    5e28:	4618      	mov	r0, r3
    5e2a:	9301      	str	r3, [sp, #4]
    5e2c:	f005 fc7b 	bl	b726 <nrfx_qspi_read>
    5e30:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    5e32:	4601      	mov	r1, r0
    5e34:	6938      	ldr	r0, [r7, #16]
    5e36:	f7ff fedd 	bl	5bf4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    5e3a:	4a2a      	ldr	r2, [pc, #168]	; (5ee4 <qspi_nor_read+0x168>)
    5e3c:	4294      	cmp	r4, r2
    5e3e:	d138      	bne.n	5eb2 <qspi_nor_read+0x136>
		if (flash_prefix != dest_prefix) {
    5e40:	455d      	cmp	r5, fp
    5e42:	d006      	beq.n	5e52 <qspi_nor_read+0xd6>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
    5e44:	9b01      	ldr	r3, [sp, #4]
    5e46:	464a      	mov	r2, r9
    5e48:	4619      	mov	r1, r3
    5e4a:	eb08 0005 	add.w	r0, r8, r5
    5e4e:	f004 fecd 	bl	abec <memmove>
	if (flash_prefix != 0) {
    5e52:	b1ad      	cbz	r5, 5e80 <qspi_nor_read+0x104>
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
    5e54:	1f32      	subs	r2, r6, #4
    5e56:	442a      	add	r2, r5
    5e58:	2104      	movs	r1, #4
    5e5a:	a802      	add	r0, sp, #8
    5e5c:	f005 fc63 	bl	b726 <nrfx_qspi_read>
    5e60:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    5e62:	4601      	mov	r1, r0
    5e64:	6938      	ldr	r0, [r7, #16]
    5e66:	f7ff fec5 	bl	5bf4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    5e6a:	4b1e      	ldr	r3, [pc, #120]	; (5ee4 <qspi_nor_read+0x168>)
    5e6c:	429c      	cmp	r4, r3
    5e6e:	d120      	bne.n	5eb2 <qspi_nor_read+0x136>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
    5e70:	f1c5 0104 	rsb	r1, r5, #4
    5e74:	ab02      	add	r3, sp, #8
    5e76:	462a      	mov	r2, r5
    5e78:	4419      	add	r1, r3
    5e7a:	4640      	mov	r0, r8
    5e7c:	f004 fece 	bl	ac1c <memcpy>
	if (flash_suffix != 0) {
    5e80:	f1ba 0f00 	cmp.w	sl, #0
    5e84:	d024      	beq.n	5ed0 <qspi_nor_read+0x154>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    5e86:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
    5e88:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    5e8a:	444a      	add	r2, r9
    5e8c:	eb0d 0001 	add.w	r0, sp, r1
    5e90:	f005 fc49 	bl	b726 <nrfx_qspi_read>
    5e94:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    5e96:	4601      	mov	r1, r0
    5e98:	6938      	ldr	r0, [r7, #16]
    5e9a:	f7ff feab 	bl	5bf4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    5e9e:	4b11      	ldr	r3, [pc, #68]	; (5ee4 <qspi_nor_read+0x168>)
    5ea0:	429c      	cmp	r4, r3
    5ea2:	d106      	bne.n	5eb2 <qspi_nor_read+0x136>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
    5ea4:	eb09 0005 	add.w	r0, r9, r5
    5ea8:	4652      	mov	r2, sl
    5eaa:	a902      	add	r1, sp, #8
    5eac:	4440      	add	r0, r8
    5eae:	f004 feb5 	bl	ac1c <memcpy>
	k_sem_give(&dev_data->sem);
    5eb2:	6938      	ldr	r0, [r7, #16]
    5eb4:	3010      	adds	r0, #16
    5eb6:	f005 f8e2 	bl	b07e <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    5eba:	4620      	mov	r0, r4
    5ebc:	f7ff fe80 	bl	5bc0 <qspi_get_zephyr_ret_code>
    5ec0:	4605      	mov	r5, r0
	ANOMALY_122_UNINIT(dev);
    5ec2:	4638      	mov	r0, r7
    5ec4:	f7ff fef4 	bl	5cb0 <anomaly_122_uninit>
}
    5ec8:	4628      	mov	r0, r5
    5eca:	b005      	add	sp, #20
    5ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return res;
    5ed0:	4c04      	ldr	r4, [pc, #16]	; (5ee4 <qspi_nor_read+0x168>)
    5ed2:	e7ee      	b.n	5eb2 <qspi_nor_read+0x136>
		return 0;
    5ed4:	461d      	mov	r5, r3
    5ed6:	e7f7      	b.n	5ec8 <qspi_nor_read+0x14c>
    5ed8:	0000bee4 	.word	0x0000bee4
    5edc:	0000bf24 	.word	0x0000bf24
    5ee0:	0000d524 	.word	0x0000d524
    5ee4:	0bad0000 	.word	0x0bad0000

00005ee8 <qspi_nor_write>:
{
    5ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5eec:	4605      	mov	r5, r0
    5eee:	460f      	mov	r7, r1
    5ef0:	461e      	mov	r6, r3
	if (!src) {
    5ef2:	4690      	mov	r8, r2
    5ef4:	b1ca      	cbz	r2, 5f2a <qspi_nor_write+0x42>
	if ((size == 0)
    5ef6:	b1c3      	cbz	r3, 5f2a <qspi_nor_write+0x42>
	    || ((size > 4) && ((size % 4U) != 0))) {
    5ef8:	2b04      	cmp	r3, #4
    5efa:	d901      	bls.n	5f00 <qspi_nor_write+0x18>
    5efc:	079a      	lsls	r2, r3, #30
    5efe:	d114      	bne.n	5f2a <qspi_nor_write+0x42>
	if ((addr % 4U) != 0) {
    5f00:	07bb      	lsls	r3, r7, #30
    5f02:	d112      	bne.n	5f2a <qspi_nor_write+0x42>
	if (addr < 0 ||
    5f04:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
    5f06:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
    5f08:	db03      	blt.n	5f12 <qspi_nor_write+0x2a>
    5f0a:	6852      	ldr	r2, [r2, #4]
	    (addr + size) > params->size) {
    5f0c:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
    5f0e:	4293      	cmp	r3, r2
    5f10:	d90e      	bls.n	5f30 <qspi_nor_write+0x48>
    5f12:	4a40      	ldr	r2, [pc, #256]	; (6014 <qspi_nor_write+0x12c>)
    5f14:	4b40      	ldr	r3, [pc, #256]	; (6018 <qspi_nor_write+0x130>)
		LOG_ERR("write error: address or size "
    5f16:	4841      	ldr	r0, [pc, #260]	; (601c <qspi_nor_write+0x134>)
    5f18:	1a9b      	subs	r3, r3, r2
    5f1a:	08db      	lsrs	r3, r3, #3
    5f1c:	019b      	lsls	r3, r3, #6
    5f1e:	f043 0301 	orr.w	r3, r3, #1
    5f22:	4632      	mov	r2, r6
    5f24:	4639      	mov	r1, r7
    5f26:	f003 ff16 	bl	9d56 <log_2>
		return -EINVAL;
    5f2a:	f06f 0415 	mvn.w	r4, #21
    5f2e:	e069      	b.n	6004 <qspi_nor_write+0x11c>
	int rc = ANOMALY_122_INIT(dev);
    5f30:	6928      	ldr	r0, [r5, #16]
    5f32:	f7ff fef5 	bl	5d20 <anomaly_122_init.isra.0>
	if (rc != 0) {
    5f36:	4604      	mov	r4, r0
    5f38:	2800      	cmp	r0, #0
    5f3a:	d160      	bne.n	5ffe <qspi_nor_write+0x116>
	qspi_trans_lock(dev);
    5f3c:	6928      	ldr	r0, [r5, #16]
    5f3e:	f005 f8ad 	bl	b09c <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
    5f42:	4621      	mov	r1, r4
    5f44:	4628      	mov	r0, r5
    5f46:	f005 f8af 	bl	b0a8 <qspi_nor_write_protection_set>
    5f4a:	4604      	mov	r4, r0
	qspi_lock(dev);
    5f4c:	6928      	ldr	r0, [r5, #16]
    5f4e:	f005 f89e 	bl	b08e <qspi_lock.isra.0>
	if (!res) {
    5f52:	2c00      	cmp	r4, #0
    5f54:	d140      	bne.n	5fd8 <qspi_nor_write+0xf0>
		if (size < 4U) {
    5f56:	2e03      	cmp	r6, #3
    5f58:	d81c      	bhi.n	5f94 <qspi_nor_write+0xac>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
    5f5a:	463a      	mov	r2, r7
    5f5c:	2104      	movs	r1, #4
    5f5e:	4668      	mov	r0, sp
    5f60:	f005 fbe1 	bl	b726 <nrfx_qspi_read>
    5f64:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
    5f66:	4601      	mov	r1, r0
    5f68:	6928      	ldr	r0, [r5, #16]
    5f6a:	f7ff fe43 	bl	5bf4 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
    5f6e:	4b2c      	ldr	r3, [pc, #176]	; (6020 <qspi_nor_write+0x138>)
    5f70:	429c      	cmp	r4, r3
    5f72:	d131      	bne.n	5fd8 <qspi_nor_write+0xf0>
		memcpy(buf, sptr, slen);
    5f74:	4632      	mov	r2, r6
    5f76:	4641      	mov	r1, r8
    5f78:	4668      	mov	r0, sp
    5f7a:	f004 fe4f 	bl	ac1c <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
    5f7e:	463a      	mov	r2, r7
    5f80:	2104      	movs	r1, #4
    5f82:	4668      	mov	r0, sp
			res = nrfx_qspi_write(src, size, addr);
    5f84:	f005 fbcc 	bl	b720 <nrfx_qspi_write>
    5f88:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    5f8a:	4601      	mov	r1, r0
    5f8c:	6928      	ldr	r0, [r5, #16]
    5f8e:	f7ff fe31 	bl	5bf4 <qspi_wait_for_completion.isra.0>
    5f92:	e021      	b.n	5fd8 <qspi_nor_write+0xf0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5f94:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
    5f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5f9c:	d036      	beq.n	600c <qspi_nor_write+0x124>
		if (res == NRFX_SUCCESS) {
    5f9e:	f8df a080 	ldr.w	sl, [pc, #128]	; 6020 <qspi_nor_write+0x138>
		size_t len = MIN(slen, sizeof(buf));
    5fa2:	2e10      	cmp	r6, #16
    5fa4:	46b1      	mov	r9, r6
    5fa6:	bf28      	it	cs
    5fa8:	f04f 0910 	movcs.w	r9, #16
		memcpy(buf, sp, len);
    5fac:	464a      	mov	r2, r9
    5fae:	4641      	mov	r1, r8
    5fb0:	4668      	mov	r0, sp
    5fb2:	f004 fe33 	bl	ac1c <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf),
    5fb6:	463a      	mov	r2, r7
    5fb8:	2110      	movs	r1, #16
    5fba:	4668      	mov	r0, sp
    5fbc:	f005 fbb0 	bl	b720 <nrfx_qspi_write>
    5fc0:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    5fc2:	4601      	mov	r1, r0
    5fc4:	6928      	ldr	r0, [r5, #16]
    5fc6:	f7ff fe15 	bl	5bf4 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    5fca:	4554      	cmp	r4, sl
    5fcc:	d104      	bne.n	5fd8 <qspi_nor_write+0xf0>
	while ((slen > 0) && (res == NRFX_SUCCESS)) {
    5fce:	ebb6 0609 	subs.w	r6, r6, r9
			sp += len;
    5fd2:	44c8      	add	r8, r9
			addr += len;
    5fd4:	444f      	add	r7, r9
	while ((slen > 0) && (res == NRFX_SUCCESS)) {
    5fd6:	d1e4      	bne.n	5fa2 <qspi_nor_write+0xba>
	k_sem_give(&dev_data->sem);
    5fd8:	6928      	ldr	r0, [r5, #16]
    5fda:	3010      	adds	r0, #16
    5fdc:	f005 f84f 	bl	b07e <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
    5fe0:	2101      	movs	r1, #1
    5fe2:	4628      	mov	r0, r5
    5fe4:	f005 f860 	bl	b0a8 <qspi_nor_write_protection_set>
    5fe8:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
    5fea:	6928      	ldr	r0, [r5, #16]
    5fec:	f005 f847 	bl	b07e <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
    5ff0:	2c00      	cmp	r4, #0
    5ff2:	bf14      	ite	ne
    5ff4:	4620      	movne	r0, r4
    5ff6:	4630      	moveq	r0, r6
    5ff8:	f7ff fde2 	bl	5bc0 <qspi_get_zephyr_ret_code>
    5ffc:	4604      	mov	r4, r0
	ANOMALY_122_UNINIT(dev);
    5ffe:	4628      	mov	r0, r5
    6000:	f7ff fe56 	bl	5cb0 <anomaly_122_uninit>
}
    6004:	4620      	mov	r0, r4
    6006:	b004      	add	sp, #16
    6008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = nrfx_qspi_write(src, size, addr);
    600c:	463a      	mov	r2, r7
    600e:	4631      	mov	r1, r6
    6010:	4640      	mov	r0, r8
    6012:	e7b7      	b.n	5f84 <qspi_nor_write+0x9c>
    6014:	0000bee4 	.word	0x0000bee4
    6018:	0000bf24 	.word	0x0000bf24
    601c:	0000d56d 	.word	0x0000d56d
    6020:	0bad0000 	.word	0x0bad0000

00006024 <qspi_nor_init>:
{
    6024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    6028:	2200      	movs	r2, #0
{
    602a:	b08b      	sub	sp, #44	; 0x2c
    602c:	4605      	mov	r5, r0
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    602e:	2101      	movs	r1, #1
    6030:	2029      	movs	r0, #41	; 0x29
    6032:	f7fe f84f 	bl	40d4 <z_arm_irq_priority_set>
	initstruct->xip_offset = 0;
    6036:	4e5b      	ldr	r6, [pc, #364]	; (61a4 <qspi_nor_init+0x180>)
	initstruct->pins.sck_pin = DT_PROP(QSPI_NODE, sck_pin);
    6038:	495b      	ldr	r1, [pc, #364]	; (61a8 <qspi_nor_init+0x184>)
	const struct qspi_nor_config *params = dev->config;
    603a:	f8d5 9004 	ldr.w	r9, [r5, #4]
	struct qspi_nor_data *dev_data = dev->data;
    603e:	692a      	ldr	r2, [r5, #16]
	initstruct->pins.sck_pin = DT_PROP(QSPI_NODE, sck_pin);
    6040:	2300      	movs	r3, #0
    6042:	e9c6 3100 	strd	r3, r1, [r6]
	initstruct->pins.io2_pin = QSPI_PROP_AT(io_pins, 2);
    6046:	4959      	ldr	r1, [pc, #356]	; (61ac <qspi_nor_init+0x188>)
	initstruct->prot_if.addrmode =
    6048:	e9c6 1302 	strd	r1, r3, [r6, #8]
	initstruct->phy_if.spi_mode = qspi_get_mode(DT_INST_PROP(0, cpol),
    604c:	f44f 7340 	mov.w	r3, #768	; 0x300
    6050:	8233      	strh	r3, [r6, #16]
	nrfx_err_t res = nrfx_qspi_init(&QSPIconfig, qspi_handler, dev_data);
    6052:	4957      	ldr	r1, [pc, #348]	; (61b0 <qspi_nor_init+0x18c>)
    6054:	4630      	mov	r0, r6
    6056:	f001 fb0d 	bl	7674 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
    605a:	f7ff fdb1 	bl	5bc0 <qspi_get_zephyr_ret_code>
	if ((ret == 0)
    605e:	4604      	mov	r4, r0
    6060:	b978      	cbnz	r0, 6082 <qspi_nor_init+0x5e>
		ret = qspi_rdsr(dev);
    6062:	4628      	mov	r0, r5
    6064:	f005 f835 	bl	b0d2 <qspi_rdsr>
		if (ret < 0) {
    6068:	1e04      	subs	r4, r0, #0
    606a:	da0e      	bge.n	608a <qspi_nor_init+0x66>
    606c:	4a51      	ldr	r2, [pc, #324]	; (61b4 <qspi_nor_init+0x190>)
    606e:	4b52      	ldr	r3, [pc, #328]	; (61b8 <qspi_nor_init+0x194>)
			LOG_ERR("RDSR failed: %d", ret);
    6070:	4852      	ldr	r0, [pc, #328]	; (61bc <qspi_nor_init+0x198>)
    6072:	1ad2      	subs	r2, r2, r3
    6074:	08d2      	lsrs	r2, r2, #3
    6076:	0192      	lsls	r2, r2, #6
    6078:	f042 0201 	orr.w	r2, r2, #1
    607c:	4621      	mov	r1, r4
    607e:	f003 fe56 	bl	9d2e <log_1>
}
    6082:	4620      	mov	r0, r4
    6084:	b00b      	add	sp, #44	; 0x2c
    6086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (lines) {
    608a:	7af3      	ldrb	r3, [r6, #11]
    608c:	3b02      	subs	r3, #2
    608e:	2b01      	cmp	r3, #1
		uint8_t sr = (uint8_t)ret;
    6090:	b2e0      	uxtb	r0, r4
	switch (lines) {
    6092:	d955      	bls.n	6140 <qspi_nor_init+0x11c>
	switch (lines) {
    6094:	f896 800a 	ldrb.w	r8, [r6, #10]
    6098:	f1a8 0803 	sub.w	r8, r8, #3
    609c:	f1b8 0f01 	cmp.w	r8, #1
    60a0:	bf8c      	ite	hi
    60a2:	f04f 0800 	movhi.w	r8, #0
    60a6:	f04f 0801 	movls.w	r8, #1
		if (qe_state != qe_value) {
    60aa:	f3c0 1380 	ubfx	r3, r0, #6, #1
    60ae:	4598      	cmp	r8, r3
    60b0:	ae01      	add	r6, sp, #4
    60b2:	af02      	add	r7, sp, #8
    60b4:	d147      	bne.n	6146 <qspi_nor_init+0x122>
	ANOMALY_122_UNINIT(dev);
    60b6:	4628      	mov	r0, r5
    60b8:	f7ff fdfa 	bl	5cb0 <anomaly_122_uninit>
	const struct qspi_cmd cmd = {
    60bc:	2300      	movs	r3, #0
    60be:	2203      	movs	r2, #3
    60c0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    60c4:	9305      	str	r3, [sp, #20]
	int ret = ANOMALY_122_INIT(dev);
    60c6:	6928      	ldr	r0, [r5, #16]
	const struct qspi_buf rx_buf = {
    60c8:	9602      	str	r6, [sp, #8]
	const struct qspi_cmd cmd = {
    60ca:	239f      	movs	r3, #159	; 0x9f
    60cc:	f88d 3010 	strb.w	r3, [sp, #16]
    60d0:	9706      	str	r7, [sp, #24]
	int ret = ANOMALY_122_INIT(dev);
    60d2:	f7ff fe25 	bl	5d20 <anomaly_122_init.isra.0>
	if (ret == 0) {
    60d6:	4604      	mov	r4, r0
    60d8:	b928      	cbnz	r0, 60e6 <qspi_nor_init+0xc2>
		ret = qspi_send_cmd(dev, &cmd, false);
    60da:	4602      	mov	r2, r0
    60dc:	a904      	add	r1, sp, #16
    60de:	4628      	mov	r0, r5
    60e0:	f7ff fd96 	bl	5c10 <qspi_send_cmd>
    60e4:	4604      	mov	r4, r0
	ANOMALY_122_UNINIT(dev);
    60e6:	4628      	mov	r0, r5
    60e8:	f7ff fde2 	bl	5cb0 <anomaly_122_uninit>
	if (ret != 0) {
    60ec:	bb2c      	cbnz	r4, 613a <qspi_nor_init+0x116>
	if (memcmp(flash_id->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
    60ee:	2203      	movs	r2, #3
    60f0:	4631      	mov	r1, r6
    60f2:	4648      	mov	r0, r9
    60f4:	f004 fd69 	bl	abca <memcmp>
    60f8:	4604      	mov	r4, r0
    60fa:	2800      	cmp	r0, #0
    60fc:	d0c1      	beq.n	6082 <qspi_nor_init+0x5e>
    60fe:	4a2e      	ldr	r2, [pc, #184]	; (61b8 <qspi_nor_init+0x194>)
    6100:	4b2c      	ldr	r3, [pc, #176]	; (61b4 <qspi_nor_init+0x190>)
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
    6102:	482f      	ldr	r0, [pc, #188]	; (61c0 <qspi_nor_init+0x19c>)
    6104:	1a9b      	subs	r3, r3, r2
    6106:	f89d 2004 	ldrb.w	r2, [sp, #4]
    610a:	9204      	str	r2, [sp, #16]
    610c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6110:	9205      	str	r2, [sp, #20]
    6112:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6116:	9206      	str	r2, [sp, #24]
    6118:	f899 2000 	ldrb.w	r2, [r9]
    611c:	9207      	str	r2, [sp, #28]
    611e:	f899 2001 	ldrb.w	r2, [r9, #1]
    6122:	9208      	str	r2, [sp, #32]
    6124:	08db      	lsrs	r3, r3, #3
    6126:	f899 2002 	ldrb.w	r2, [r9, #2]
    612a:	9209      	str	r2, [sp, #36]	; 0x24
    612c:	019b      	lsls	r3, r3, #6
    612e:	f043 0301 	orr.w	r3, r3, #1
    6132:	2206      	movs	r2, #6
    6134:	a904      	add	r1, sp, #16
    6136:	f003 fe43 	bl	9dc0 <log_n>
		return -ENODEV;
    613a:	f06f 0412 	mvn.w	r4, #18
	return qspi_nor_configure(dev);
    613e:	e7a0      	b.n	6082 <qspi_nor_init+0x5e>
			|| (qspi_read_is_quad(QSPIconfig.prot_if.readoc));
    6140:	f04f 0801 	mov.w	r8, #1
    6144:	e7b1      	b.n	60aa <qspi_nor_init+0x86>
			sr ^= qe_mask;
    6146:	f080 0040 	eor.w	r0, r0, #64	; 0x40
			struct qspi_cmd cmd = {
    614a:	2201      	movs	r2, #1
    614c:	2300      	movs	r3, #0
			sr ^= qe_mask;
    614e:	f88d 0004 	strb.w	r0, [sp, #4]
			ret = qspi_send_cmd(dev, &cmd, true);
    6152:	a904      	add	r1, sp, #16
    6154:	4628      	mov	r0, r5
			struct qspi_cmd cmd = {
    6156:	e9cd 2303 	strd	r2, r3, [sp, #12]
			const struct qspi_buf sr_buf = {
    615a:	9602      	str	r6, [sp, #8]
			struct qspi_cmd cmd = {
    615c:	9306      	str	r3, [sp, #24]
    615e:	f88d 2010 	strb.w	r2, [sp, #16]
    6162:	9705      	str	r7, [sp, #20]
			ret = qspi_send_cmd(dev, &cmd, true);
    6164:	f7ff fd54 	bl	5c10 <qspi_send_cmd>
			if (ret == 0) {
    6168:	1e04      	subs	r4, r0, #0
    616a:	d107      	bne.n	617c <qspi_nor_init+0x158>
		ret = qspi_rdsr(dev);
    616c:	4628      	mov	r0, r5
    616e:	f004 ffb0 	bl	b0d2 <qspi_rdsr>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
    6172:	1e04      	subs	r4, r0, #0
    6174:	db03      	blt.n	617e <qspi_nor_init+0x15a>
    6176:	07e3      	lsls	r3, r4, #31
    6178:	d4f8      	bmi.n	616c <qspi_nor_init+0x148>
    617a:	e79c      	b.n	60b6 <qspi_nor_init+0x92>
		if (ret < 0) {
    617c:	da81      	bge.n	6082 <qspi_nor_init+0x5e>
    617e:	4a0e      	ldr	r2, [pc, #56]	; (61b8 <qspi_nor_init+0x194>)
    6180:	4b0c      	ldr	r3, [pc, #48]	; (61b4 <qspi_nor_init+0x190>)
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
    6182:	4810      	ldr	r0, [pc, #64]	; (61c4 <qspi_nor_init+0x1a0>)
    6184:	4910      	ldr	r1, [pc, #64]	; (61c8 <qspi_nor_init+0x1a4>)
    6186:	1a9b      	subs	r3, r3, r2
    6188:	08db      	lsrs	r3, r3, #3
    618a:	019b      	lsls	r3, r3, #6
    618c:	f1b8 0f00 	cmp.w	r8, #0
    6190:	bf08      	it	eq
    6192:	4601      	moveq	r1, r0
    6194:	f043 0301 	orr.w	r3, r3, #1
    6198:	480c      	ldr	r0, [pc, #48]	; (61cc <qspi_nor_init+0x1a8>)
    619a:	4622      	mov	r2, r4
    619c:	f003 fddb 	bl	9d56 <log_2>
	if (ret != 0) {
    61a0:	e76f      	b.n	6082 <qspi_nor_init+0x5e>
    61a2:	bf00      	nop
    61a4:	200027cc 	.word	0x200027cc
    61a8:	15141113 	.word	0x15141113
    61ac:	03041716 	.word	0x03041716
    61b0:	0000b083 	.word	0x0000b083
    61b4:	0000bf24 	.word	0x0000bf24
    61b8:	0000bee4 	.word	0x0000bee4
    61bc:	0000d5b7 	.word	0x0000d5b7
    61c0:	0000d5de 	.word	0x0000d5de
    61c4:	0000d5c7 	.word	0x0000d5c7
    61c8:	0000c7b5 	.word	0x0000c7b5
    61cc:	0000d5cd 	.word	0x0000d5cd

000061d0 <qspi_nor_erase>:
{
    61d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
    61d4:	f1b1 0800 	subs.w	r8, r1, #0
	const struct qspi_nor_config *params = dev->config;
    61d8:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
    61dc:	4606      	mov	r6, r0
    61de:	4615      	mov	r5, r2
	if (addr < 0 ||
    61e0:	db05      	blt.n	61ee <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
    61e2:	eb02 0308 	add.w	r3, r2, r8
	if (addr < 0 ||
    61e6:	f8da 2004 	ldr.w	r2, [sl, #4]
    61ea:	4293      	cmp	r3, r2
    61ec:	d90d      	bls.n	620a <qspi_nor_erase+0x3a>
    61ee:	4a47      	ldr	r2, [pc, #284]	; (630c <qspi_nor_erase+0x13c>)
    61f0:	4b47      	ldr	r3, [pc, #284]	; (6310 <qspi_nor_erase+0x140>)
		LOG_ERR("erase error: address or size "
    61f2:	4848      	ldr	r0, [pc, #288]	; (6314 <qspi_nor_erase+0x144>)
    61f4:	1a9b      	subs	r3, r3, r2
    61f6:	08db      	lsrs	r3, r3, #3
    61f8:	019b      	lsls	r3, r3, #6
    61fa:	f043 0301 	orr.w	r3, r3, #1
    61fe:	462a      	mov	r2, r5
    6200:	f003 fda9 	bl	9d56 <log_2>
		return -EINVAL;
    6204:	f06f 0415 	mvn.w	r4, #21
    6208:	e037      	b.n	627a <qspi_nor_erase+0xaa>
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
    620a:	2d00      	cmp	r5, #0
    620c:	d0fa      	beq.n	6204 <qspi_nor_erase+0x34>
    620e:	ea45 0308 	orr.w	r3, r5, r8
    6212:	f3c3 030b 	ubfx	r3, r3, #0, #12
    6216:	2b00      	cmp	r3, #0
    6218:	d1f4      	bne.n	6204 <qspi_nor_erase+0x34>
	rv = ANOMALY_122_INIT(dev);
    621a:	6900      	ldr	r0, [r0, #16]
    621c:	f7ff fd80 	bl	5d20 <anomaly_122_init.isra.0>
	if (rv != 0) {
    6220:	4604      	mov	r4, r0
    6222:	bb38      	cbnz	r0, 6274 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
    6224:	6930      	ldr	r0, [r6, #16]
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
    6226:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 6318 <qspi_nor_erase+0x148>
	qspi_trans_lock(dev);
    622a:	f004 ff37 	bl	b09c <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
    622e:	4621      	mov	r1, r4
    6230:	4630      	mov	r0, r6
    6232:	f004 ff39 	bl	b0a8 <qspi_nor_write_protection_set>
    6236:	4604      	mov	r4, r0
	qspi_lock(dev);
    6238:	6930      	ldr	r0, [r6, #16]
    623a:	f004 ff28 	bl	b08e <qspi_lock.isra.0>
    623e:	4b34      	ldr	r3, [pc, #208]	; (6310 <qspi_nor_erase+0x140>)
    6240:	4a32      	ldr	r2, [pc, #200]	; (630c <qspi_nor_erase+0x13c>)
    6242:	eba3 0902 	sub.w	r9, r3, r2
    6246:	ea4f 09d9 	mov.w	r9, r9, lsr #3
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
    624a:	ea4f 1989 	mov.w	r9, r9, lsl #6
    624e:	f049 0901 	orr.w	r9, r9, #1
	while ((rv == 0) && (size > 0)) {
    6252:	b904      	cbnz	r4, 6256 <qspi_nor_erase+0x86>
    6254:	b9ad      	cbnz	r5, 6282 <qspi_nor_erase+0xb2>
	k_sem_give(&dev_data->sem);
    6256:	6930      	ldr	r0, [r6, #16]
    6258:	3010      	adds	r0, #16
    625a:	f004 ff10 	bl	b07e <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    625e:	2101      	movs	r1, #1
    6260:	4630      	mov	r0, r6
    6262:	f004 ff21 	bl	b0a8 <qspi_nor_write_protection_set>
    6266:	4605      	mov	r5, r0
	k_sem_give(&dev_data->trans);
    6268:	6930      	ldr	r0, [r6, #16]
    626a:	f004 ff08 	bl	b07e <k_sem_give>
		rv = rv2;
    626e:	2c00      	cmp	r4, #0
    6270:	bf08      	it	eq
    6272:	462c      	moveq	r4, r5
	ANOMALY_122_UNINIT(dev);
    6274:	4630      	mov	r0, r6
    6276:	f7ff fd1b 	bl	5cb0 <anomaly_122_uninit>
}
    627a:	4620      	mov	r0, r4
    627c:	b003      	add	sp, #12
    627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (size == params->size) {
    6282:	f8da 3004 	ldr.w	r3, [sl, #4]
    6286:	42ab      	cmp	r3, r5
    6288:	d10f      	bne.n	62aa <qspi_nor_erase+0xda>
			res = nrfx_qspi_chip_erase();
    628a:	f005 fa4f 	bl	b72c <nrfx_qspi_chip_erase>
    628e:	462b      	mov	r3, r5
    6290:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
    6292:	6930      	ldr	r0, [r6, #16]
    6294:	9301      	str	r3, [sp, #4]
    6296:	4639      	mov	r1, r7
    6298:	f7ff fcac 	bl	5bf4 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    629c:	4a1f      	ldr	r2, [pc, #124]	; (631c <qspi_nor_erase+0x14c>)
    629e:	4297      	cmp	r7, r2
    62a0:	d129      	bne.n	62f6 <qspi_nor_erase+0x126>
			addr += adj;
    62a2:	9b01      	ldr	r3, [sp, #4]
    62a4:	4498      	add	r8, r3
			size -= adj;
    62a6:	1aed      	subs	r5, r5, r3
    62a8:	e7d3      	b.n	6252 <qspi_nor_erase+0x82>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    62aa:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    62ae:	d30a      	bcc.n	62c6 <qspi_nor_erase+0xf6>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
    62b0:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    62b4:	b953      	cbnz	r3, 62cc <qspi_nor_erase+0xfc>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    62b6:	4641      	mov	r1, r8
    62b8:	2001      	movs	r0, #1
    62ba:	f001 fb65 	bl	7988 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
    62be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    62c2:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
    62c4:	e7e5      	b.n	6292 <qspi_nor_erase+0xc2>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    62c6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    62ca:	d309      	bcc.n	62e0 <qspi_nor_erase+0x110>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
    62cc:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    62d0:	b930      	cbnz	r0, 62e0 <qspi_nor_erase+0x110>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    62d2:	4641      	mov	r1, r8
    62d4:	f001 fb58 	bl	7988 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
    62d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    62dc:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
    62de:	e7d8      	b.n	6292 <qspi_nor_erase+0xc2>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
    62e0:	464b      	mov	r3, r9
    62e2:	462a      	mov	r2, r5
    62e4:	4641      	mov	r1, r8
    62e6:	4658      	mov	r0, fp
    62e8:	f003 fd35 	bl	9d56 <log_2>
		uint32_t adj = 0;
    62ec:	2300      	movs	r3, #0
		nrfx_err_t res = !NRFX_SUCCESS;
    62ee:	461f      	mov	r7, r3
			rv = -EINVAL;
    62f0:	f06f 0415 	mvn.w	r4, #21
    62f4:	e7cd      	b.n	6292 <qspi_nor_erase+0xc2>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
    62f6:	480a      	ldr	r0, [pc, #40]	; (6320 <qspi_nor_erase+0x150>)
    62f8:	464b      	mov	r3, r9
    62fa:	462a      	mov	r2, r5
    62fc:	4641      	mov	r1, r8
    62fe:	f003 fd2a 	bl	9d56 <log_2>
			rv = qspi_get_zephyr_ret_code(res);
    6302:	4638      	mov	r0, r7
    6304:	f7ff fc5c 	bl	5bc0 <qspi_get_zephyr_ret_code>
    6308:	4604      	mov	r4, r0
    630a:	e7a2      	b.n	6252 <qspi_nor_erase+0x82>
    630c:	0000bee4 	.word	0x0000bee4
    6310:	0000bf24 	.word	0x0000bf24
    6314:	0000d610 	.word	0x0000d610
    6318:	0000d65a 	.word	0x0000d65a
    631c:	0bad0000 	.word	0x0bad0000
    6320:	0000d678 	.word	0x0000d678

00006324 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    6324:	4b02      	ldr	r3, [pc, #8]	; (6330 <flash_nrf_pages_layout+0xc>)
    6326:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    6328:	2301      	movs	r3, #1
    632a:	6013      	str	r3, [r2, #0]
}
    632c:	4770      	bx	lr
    632e:	bf00      	nop
    6330:	200027e8 	.word	0x200027e8

00006334 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    6334:	4800      	ldr	r0, [pc, #0]	; (6338 <flash_nrf_get_parameters+0x4>)
    6336:	4770      	bx	lr
    6338:	0000c378 	.word	0x0000c378

0000633c <flash_nrf_read>:
{
    633c:	b570      	push	{r4, r5, r6, lr}
    633e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    6340:	4628      	mov	r0, r5
    6342:	4619      	mov	r1, r3
{
    6344:	4616      	mov	r6, r2
    6346:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    6348:	f004 fede 	bl	b108 <is_regular_addr_valid>
    634c:	b970      	cbnz	r0, 636c <flash_nrf_read+0x30>
    634e:	4a0c      	ldr	r2, [pc, #48]	; (6380 <flash_nrf_read+0x44>)
    6350:	4b0c      	ldr	r3, [pc, #48]	; (6384 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    6352:	480d      	ldr	r0, [pc, #52]	; (6388 <flash_nrf_read+0x4c>)
    6354:	1a9b      	subs	r3, r3, r2
    6356:	08db      	lsrs	r3, r3, #3
    6358:	019b      	lsls	r3, r3, #6
    635a:	f043 0301 	orr.w	r3, r3, #1
    635e:	4622      	mov	r2, r4
    6360:	4629      	mov	r1, r5
    6362:	f003 fcf8 	bl	9d56 <log_2>
		return -EINVAL;
    6366:	f06f 0015 	mvn.w	r0, #21
}
    636a:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    636c:	b134      	cbz	r4, 637c <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
    636e:	4622      	mov	r2, r4
    6370:	4629      	mov	r1, r5
    6372:	4630      	mov	r0, r6
    6374:	f004 fc52 	bl	ac1c <memcpy>
	return 0;
    6378:	2000      	movs	r0, #0
    637a:	e7f6      	b.n	636a <flash_nrf_read+0x2e>
		return 0;
    637c:	4620      	mov	r0, r4
    637e:	e7f4      	b.n	636a <flash_nrf_read+0x2e>
    6380:	0000bee4 	.word	0x0000bee4
    6384:	0000beec 	.word	0x0000beec
    6388:	0000d69f 	.word	0x0000d69f

0000638c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    638c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    638e:	2201      	movs	r2, #1
    6390:	4611      	mov	r1, r2
    6392:	4806      	ldr	r0, [pc, #24]	; (63ac <nrf_flash_init+0x20>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    6394:	4c06      	ldr	r4, [pc, #24]	; (63b0 <nrf_flash_init+0x24>)
    6396:	f005 faea 	bl	b96e <z_impl_k_sem_init>
    639a:	f005 f9af 	bl	b6fc <nrfx_nvmc_flash_page_count_get>
    639e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    63a0:	f005 f9a8 	bl	b6f4 <nrfx_nvmc_flash_page_size_get>
    63a4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    63a6:	2000      	movs	r0, #0
    63a8:	bd10      	pop	{r4, pc}
    63aa:	bf00      	nop
    63ac:	200027f0 	.word	0x200027f0
    63b0:	200027e8 	.word	0x200027e8

000063b4 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
    63b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    63b8:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    63bc:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    63c0:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    63c4:	f023 031f 	bic.w	r3, r3, #31
    63c8:	430b      	orrs	r3, r1
    pofcon |=
    63ca:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    63ce:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    63d2:	4b02      	ldr	r3, [pc, #8]	; (63dc <restore_pofwarn.part.0+0x28>)
    63d4:	2200      	movs	r2, #0
    63d6:	701a      	strb	r2, [r3, #0]
	}
}
    63d8:	4770      	bx	lr
    63da:	bf00      	nop
    63dc:	20002f79 	.word	0x20002f79

000063e0 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    63e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    63e4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    63e8:	2b08      	cmp	r3, #8
    63ea:	d122      	bne.n	6432 <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
    63ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    63f0:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
    63f4:	f011 0001 	ands.w	r0, r1, #1
    63f8:	d01c      	beq.n	6434 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
    63fa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    63fe:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    6402:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
    6406:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
    6408:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    640c:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    6410:	b158      	cbz	r0, 642a <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
    6412:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    6416:	f023 031f 	bic.w	r3, r3, #31
    641a:	430b      	orrs	r3, r1
    pofcon |=
    641c:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
    6420:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
    6424:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    6428:	4770      	bx	lr
		pofcon_enabled = enabled;
    642a:	4b03      	ldr	r3, [pc, #12]	; (6438 <suspend_pofwarn+0x58>)
    642c:	2201      	movs	r2, #1
    642e:	701a      	strb	r2, [r3, #0]
    6430:	4770      	bx	lr
		return 0;
    6432:	2000      	movs	r0, #0
}
    6434:	4770      	bx	lr
    6436:	bf00      	nop
    6438:	20002f79 	.word	0x20002f79

0000643c <flash_nrf_erase>:
{
    643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6440:	460e      	mov	r6, r1
    6442:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    6444:	f005 f956 	bl	b6f4 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    6448:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    644a:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
    644c:	4630      	mov	r0, r6
    644e:	f004 fe5b 	bl	b108 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    6452:	46b0      	mov	r8, r6
	if (is_regular_addr_valid(addr, size)) {
    6454:	2800      	cmp	r0, #0
    6456:	d03c      	beq.n	64d2 <flash_nrf_erase+0x96>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    6458:	fbb6 f3f7 	udiv	r3, r6, r7
    645c:	fb07 6313 	mls	r3, r7, r3, r6
    6460:	b923      	cbnz	r3, 646c <flash_nrf_erase+0x30>
    6462:	fbb5 f4f7 	udiv	r4, r5, r7
    6466:	fb07 5414 	mls	r4, r7, r4, r5
    646a:	b174      	cbz	r4, 648a <flash_nrf_erase+0x4e>
    646c:	4a1e      	ldr	r2, [pc, #120]	; (64e8 <flash_nrf_erase+0xac>)
    646e:	4b1f      	ldr	r3, [pc, #124]	; (64ec <flash_nrf_erase+0xb0>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    6470:	481f      	ldr	r0, [pc, #124]	; (64f0 <flash_nrf_erase+0xb4>)
    6472:	1a9b      	subs	r3, r3, r2
    6474:	08db      	lsrs	r3, r3, #3
    6476:	019b      	lsls	r3, r3, #6
    6478:	f043 0301 	orr.w	r3, r3, #1
    647c:	462a      	mov	r2, r5
    647e:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
    6480:	f003 fc69 	bl	9d56 <log_2>
		return -EINVAL;
    6484:	f06f 0415 	mvn.w	r4, #21
    6488:	e01d      	b.n	64c6 <flash_nrf_erase+0x8a>
		if (!n_pages) {
    648a:	42bd      	cmp	r5, r7
    648c:	d31b      	bcc.n	64c6 <flash_nrf_erase+0x8a>
	return z_impl_k_sem_take(sem, timeout);
    648e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6496:	4817      	ldr	r0, [pc, #92]	; (64f4 <flash_nrf_erase+0xb8>)
	if (pofcon_enabled) {
    6498:	4f17      	ldr	r7, [pc, #92]	; (64f8 <flash_nrf_erase+0xbc>)
    649a:	f002 f845 	bl	8528 <z_impl_k_sem_take>
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    649e:	f005 f929 	bl	b6f4 <nrfx_nvmc_flash_page_size_get>
    64a2:	4606      	mov	r6, r0
		if (SUSPEND_POFWARN()) {
    64a4:	f7ff ff9c 	bl	63e0 <suspend_pofwarn>
    64a8:	4604      	mov	r4, r0
    64aa:	b978      	cbnz	r0, 64cc <flash_nrf_erase+0x90>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    64ac:	4640      	mov	r0, r8
    64ae:	f000 ff95 	bl	73dc <nrfx_nvmc_page_erase>
	if (pofcon_enabled) {
    64b2:	783b      	ldrb	r3, [r7, #0]
    64b4:	b10b      	cbz	r3, 64ba <flash_nrf_erase+0x7e>
    64b6:	f7ff ff7d 	bl	63b4 <restore_pofwarn.part.0>
	} while (e_ctx->len > 0);
    64ba:	1bad      	subs	r5, r5, r6
    64bc:	44b0      	add	r8, r6
    64be:	d1f1      	bne.n	64a4 <flash_nrf_erase+0x68>
	z_impl_k_sem_give(sem);
    64c0:	480c      	ldr	r0, [pc, #48]	; (64f4 <flash_nrf_erase+0xb8>)
    64c2:	f002 f811 	bl	84e8 <z_impl_k_sem_give>
}
    64c6:	4620      	mov	r0, r4
    64c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ECANCELED;
    64cc:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    64d0:	e7f6      	b.n	64c0 <flash_nrf_erase+0x84>
    64d2:	4a05      	ldr	r2, [pc, #20]	; (64e8 <flash_nrf_erase+0xac>)
    64d4:	4b05      	ldr	r3, [pc, #20]	; (64ec <flash_nrf_erase+0xb0>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    64d6:	4809      	ldr	r0, [pc, #36]	; (64fc <flash_nrf_erase+0xc0>)
    64d8:	1a9b      	subs	r3, r3, r2
    64da:	08db      	lsrs	r3, r3, #3
    64dc:	019b      	lsls	r3, r3, #6
    64de:	f043 0301 	orr.w	r3, r3, #1
    64e2:	462a      	mov	r2, r5
    64e4:	4631      	mov	r1, r6
    64e6:	e7cb      	b.n	6480 <flash_nrf_erase+0x44>
    64e8:	0000bee4 	.word	0x0000bee4
    64ec:	0000beec 	.word	0x0000beec
    64f0:	0000d6bc 	.word	0x0000d6bc
    64f4:	200027f0 	.word	0x200027f0
    64f8:	20002f79 	.word	0x20002f79
    64fc:	0000d69f 	.word	0x0000d69f

00006500 <flash_nrf_write>:
{
    6500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6504:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    6506:	4630      	mov	r0, r6
    6508:	4619      	mov	r1, r3
{
    650a:	4617      	mov	r7, r2
    650c:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    650e:	f004 fdfb 	bl	b108 <is_regular_addr_valid>
    6512:	b980      	cbnz	r0, 6536 <flash_nrf_write+0x36>
    6514:	4a26      	ldr	r2, [pc, #152]	; (65b0 <flash_nrf_write+0xb0>)
    6516:	4b27      	ldr	r3, [pc, #156]	; (65b4 <flash_nrf_write+0xb4>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    6518:	4827      	ldr	r0, [pc, #156]	; (65b8 <flash_nrf_write+0xb8>)
    651a:	1a9b      	subs	r3, r3, r2
    651c:	08db      	lsrs	r3, r3, #3
    651e:	019b      	lsls	r3, r3, #6
    6520:	f043 0301 	orr.w	r3, r3, #1
    6524:	4622      	mov	r2, r4
    6526:	4631      	mov	r1, r6
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    6528:	f003 fc15 	bl	9d56 <log_2>
		return -EINVAL;
    652c:	f06f 0415 	mvn.w	r4, #21
}
    6530:	4620      	mov	r0, r4
    6532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (data & 0x3) ? false : true;
    6536:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    653a:	f015 0503 	ands.w	r5, r5, #3
    653e:	d00a      	beq.n	6556 <flash_nrf_write+0x56>
    6540:	4a1b      	ldr	r2, [pc, #108]	; (65b0 <flash_nrf_write+0xb0>)
    6542:	4b1c      	ldr	r3, [pc, #112]	; (65b4 <flash_nrf_write+0xb4>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    6544:	481d      	ldr	r0, [pc, #116]	; (65bc <flash_nrf_write+0xbc>)
    6546:	1a9b      	subs	r3, r3, r2
    6548:	08db      	lsrs	r3, r3, #3
    654a:	019b      	lsls	r3, r3, #6
    654c:	f043 0301 	orr.w	r3, r3, #1
    6550:	4622      	mov	r2, r4
    6552:	4631      	mov	r1, r6
    6554:	e7e8      	b.n	6528 <flash_nrf_write+0x28>
	if (!len) {
    6556:	2c00      	cmp	r4, #0
    6558:	d0ea      	beq.n	6530 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
    655a:	4819      	ldr	r0, [pc, #100]	; (65c0 <flash_nrf_write+0xc0>)
	if (pofcon_enabled) {
    655c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 65c4 <flash_nrf_write+0xc4>
    6560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6568:	f001 ffde 	bl	8528 <z_impl_k_sem_take>
static int write_op(void *context)
    656c:	f024 0403 	bic.w	r4, r4, #3
	while (w_ctx->len >= sizeof(uint32_t)) {
    6570:	42ac      	cmp	r4, r5
    6572:	eb05 0806 	add.w	r8, r5, r6
    6576:	d109      	bne.n	658c <flash_nrf_write+0x8c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    6578:	4a13      	ldr	r2, [pc, #76]	; (65c8 <flash_nrf_write+0xc8>)
    657a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    657e:	07db      	lsls	r3, r3, #31
    6580:	d5fb      	bpl.n	657a <flash_nrf_write+0x7a>
	return FLASH_OP_DONE;
    6582:	2400      	movs	r4, #0
	z_impl_k_sem_give(sem);
    6584:	480e      	ldr	r0, [pc, #56]	; (65c0 <flash_nrf_write+0xc0>)
    6586:	f001 ffaf 	bl	84e8 <z_impl_k_sem_give>
}
    658a:	e7d1      	b.n	6530 <flash_nrf_write+0x30>
		if (SUSPEND_POFWARN()) {
    658c:	f7ff ff28 	bl	63e0 <suspend_pofwarn>
    6590:	b950      	cbnz	r0, 65a8 <flash_nrf_write+0xa8>
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    6592:	5979      	ldr	r1, [r7, r5]
    6594:	4640      	mov	r0, r8
    6596:	f000 ff41 	bl	741c <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
    659a:	f899 3000 	ldrb.w	r3, [r9]
    659e:	b10b      	cbz	r3, 65a4 <flash_nrf_write+0xa4>
    65a0:	f7ff ff08 	bl	63b4 <restore_pofwarn.part.0>
	w_ctx->len -= shift;
    65a4:	3504      	adds	r5, #4
}
    65a6:	e7e3      	b.n	6570 <flash_nrf_write+0x70>
			return -ECANCELED;
    65a8:	f06f 048b 	mvn.w	r4, #139	; 0x8b
    65ac:	e7ea      	b.n	6584 <flash_nrf_write+0x84>
    65ae:	bf00      	nop
    65b0:	0000bee4 	.word	0x0000bee4
    65b4:	0000beec 	.word	0x0000beec
    65b8:	0000d69f 	.word	0x0000d69f
    65bc:	0000d6db 	.word	0x0000d6db
    65c0:	200027f0 	.word	0x200027f0
    65c4:	20002f79 	.word	0x20002f79
    65c8:	4001e000 	.word	0x4001e000

000065cc <event_txdrdy_check>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    65cc:	4b05      	ldr	r3, [pc, #20]	; (65e4 <event_txdrdy_check+0x18>)
    65ce:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
    65d2:	b92b      	cbnz	r3, 65e0 <event_txdrdy_check+0x14>
    65d4:	4b04      	ldr	r3, [pc, #16]	; (65e8 <event_txdrdy_check+0x1c>)
    65d6:	7818      	ldrb	r0, [r3, #0]
    65d8:	3800      	subs	r0, #0
    65da:	bf18      	it	ne
    65dc:	2001      	movne	r0, #1
    65de:	4770      	bx	lr
    65e0:	2001      	movs	r0, #1
#endif
	       );
}
    65e2:	4770      	bx	lr
    65e4:	40002000 	.word	0x40002000
    65e8:	20002f7b 	.word	0x20002f7b

000065ec <uart_nrfx_poll_in>:
    65ec:	4b07      	ldr	r3, [pc, #28]	; (660c <uart_nrfx_poll_in+0x20>)
    65ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    65f2:	b142      	cbz	r2, 6606 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65f4:	2000      	movs	r0, #0
    65f6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    65fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    65fe:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    6602:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    6604:	4770      	bx	lr
		return -1;
    6606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    660a:	4770      	bx	lr
    660c:	40002000 	.word	0x40002000

00006610 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6610:	4b02      	ldr	r3, [pc, #8]	; (661c <uart_nrfx_err_check+0xc>)
    6612:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6616:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    661a:	4770      	bx	lr
    661c:	40002000 	.word	0x40002000

00006620 <uart_nrfx_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrfx_fifo_read(const struct device *dev,
			       uint8_t *rx_data,
			       const int size)
{
    6620:	b570      	push	{r4, r5, r6, lr}
	uint8_t num_rx = 0U;

	while ((size - num_rx > 0) &&
    6622:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6624:	4c09      	ldr	r4, [pc, #36]	; (664c <uart_nrfx_fifo_read+0x2c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6626:	461e      	mov	r6, r3
    6628:	b2d8      	uxtb	r0, r3
    662a:	1a15      	subs	r5, r2, r0
    662c:	2d00      	cmp	r5, #0
    662e:	dd03      	ble.n	6638 <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6630:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    6634:	3301      	adds	r3, #1
    6636:	b905      	cbnz	r5, 663a <uart_nrfx_fifo_read+0x1a>
		/* Receive a character */
		rx_data[num_rx++] = (uint8_t)nrf_uart_rxd_get(uart0_addr);
	}

	return num_rx;
}
    6638:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    663a:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
    663e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    return p_reg->RXD;
    6642:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    6646:	540d      	strb	r5, [r1, r0]
    6648:	e7ee      	b.n	6628 <uart_nrfx_fifo_read+0x8>
    664a:	bf00      	nop
    664c:	40002000 	.word	0x40002000

00006650 <uart_nrfx_irq_tx_disable>:

/** Interrupt driven transfer disabling function */
static void uart_nrfx_irq_tx_disable(const struct device *dev)
{
	/* Disable TX interrupt in uart_nrfx_isr() when transmission is done. */
	disable_tx_irq = true;
    6650:	4b01      	ldr	r3, [pc, #4]	; (6658 <uart_nrfx_irq_tx_disable+0x8>)
    6652:	2201      	movs	r2, #1
    6654:	701a      	strb	r2, [r3, #0]
}
    6656:	4770      	bx	lr
    6658:	20002f7a 	.word	0x20002f7a

0000665c <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    665c:	4b02      	ldr	r3, [pc, #8]	; (6668 <uart_nrfx_irq_rx_enable+0xc>)
    665e:	2204      	movs	r2, #4
    6660:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    6664:	4770      	bx	lr
    6666:	bf00      	nop
    6668:	40002000 	.word	0x40002000

0000666c <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    666c:	4b02      	ldr	r3, [pc, #8]	; (6678 <uart_nrfx_irq_rx_disable+0xc>)
    666e:	2204      	movs	r2, #4
    6670:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
    6674:	4770      	bx	lr
    6676:	bf00      	nop
    6678:	40002000 	.word	0x40002000

0000667c <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    667c:	4b03      	ldr	r3, [pc, #12]	; (668c <uart_nrfx_irq_rx_ready+0x10>)
    667e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(const struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
    6682:	3800      	subs	r0, #0
    6684:	bf18      	it	ne
    6686:	2001      	movne	r0, #1
    6688:	4770      	bx	lr
    668a:	bf00      	nop
    668c:	40002000 	.word	0x40002000

00006690 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    6690:	4b02      	ldr	r3, [pc, #8]	; (669c <uart_nrfx_irq_err_enable+0xc>)
    6692:	f44f 7200 	mov.w	r2, #512	; 0x200
    6696:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(const struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    669a:	4770      	bx	lr
    669c:	40002000 	.word	0x40002000

000066a0 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    66a0:	4b02      	ldr	r3, [pc, #8]	; (66ac <uart_nrfx_irq_err_disable+0xc>)
    66a2:	f44f 7200 	mov.w	r2, #512	; 0x200
    66a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(const struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
    66aa:	4770      	bx	lr
    66ac:	40002000 	.word	0x40002000

000066b0 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(const struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
    66b0:	4b02      	ldr	r3, [pc, #8]	; (66bc <uart_nrfx_irq_callback_set+0xc>)
    66b2:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
    66b4:	4b02      	ldr	r3, [pc, #8]	; (66c0 <uart_nrfx_irq_callback_set+0x10>)
    66b6:	601a      	str	r2, [r3, #0]
}
    66b8:	4770      	bx	lr
    66ba:	bf00      	nop
    66bc:	20002804 	.word	0x20002804
    66c0:	20002808 	.word	0x20002808

000066c4 <uart_nrfx_irq_tx_enable>:
{
    66c4:	b508      	push	{r3, lr}
	disable_tx_irq = false;
    66c6:	4b0f      	ldr	r3, [pc, #60]	; (6704 <uart_nrfx_irq_tx_enable+0x40>)
    66c8:	2200      	movs	r2, #0
    66ca:	701a      	strb	r2, [r3, #0]
	device_busy_set(dev);
    66cc:	f005 f8df 	bl	b88e <device_busy_set>
    p_reg->TXD = txd;
}

NRF_STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66d0:	4b0d      	ldr	r3, [pc, #52]	; (6708 <uart_nrfx_irq_tx_enable+0x44>)
    66d2:	2201      	movs	r2, #1
    66d4:	609a      	str	r2, [r3, #8]
    p_reg->INTENSET = mask;
    66d6:	2280      	movs	r2, #128	; 0x80
    66d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	__asm__ volatile(
    66dc:	f04f 0220 	mov.w	r2, #32
    66e0:	f3ef 8311 	mrs	r3, BASEPRI
    66e4:	f382 8811 	msr	BASEPRI, r2
    66e8:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
    66ec:	4a07      	ldr	r2, [pc, #28]	; (670c <uart_nrfx_irq_tx_enable+0x48>)
    66ee:	7812      	ldrb	r2, [r2, #0]
    66f0:	b11a      	cbz	r2, 66fa <uart_nrfx_irq_tx_enable+0x36>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66f2:	4a07      	ldr	r2, [pc, #28]	; (6710 <uart_nrfx_irq_tx_enable+0x4c>)
    66f4:	2104      	movs	r1, #4
    66f6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
    66fa:	f383 8811 	msr	BASEPRI, r3
    66fe:	f3bf 8f6f 	isb	sy
}
    6702:	bd08      	pop	{r3, pc}
    6704:	20002f7a 	.word	0x20002f7a
    6708:	40002000 	.word	0x40002000
    670c:	20002f7b 	.word	0x20002f7b
    6710:	e000e100 	.word	0xe000e100

00006714 <uart_nrfx_irq_tx_ready_complete>:
{
    6714:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
    6716:	4b07      	ldr	r3, [pc, #28]	; (6734 <uart_nrfx_irq_tx_ready_complete+0x20>)
    6718:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       !disable_tx_irq &&
    671c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    6720:	d004      	beq.n	672c <uart_nrfx_irq_tx_ready_complete+0x18>
    6722:	4b05      	ldr	r3, [pc, #20]	; (6738 <uart_nrfx_irq_tx_ready_complete+0x24>)
    6724:	781b      	ldrb	r3, [r3, #0]
					 NRF_UART_INT_MASK_TXDRDY) &&
    6726:	b913      	cbnz	r3, 672e <uart_nrfx_irq_tx_ready_complete+0x1a>
	       event_txdrdy_check();
    6728:	f7ff ff50 	bl	65cc <event_txdrdy_check>
}
    672c:	bd08      	pop	{r3, pc}
	       !disable_tx_irq &&
    672e:	2000      	movs	r0, #0
    6730:	e7fc      	b.n	672c <uart_nrfx_irq_tx_ready_complete+0x18>
    6732:	bf00      	nop
    6734:	40002000 	.word	0x40002000
    6738:	20002f7a 	.word	0x20002f7a

0000673c <uart_nrfx_irq_is_pending>:
    673c:	4a0b      	ldr	r2, [pc, #44]	; (676c <uart_nrfx_irq_is_pending+0x30>)
{
    673e:	b508      	push	{r3, lr}
    6740:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
		||
    6744:	061b      	lsls	r3, r3, #24
    6746:	d405      	bmi.n	6754 <uart_nrfx_irq_is_pending+0x18>
    6748:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
    674c:	f010 0004 	ands.w	r0, r0, #4
    6750:	d106      	bne.n	6760 <uart_nrfx_irq_is_pending+0x24>
}
    6752:	bd08      	pop	{r3, pc}
		 uart_nrfx_irq_tx_ready_complete(dev))
    6754:	f7ff ffde 	bl	6714 <uart_nrfx_irq_tx_ready_complete>
					   NRF_UART_INT_MASK_TXDRDY) &&
    6758:	2800      	cmp	r0, #0
    675a:	d0f5      	beq.n	6748 <uart_nrfx_irq_is_pending+0xc>
		||
    675c:	2001      	movs	r0, #1
    675e:	e7f8      	b.n	6752 <uart_nrfx_irq_is_pending+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6760:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
					   NRF_UART_INT_MASK_RXDRDY) &&
    6764:	3800      	subs	r0, #0
    6766:	bf18      	it	ne
    6768:	2001      	movne	r0, #1
    676a:	e7f2      	b.n	6752 <uart_nrfx_irq_is_pending+0x16>
    676c:	40002000 	.word	0x40002000

00006770 <uart_nrfx_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
static void uart_nrfx_isr(const struct device *dev)
{
    6770:	b510      	push	{r4, lr}
	if (disable_tx_irq &&
    6772:	4c12      	ldr	r4, [pc, #72]	; (67bc <uart_nrfx_isr+0x4c>)
    6774:	4b12      	ldr	r3, [pc, #72]	; (67c0 <uart_nrfx_isr+0x50>)
    6776:	7821      	ldrb	r1, [r4, #0]
{
    6778:	4602      	mov	r2, r0
	if (disable_tx_irq &&
    677a:	b161      	cbz	r1, 6796 <uart_nrfx_isr+0x26>
    677c:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
    6780:	b149      	cbz	r1, 6796 <uart_nrfx_isr+0x26>
    p_reg->INTENCLR = mask;
    6782:	2280      	movs	r2, #128	; 0x80
    6784:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6788:	2201      	movs	r2, #1
    678a:	60da      	str	r2, [r3, #12]
		nrf_uart_task_trigger(uart0_addr, NRF_UART_TASK_STOPTX);

		/* The transaction is over. It is okay to enter the deep sleep
		 * mode if needed.
		 */
		device_busy_clear(dev);
    678c:	f005 f880 	bl	b890 <device_busy_clear>

		disable_tx_irq = false;
    6790:	2300      	movs	r3, #0
    6792:	7023      	strb	r3, [r4, #0]
	}

	if (irq_callback) {
		irq_callback(dev, irq_cb_data);
	}
}
    6794:	bd10      	pop	{r4, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6796:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
    679a:	b121      	cbz	r1, 67a6 <uart_nrfx_isr+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    679c:	2100      	movs	r1, #0
    679e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    67a2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (irq_callback) {
    67a6:	4b07      	ldr	r3, [pc, #28]	; (67c4 <uart_nrfx_isr+0x54>)
    67a8:	681b      	ldr	r3, [r3, #0]
    67aa:	2b00      	cmp	r3, #0
    67ac:	d0f2      	beq.n	6794 <uart_nrfx_isr+0x24>
		irq_callback(dev, irq_cb_data);
    67ae:	4906      	ldr	r1, [pc, #24]	; (67c8 <uart_nrfx_isr+0x58>)
}
    67b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_callback(dev, irq_cb_data);
    67b4:	6809      	ldr	r1, [r1, #0]
    67b6:	4610      	mov	r0, r2
    67b8:	4718      	bx	r3
    67ba:	bf00      	nop
    67bc:	20002f7a 	.word	0x20002f7a
    67c0:	40002000 	.word	0x40002000
    67c4:	20002804 	.word	0x20002804
    67c8:	20002808 	.word	0x20002808

000067cc <uart_nrfx_configure>:
{
    67cc:	b570      	push	{r4, r5, r6, lr}
	switch (cfg->stop_bits) {
    67ce:	794b      	ldrb	r3, [r1, #5]
    67d0:	2b01      	cmp	r3, #1
    67d2:	d024      	beq.n	681e <uart_nrfx_configure+0x52>
    67d4:	2b03      	cmp	r3, #3
    67d6:	d11f      	bne.n	6818 <uart_nrfx_configure+0x4c>
		uart_cfg.stop = NRF_UART_STOP_TWO;
    67d8:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    67da:	798b      	ldrb	r3, [r1, #6]
    67dc:	2b03      	cmp	r3, #3
    67de:	d11b      	bne.n	6818 <uart_nrfx_configure+0x4c>
	switch (cfg->flow_ctrl) {
    67e0:	79cc      	ldrb	r4, [r1, #7]
    67e2:	b10c      	cbz	r4, 67e8 <uart_nrfx_configure+0x1c>
    67e4:	2c01      	cmp	r4, #1
    67e6:	d117      	bne.n	6818 <uart_nrfx_configure+0x4c>
	switch (cfg->parity) {
    67e8:	790a      	ldrb	r2, [r1, #4]
    67ea:	b112      	cbz	r2, 67f2 <uart_nrfx_configure+0x26>
    67ec:	2a02      	cmp	r2, #2
    67ee:	d113      	bne.n	6818 <uart_nrfx_configure+0x4c>
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    67f0:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    67f2:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    67f4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    67f8:	d062      	beq.n	68c0 <uart_nrfx_configure+0xf4>
    67fa:	d82d      	bhi.n	6858 <uart_nrfx_configure+0x8c>
    67fc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    6800:	d060      	beq.n	68c4 <uart_nrfx_configure+0xf8>
    6802:	d816      	bhi.n	6832 <uart_nrfx_configure+0x66>
    6804:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6808:	d05e      	beq.n	68c8 <uart_nrfx_configure+0xfc>
    680a:	d80a      	bhi.n	6822 <uart_nrfx_configure+0x56>
    680c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    6810:	d05d      	beq.n	68ce <uart_nrfx_configure+0x102>
    6812:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    6816:	d05d      	beq.n	68d4 <uart_nrfx_configure+0x108>
    6818:	f06f 0085 	mvn.w	r0, #133	; 0x85
    681c:	e04f      	b.n	68be <uart_nrfx_configure+0xf2>
	switch (cfg->stop_bits) {
    681e:	2600      	movs	r6, #0
    6820:	e7db      	b.n	67da <uart_nrfx_configure+0xe>
	switch (baudrate) {
    6822:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    6826:	d058      	beq.n	68da <uart_nrfx_configure+0x10e>
    6828:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    682c:	d1f4      	bne.n	6818 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    682e:	4b35      	ldr	r3, [pc, #212]	; (6904 <uart_nrfx_configure+0x138>)
    6830:	e039      	b.n	68a6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    6832:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    6836:	d053      	beq.n	68e0 <uart_nrfx_configure+0x114>
    6838:	d807      	bhi.n	684a <uart_nrfx_configure+0x7e>
    683a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    683e:	d051      	beq.n	68e4 <uart_nrfx_configure+0x118>
    6840:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    6844:	d1e8      	bne.n	6818 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    6846:	4b30      	ldr	r3, [pc, #192]	; (6908 <uart_nrfx_configure+0x13c>)
    6848:	e02d      	b.n	68a6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    684a:	f647 2512 	movw	r5, #31250	; 0x7a12
    684e:	42ab      	cmp	r3, r5
    6850:	d1e2      	bne.n	6818 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    6852:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    6856:	e026      	b.n	68a6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    6858:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    685c:	d045      	beq.n	68ea <uart_nrfx_configure+0x11e>
    685e:	d811      	bhi.n	6884 <uart_nrfx_configure+0xb8>
    6860:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    6864:	d043      	beq.n	68ee <uart_nrfx_configure+0x122>
    6866:	d808      	bhi.n	687a <uart_nrfx_configure+0xae>
    6868:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    686c:	42ab      	cmp	r3, r5
    686e:	d040      	beq.n	68f2 <uart_nrfx_configure+0x126>
    6870:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    6874:	d1d0      	bne.n	6818 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    6876:	4b25      	ldr	r3, [pc, #148]	; (690c <uart_nrfx_configure+0x140>)
    6878:	e015      	b.n	68a6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    687a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    687e:	d1cb      	bne.n	6818 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    6880:	4b23      	ldr	r3, [pc, #140]	; (6910 <uart_nrfx_configure+0x144>)
    6882:	e010      	b.n	68a6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    6884:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    6888:	d036      	beq.n	68f8 <uart_nrfx_configure+0x12c>
    688a:	d807      	bhi.n	689c <uart_nrfx_configure+0xd0>
    688c:	4d21      	ldr	r5, [pc, #132]	; (6914 <uart_nrfx_configure+0x148>)
    688e:	42ab      	cmp	r3, r5
    6890:	d034      	beq.n	68fc <uart_nrfx_configure+0x130>
    6892:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    6896:	d1bf      	bne.n	6818 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    6898:	4b1f      	ldr	r3, [pc, #124]	; (6918 <uart_nrfx_configure+0x14c>)
    689a:	e004      	b.n	68a6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    689c:	4d1f      	ldr	r5, [pc, #124]	; (691c <uart_nrfx_configure+0x150>)
    689e:	42ab      	cmp	r3, r5
    68a0:	d1ba      	bne.n	6818 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    68a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    68a6:	4d1e      	ldr	r5, [pc, #120]	; (6920 <uart_nrfx_configure+0x154>)
                    | (uint32_t)p_cfg->hwfc;
    68a8:	4334      	orrs	r4, r6
    68aa:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    68ac:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    68b0:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
    68b4:	6903      	ldr	r3, [r0, #16]
    68b6:	c903      	ldmia	r1, {r0, r1}
    68b8:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    68bc:	2000      	movs	r0, #0
}
    68be:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    68c0:	4b18      	ldr	r3, [pc, #96]	; (6924 <uart_nrfx_configure+0x158>)
    68c2:	e7f0      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    68c4:	4b18      	ldr	r3, [pc, #96]	; (6928 <uart_nrfx_configure+0x15c>)
    68c6:	e7ee      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    68c8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    68cc:	e7eb      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    68ce:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    68d2:	e7e8      	b.n	68a6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    68d4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    68d8:	e7e5      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    68da:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    68de:	e7e2      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    68e0:	4b12      	ldr	r3, [pc, #72]	; (692c <uart_nrfx_configure+0x160>)
    68e2:	e7e0      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    68e4:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    68e8:	e7dd      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    68ea:	4b11      	ldr	r3, [pc, #68]	; (6930 <uart_nrfx_configure+0x164>)
    68ec:	e7db      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    68ee:	4b11      	ldr	r3, [pc, #68]	; (6934 <uart_nrfx_configure+0x168>)
    68f0:	e7d9      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    68f2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    68f6:	e7d6      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    68f8:	4b0f      	ldr	r3, [pc, #60]	; (6938 <uart_nrfx_configure+0x16c>)
    68fa:	e7d4      	b.n	68a6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    68fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6900:	e7d1      	b.n	68a6 <uart_nrfx_configure+0xda>
    6902:	bf00      	nop
    6904:	0013b000 	.word	0x0013b000
    6908:	004ea000 	.word	0x004ea000
    690c:	00ebf000 	.word	0x00ebf000
    6910:	01d7e000 	.word	0x01d7e000
    6914:	0003d090 	.word	0x0003d090
    6918:	075f7000 	.word	0x075f7000
    691c:	000f4240 	.word	0x000f4240
    6920:	40002000 	.word	0x40002000
    6924:	009d5000 	.word	0x009d5000
    6928:	00275000 	.word	0x00275000
    692c:	0075f000 	.word	0x0075f000
    6930:	03afb000 	.word	0x03afb000
    6934:	013a9000 	.word	0x013a9000
    6938:	0ebed000 	.word	0x0ebed000

0000693c <uart_nrfx_poll_out>:
{
    693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    693e:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    6940:	f004 fff4 	bl	b92c <k_is_in_isr>
    6944:	4d1b      	ldr	r5, [pc, #108]	; (69b4 <uart_nrfx_poll_out+0x78>)
    6946:	bb90      	cbnz	r0, 69ae <uart_nrfx_poll_out+0x72>
    6948:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    694a:	2701      	movs	r7, #1
    694c:	f3bf 8f5b 	dmb	ish
    6950:	e855 3f00 	ldrex	r3, [r5]
    6954:	2b00      	cmp	r3, #0
    6956:	d103      	bne.n	6960 <uart_nrfx_poll_out+0x24>
    6958:	e845 7200 	strex	r2, r7, [r5]
    695c:	2a00      	cmp	r2, #0
    695e:	d1f7      	bne.n	6950 <uart_nrfx_poll_out+0x14>
    6960:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    6964:	d007      	beq.n	6976 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    6966:	2021      	movs	r0, #33	; 0x21
    6968:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
    696a:	3c01      	subs	r4, #1
    696c:	f002 f8da 	bl	8b24 <z_impl_k_sleep>
    6970:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    6974:	d1ea      	bne.n	694c <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6976:	4b10      	ldr	r3, [pc, #64]	; (69b8 <uart_nrfx_poll_out+0x7c>)
    6978:	2200      	movs	r2, #0
    697a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    697e:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
	uart_sw_event_txdrdy = 0U;
    6982:	490e      	ldr	r1, [pc, #56]	; (69bc <uart_nrfx_poll_out+0x80>)
    6984:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6986:	2201      	movs	r2, #1
    6988:	609a      	str	r2, [r3, #8]
    p_reg->TXD = txd;
    698a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    698e:	f8c3 651c 	str.w	r6, [r3, #1308]	; 0x51c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    6992:	f7ff fe1b 	bl	65cc <event_txdrdy_check>
    6996:	b920      	cbnz	r0, 69a2 <uart_nrfx_poll_out+0x66>
    6998:	2001      	movs	r0, #1
    699a:	f004 fe6d 	bl	b678 <nrfx_busy_wait>
    699e:	3c01      	subs	r4, #1
    69a0:	d1f7      	bne.n	6992 <uart_nrfx_poll_out+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    69a2:	4b05      	ldr	r3, [pc, #20]	; (69b8 <uart_nrfx_poll_out+0x7c>)
    69a4:	2201      	movs	r2, #1
    69a6:	60da      	str	r2, [r3, #12]
	*lock = 0;
    69a8:	2300      	movs	r3, #0
    69aa:	602b      	str	r3, [r5, #0]
}
    69ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    69ae:	2301      	movs	r3, #1
    69b0:	602b      	str	r3, [r5, #0]
    69b2:	e7e0      	b.n	6976 <uart_nrfx_poll_out+0x3a>
    69b4:	2000280c 	.word	0x2000280c
    69b8:	40002000 	.word	0x40002000
    69bc:	20002f7b 	.word	0x20002f7b

000069c0 <uart_nrfx_fifo_fill>:
{
    69c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while ((len - num_tx > 0) &&
    69c4:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    69c6:	4e0c      	ldr	r6, [pc, #48]	; (69f8 <uart_nrfx_fifo_fill+0x38>)
	uart_sw_event_txdrdy = 0U;
    69c8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 69fc <uart_nrfx_fifo_fill+0x3c>
    69cc:	4627      	mov	r7, r4
	while ((len - num_tx > 0) &&
    69ce:	b2e5      	uxtb	r5, r4
    69d0:	1b53      	subs	r3, r2, r5
    69d2:	2b00      	cmp	r3, #0
    69d4:	dd03      	ble.n	69de <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
    69d6:	f7ff fdf9 	bl	65cc <event_txdrdy_check>
	while ((len - num_tx > 0) &&
    69da:	3401      	adds	r4, #1
    69dc:	b910      	cbnz	r0, 69e4 <uart_nrfx_fifo_fill+0x24>
}
    69de:	4628      	mov	r0, r5
    69e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69e4:	f8c6 711c 	str.w	r7, [r6, #284]	; 0x11c
    69e8:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
    p_reg->TXD = txd;
    69ec:	5d4b      	ldrb	r3, [r1, r5]
	uart_sw_event_txdrdy = 0U;
    69ee:	f888 7000 	strb.w	r7, [r8]
    69f2:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
}
    69f6:	e7ea      	b.n	69ce <uart_nrfx_fifo_fill+0xe>
    69f8:	40002000 	.word	0x40002000
    69fc:	20002f7b 	.word	0x20002f7b

00006a00 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    6a00:	b538      	push	{r3, r4, r5, lr}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    6a02:	4c1d      	ldr	r4, [pc, #116]	; (6a78 <uart_nrfx_init+0x78>)
    6a04:	2300      	movs	r3, #0
    6a06:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    6a0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6a0e:	2240      	movs	r2, #64	; 0x40
    6a10:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    6a14:	2103      	movs	r1, #3
    6a16:	220c      	movs	r2, #12
    p_reg->PSEL.RXD = pselrxd;
    6a18:	2508      	movs	r5, #8
    6a1a:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    6a1e:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    6a22:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
    6a26:	2506      	movs	r5, #6
    6a28:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    6a2c:	2520      	movs	r5, #32
    6a2e:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    6a32:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    6a36:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSEL.RTS = pselrts;
    6a3a:	2305      	movs	r3, #5
    6a3c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    6a40:	2307      	movs	r3, #7
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    6a42:	6901      	ldr	r1, [r0, #16]
    6a44:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    6a48:	f7ff fec0 	bl	67cc <uart_nrfx_configure>
	if (err) {
    6a4c:	4605      	mov	r5, r0
    6a4e:	b988      	cbnz	r0, 6a74 <uart_nrfx_init+0x74>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    6a50:	2304      	movs	r3, #4
    6a52:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a56:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    6a5a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
    6a5e:	4b07      	ldr	r3, [pc, #28]	; (6a7c <uart_nrfx_init+0x7c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a60:	2101      	movs	r1, #1
    6a62:	6021      	str	r1, [r4, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(IRQN,
    6a64:	4602      	mov	r2, r0
    6a66:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
    6a68:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
    6a6a:	f7fd fb33 	bl	40d4 <z_arm_irq_priority_set>
		    IRQ_PRIO,
		    uart_nrfx_isr,
		    DEVICE_DT_GET(DT_DRV_INST(0)),
		    0);
	irq_enable(IRQN);
    6a6e:	2002      	movs	r0, #2
    6a70:	f7fd fafe 	bl	4070 <arch_irq_enable>
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    6a74:	4628      	mov	r0, r5
    6a76:	bd38      	pop	{r3, r4, r5, pc}
    6a78:	40002000 	.word	0x40002000
    6a7c:	20002f7b 	.word	0x20002f7b

00006a80 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6a80:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6a82:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6a86:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    6a88:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    6a8a:	6002      	str	r2, [r0, #0]
}
    6a8c:	4802      	ldr	r0, [pc, #8]	; (6a98 <nrf_gpio_pin_port_decode+0x18>)
    6a8e:	bf18      	it	ne
    6a90:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    6a94:	4770      	bx	lr
    6a96:	bf00      	nop
    6a98:	50000300 	.word	0x50000300

00006a9c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    6a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    6a9e:	794b      	ldrb	r3, [r1, #5]
    6aa0:	2b01      	cmp	r3, #1
    6aa2:	d02a      	beq.n	6afa <uarte_nrfx_configure+0x5e>
    6aa4:	2b03      	cmp	r3, #3
    6aa6:	d125      	bne.n	6af4 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    6aa8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6aaa:	798b      	ldrb	r3, [r1, #6]
    6aac:	2b03      	cmp	r3, #3
    6aae:	d121      	bne.n	6af4 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    6ab0:	79cc      	ldrb	r4, [r1, #7]
    6ab2:	b12c      	cbz	r4, 6ac0 <uarte_nrfx_configure+0x24>
    6ab4:	2c01      	cmp	r4, #1
    6ab6:	d11d      	bne.n	6af4 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    6ab8:	6843      	ldr	r3, [r0, #4]
    6aba:	685b      	ldr	r3, [r3, #4]
    6abc:	079b      	lsls	r3, r3, #30
    6abe:	d019      	beq.n	6af4 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    6ac0:	790a      	ldrb	r2, [r1, #4]
    6ac2:	b112      	cbz	r2, 6aca <uarte_nrfx_configure+0x2e>
    6ac4:	2a02      	cmp	r2, #2
    6ac6:	d115      	bne.n	6af4 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    6ac8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    6aca:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    6acc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    6ace:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    6ad2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    6ad4:	d065      	beq.n	6ba2 <uarte_nrfx_configure+0x106>
    6ad6:	d82d      	bhi.n	6b34 <uarte_nrfx_configure+0x98>
    6ad8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    6adc:	d064      	beq.n	6ba8 <uarte_nrfx_configure+0x10c>
    6ade:	d816      	bhi.n	6b0e <uarte_nrfx_configure+0x72>
    6ae0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    6ae4:	d062      	beq.n	6bac <uarte_nrfx_configure+0x110>
    6ae6:	d80a      	bhi.n	6afe <uarte_nrfx_configure+0x62>
    6ae8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    6aec:	d061      	beq.n	6bb2 <uarte_nrfx_configure+0x116>
    6aee:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    6af2:	d061      	beq.n	6bb8 <uarte_nrfx_configure+0x11c>
    6af4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6af8:	e052      	b.n	6ba0 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    6afa:	2600      	movs	r6, #0
    6afc:	e7d5      	b.n	6aaa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    6afe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    6b02:	d05c      	beq.n	6bbe <uarte_nrfx_configure+0x122>
    6b04:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    6b08:	d1f4      	bne.n	6af4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    6b0a:	4b37      	ldr	r3, [pc, #220]	; (6be8 <uarte_nrfx_configure+0x14c>)
    6b0c:	e03c      	b.n	6b88 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    6b0e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    6b12:	d057      	beq.n	6bc4 <uarte_nrfx_configure+0x128>
    6b14:	d807      	bhi.n	6b26 <uarte_nrfx_configure+0x8a>
    6b16:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    6b1a:	d055      	beq.n	6bc8 <uarte_nrfx_configure+0x12c>
    6b1c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    6b20:	d1e8      	bne.n	6af4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    6b22:	4b32      	ldr	r3, [pc, #200]	; (6bec <uarte_nrfx_configure+0x150>)
    6b24:	e030      	b.n	6b88 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    6b26:	f647 2712 	movw	r7, #31250	; 0x7a12
    6b2a:	42bb      	cmp	r3, r7
    6b2c:	d1e2      	bne.n	6af4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    6b2e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    6b32:	e029      	b.n	6b88 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    6b34:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    6b38:	d048      	beq.n	6bcc <uarte_nrfx_configure+0x130>
    6b3a:	d813      	bhi.n	6b64 <uarte_nrfx_configure+0xc8>
    6b3c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    6b40:	d047      	beq.n	6bd2 <uarte_nrfx_configure+0x136>
    6b42:	d809      	bhi.n	6b58 <uarte_nrfx_configure+0xbc>
    6b44:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    6b48:	42bb      	cmp	r3, r7
    6b4a:	d044      	beq.n	6bd6 <uarte_nrfx_configure+0x13a>
    6b4c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    6b50:	d1d0      	bne.n	6af4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    6b52:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    6b56:	e017      	b.n	6b88 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    6b58:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    6b5c:	d1ca      	bne.n	6af4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    6b5e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    6b62:	e011      	b.n	6b88 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    6b64:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    6b68:	d038      	beq.n	6bdc <uarte_nrfx_configure+0x140>
    6b6a:	d808      	bhi.n	6b7e <uarte_nrfx_configure+0xe2>
    6b6c:	4f20      	ldr	r7, [pc, #128]	; (6bf0 <uarte_nrfx_configure+0x154>)
    6b6e:	42bb      	cmp	r3, r7
    6b70:	d037      	beq.n	6be2 <uarte_nrfx_configure+0x146>
    6b72:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    6b76:	d1bd      	bne.n	6af4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    6b78:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    6b7c:	e004      	b.n	6b88 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    6b7e:	4f1d      	ldr	r7, [pc, #116]	; (6bf4 <uarte_nrfx_configure+0x158>)
    6b80:	42bb      	cmp	r3, r7
    6b82:	d1b7      	bne.n	6af4 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    6b84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    6b88:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    6b8c:	6903      	ldr	r3, [r0, #16]
    6b8e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    6b90:	4334      	orrs	r4, r6
    6b92:	4322      	orrs	r2, r4
    6b94:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    6b96:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    6b9a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    6b9e:	2000      	movs	r0, #0
}
    6ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    6ba2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    6ba6:	e7ef      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    6ba8:	4b13      	ldr	r3, [pc, #76]	; (6bf8 <uarte_nrfx_configure+0x15c>)
    6baa:	e7ed      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    6bac:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    6bb0:	e7ea      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    6bb2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    6bb6:	e7e7      	b.n	6b88 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    6bb8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    6bbc:	e7e4      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    6bbe:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    6bc2:	e7e1      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    6bc4:	4b0d      	ldr	r3, [pc, #52]	; (6bfc <uarte_nrfx_configure+0x160>)
    6bc6:	e7df      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    6bc8:	4b0d      	ldr	r3, [pc, #52]	; (6c00 <uarte_nrfx_configure+0x164>)
    6bca:	e7dd      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    6bcc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    6bd0:	e7da      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    6bd2:	4b0c      	ldr	r3, [pc, #48]	; (6c04 <uarte_nrfx_configure+0x168>)
    6bd4:	e7d8      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    6bd6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    6bda:	e7d5      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    6bdc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    6be0:	e7d2      	b.n	6b88 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    6be2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6be6:	e7cf      	b.n	6b88 <uarte_nrfx_configure+0xec>
    6be8:	0013b000 	.word	0x0013b000
    6bec:	004ea000 	.word	0x004ea000
    6bf0:	0003d090 	.word	0x0003d090
    6bf4:	000f4240 	.word	0x000f4240
    6bf8:	00275000 	.word	0x00275000
    6bfc:	0075c000 	.word	0x0075c000
    6c00:	003af000 	.word	0x003af000
    6c04:	013a9000 	.word	0x013a9000

00006c08 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    6c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    6c0a:	6906      	ldr	r6, [r0, #16]
{
    6c0c:	4605      	mov	r5, r0
    6c0e:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6c10:	f004 fe8c 	bl	b92c <k_is_in_isr>
    6c14:	b910      	cbnz	r0, 6c1c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    6c16:	4b20      	ldr	r3, [pc, #128]	; (6c98 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    6c18:	781b      	ldrb	r3, [r3, #0]
    6c1a:	b983      	cbnz	r3, 6c3e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    6c1c:	f04f 0320 	mov.w	r3, #32
    6c20:	f3ef 8411 	mrs	r4, BASEPRI
    6c24:	f383 8811 	msr	BASEPRI, r3
    6c28:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    6c2c:	6868      	ldr	r0, [r5, #4]
    6c2e:	f004 fbb8 	bl	b3a2 <is_tx_ready.isra.0>
    6c32:	bb28      	cbnz	r0, 6c80 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    6c34:	f384 8811 	msr	BASEPRI, r4
    6c38:	f3bf 8f6f 	isb	sy
}
    6c3c:	e7ee      	b.n	6c1c <uarte_nrfx_poll_out+0x14>
{
    6c3e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    6c40:	6868      	ldr	r0, [r5, #4]
    6c42:	f004 fbae 	bl	b3a2 <is_tx_ready.isra.0>
    6c46:	b970      	cbnz	r0, 6c66 <uarte_nrfx_poll_out+0x5e>
    6c48:	2001      	movs	r0, #1
    6c4a:	f004 fd15 	bl	b678 <nrfx_busy_wait>
    6c4e:	3c01      	subs	r4, #1
    6c50:	d1f6      	bne.n	6c40 <uarte_nrfx_poll_out+0x38>
    6c52:	2100      	movs	r1, #0
    6c54:	2021      	movs	r0, #33	; 0x21
    6c56:	f001 ff65 	bl	8b24 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6c5a:	e7f0      	b.n	6c3e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    6c5c:	f384 8811 	msr	BASEPRI, r4
    6c60:	f3bf 8f6f 	isb	sy
}
    6c64:	e7f5      	b.n	6c52 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    6c66:	f04f 0320 	mov.w	r3, #32
    6c6a:	f3ef 8411 	mrs	r4, BASEPRI
    6c6e:	f383 8811 	msr	BASEPRI, r3
    6c72:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    6c76:	6868      	ldr	r0, [r5, #4]
    6c78:	f004 fb93 	bl	b3a2 <is_tx_ready.isra.0>
    6c7c:	2800      	cmp	r0, #0
    6c7e:	d0ed      	beq.n	6c5c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    6c80:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    6c82:	2201      	movs	r2, #1
	data->char_out = c;
    6c84:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    6c88:	6868      	ldr	r0, [r5, #4]
    6c8a:	f004 fb6f 	bl	b36c <tx_start.isra.0>
	__asm__ volatile(
    6c8e:	f384 8811 	msr	BASEPRI, r4
    6c92:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    6c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c98:	200033ac 	.word	0x200033ac

00006c9c <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6c9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6ca0:	2200      	movs	r2, #0
    6ca2:	4605      	mov	r5, r0
    6ca4:	2101      	movs	r1, #1
    6ca6:	2028      	movs	r0, #40	; 0x28
    6ca8:	f7fd fa14 	bl	40d4 <z_arm_irq_priority_set>
    6cac:	2028      	movs	r0, #40	; 0x28
    6cae:	f7fd f9df 	bl	4070 <arch_irq_enable>
	return config->uarte_regs;
    6cb2:	686b      	ldr	r3, [r5, #4]
	return dev->data;
    6cb4:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
    6cb6:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6cb8:	2300      	movs	r3, #0
    6cba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    6cbe:	270e      	movs	r7, #14
    6cc0:	6035      	str	r5, [r6, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6cc2:	a801      	add	r0, sp, #4
    6cc4:	9701      	str	r7, [sp, #4]
    6cc6:	f7ff fedb 	bl	6a80 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6cca:	9b01      	ldr	r3, [sp, #4]
    6ccc:	f04f 0801 	mov.w	r8, #1
    6cd0:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
    6cd4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6cd8:	a801      	add	r0, sp, #4
    6cda:	9701      	str	r7, [sp, #4]
    6cdc:	f7ff fed0 	bl	6a80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6ce0:	9b01      	ldr	r3, [sp, #4]
    6ce2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6ce6:	f04f 0903 	mov.w	r9, #3
    6cea:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6cee:	f04f 0a10 	mov.w	sl, #16
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6cf2:	a801      	add	r0, sp, #4
    6cf4:	f8cd a004 	str.w	sl, [sp, #4]
    6cf8:	f7ff fec2 	bl	6a80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6cfc:	9b01      	ldr	r3, [sp, #4]
    6cfe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6d02:	210c      	movs	r1, #12
    6d04:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    6d08:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6d0c:	a801      	add	r0, sp, #4
    6d0e:	270f      	movs	r7, #15
    p_reg->PSEL.RXD = pselrxd;
    6d10:	f8c4 a514 	str.w	sl, [r4, #1300]	; 0x514
    nrf_gpio_cfg(
    6d14:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6d16:	f7ff feb3 	bl	6a80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6d1a:	9b01      	ldr	r3, [sp, #4]
    6d1c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6d20:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
    6d24:	210d      	movs	r1, #13
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6d26:	a801      	add	r0, sp, #4
    6d28:	9101      	str	r1, [sp, #4]
    6d2a:	f7ff fea9 	bl	6a80 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6d2e:	9b01      	ldr	r3, [sp, #4]
    6d30:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
    6d34:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6d38:	a801      	add	r0, sp, #4
    6d3a:	9101      	str	r1, [sp, #4]
    6d3c:	f7ff fea0 	bl	6a80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6d40:	9b01      	ldr	r3, [sp, #4]
    6d42:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6d46:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    6d4a:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    6d4e:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.CTS = pselcts;
    6d50:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
    6d54:	3104      	adds	r1, #4
    6d56:	4628      	mov	r0, r5
    6d58:	f7ff fea0 	bl	6a9c <uarte_nrfx_configure>
	if (err) {
    6d5c:	4607      	mov	r7, r0
    6d5e:	b9b8      	cbnz	r0, 6d90 <uarte_1_init+0xf4>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    6d60:	686b      	ldr	r3, [r5, #4]
    6d62:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    6d64:	0719      	lsls	r1, r3, #28
    6d66:	d52a      	bpl.n	6dbe <uarte_1_init+0x122>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    6d68:	f106 0016 	add.w	r0, r6, #22
    6d6c:	f000 fb64 	bl	7438 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6d70:	4b27      	ldr	r3, [pc, #156]	; (6e10 <uarte_1_init+0x174>)
    6d72:	4298      	cmp	r0, r3
    6d74:	d010      	beq.n	6d98 <uarte_1_init+0xfc>
    6d76:	4b27      	ldr	r3, [pc, #156]	; (6e14 <uarte_1_init+0x178>)
    6d78:	4927      	ldr	r1, [pc, #156]	; (6e18 <uarte_1_init+0x17c>)
		LOG_ERR("Failed to allocate PPI Channel");
    6d7a:	4828      	ldr	r0, [pc, #160]	; (6e1c <uarte_1_init+0x180>)
    6d7c:	1ac9      	subs	r1, r1, r3
    6d7e:	fa21 f109 	lsr.w	r1, r1, r9
    6d82:	0189      	lsls	r1, r1, #6
    6d84:	ea41 0108 	orr.w	r1, r1, r8
    6d88:	f002 ffc4 	bl	9d14 <log_0>
		return -EIO;
    6d8c:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(1);
    6d90:	4638      	mov	r0, r7
    6d92:	b002      	add	sp, #8
    6d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    6d98:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6d9a:	00c3      	lsls	r3, r0, #3
    6d9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6da0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    6da4:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6da8:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6dac:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6db0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    6db4:	4a1a      	ldr	r2, [pc, #104]	; (6e20 <uarte_1_init+0x184>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    6db6:	fa08 f000 	lsl.w	r0, r8, r0
    6dba:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6dbe:	2308      	movs	r3, #8
    6dc0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dc4:	2300      	movs	r3, #0
    6dc6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    6dca:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    6dce:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6dd2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6dd6:	2301      	movs	r3, #1
    6dd8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ddc:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    6dde:	686b      	ldr	r3, [r5, #4]
    6de0:	685b      	ldr	r3, [r3, #4]
    6de2:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    6de4:	bf5c      	itt	pl
    6de6:	f44f 7280 	movpl.w	r2, #256	; 0x100
    6dea:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6dee:	06db      	lsls	r3, r3, #27
    6df0:	bf44      	itt	mi
    6df2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    6df6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    6dfa:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    6dfc:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6dfe:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6e02:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e06:	2301      	movs	r3, #1
    6e08:	60a3      	str	r3, [r4, #8]
    6e0a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(1);
    6e0c:	e7c0      	b.n	6d90 <uarte_1_init+0xf4>
    6e0e:	bf00      	nop
    6e10:	0bad0000 	.word	0x0bad0000
    6e14:	0000bee4 	.word	0x0000bee4
    6e18:	0000bf44 	.word	0x0000bf44
    6e1c:	0000d703 	.word	0x0000d703
    6e20:	4001f000 	.word	0x4001f000

00006e24 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    6e24:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    6e26:	4a05      	ldr	r2, [pc, #20]	; (6e3c <boot_write_magic+0x18>)
{
    6e28:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    6e2a:	3910      	subs	r1, #16
    6e2c:	2310      	movs	r3, #16
    6e2e:	f003 fb0a 	bl	a446 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    6e32:	3800      	subs	r0, #0
    6e34:	bf18      	it	ne
    6e36:	2001      	movne	r0, #1
    6e38:	bd08      	pop	{r3, pc}
    6e3a:	bf00      	nop
    6e3c:	0000c420 	.word	0x0000c420

00006e40 <boot_read_swap_state>:
{
    6e40:	b530      	push	{r4, r5, lr}
    6e42:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    6e44:	6881      	ldr	r1, [r0, #8]
{
    6e46:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    6e48:	2310      	movs	r3, #16
    6e4a:	aa02      	add	r2, sp, #8
    6e4c:	3910      	subs	r1, #16
{
    6e4e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    6e50:	f003 fadd 	bl	a40e <flash_area_read>
    if (rc < 0) {
    6e54:	2800      	cmp	r0, #0
    6e56:	da02      	bge.n	6e5e <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    6e58:	2001      	movs	r0, #1
}
    6e5a:	b007      	add	sp, #28
    6e5c:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
    6e5e:	2210      	movs	r2, #16
    6e60:	a902      	add	r1, sp, #8
    6e62:	4628      	mov	r0, r5
    6e64:	f004 fb56 	bl	b514 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    6e68:	b368      	cbz	r0, 6ec6 <boot_read_swap_state+0x86>
        state->magic = BOOT_MAGIC_UNSET;
    6e6a:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    6e6c:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6e6e:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    6e70:	2301      	movs	r3, #1
    6e72:	f10d 0207 	add.w	r2, sp, #7
    6e76:	3928      	subs	r1, #40	; 0x28
    6e78:	4628      	mov	r0, r5
    6e7a:	f003 fac8 	bl	a40e <flash_area_read>
    if (rc < 0) {
    6e7e:	2800      	cmp	r0, #0
    6e80:	dbea      	blt.n	6e58 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    6e82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e86:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    6e8a:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    6e8c:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    6e8e:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    6e90:	2201      	movs	r2, #1
    6e92:	f10d 0107 	add.w	r1, sp, #7
    6e96:	4628      	mov	r0, r5
    6e98:	f004 fb3c 	bl	b514 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    6e9c:	b910      	cbnz	r0, 6ea4 <boot_read_swap_state+0x64>
    6e9e:	7863      	ldrb	r3, [r4, #1]
    6ea0:	2b04      	cmp	r3, #4
    6ea2:	d903      	bls.n	6eac <boot_read_swap_state+0x6c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    6ea4:	2301      	movs	r3, #1
    6ea6:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    6ea8:	2300      	movs	r3, #0
    6eaa:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    6eac:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    6eae:	1ca1      	adds	r1, r4, #2
    6eb0:	3a20      	subs	r2, #32
    6eb2:	4628      	mov	r0, r5
    6eb4:	f004 fb56 	bl	b564 <boot_read_flag>
    if (rc) {
    6eb8:	2800      	cmp	r0, #0
    6eba:	d1cd      	bne.n	6e58 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    6ebc:	1ce1      	adds	r1, r4, #3
    6ebe:	4628      	mov	r0, r5
    6ec0:	f004 fba9 	bl	b616 <boot_read_image_ok>
    6ec4:	e7c9      	b.n	6e5a <boot_read_swap_state+0x1a>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    6ec6:	4905      	ldr	r1, [pc, #20]	; (6edc <boot_read_swap_state+0x9c>)
    6ec8:	2210      	movs	r2, #16
    6eca:	a802      	add	r0, sp, #8
    6ecc:	f003 fe7d 	bl	abca <memcmp>
        return BOOT_MAGIC_GOOD;
    6ed0:	2800      	cmp	r0, #0
    6ed2:	bf14      	ite	ne
    6ed4:	2302      	movne	r3, #2
    6ed6:	2301      	moveq	r3, #1
    6ed8:	e7c8      	b.n	6e6c <boot_read_swap_state+0x2c>
    6eda:	bf00      	nop
    6edc:	0000c420 	.word	0x0000c420

00006ee0 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    6ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ee4:	b085      	sub	sp, #20
    6ee6:	4606      	mov	r6, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6ee8:	4669      	mov	r1, sp
    6eea:	2004      	movs	r0, #4
    6eec:	f004 fb97 	bl	b61e <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    6ef0:	4605      	mov	r5, r0
    6ef2:	b118      	cbz	r0, 6efc <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    6ef4:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    6ef6:	b005      	add	sp, #20
    6ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6efc:	a902      	add	r1, sp, #8
    6efe:	2002      	movs	r0, #2
    6f00:	f004 fb8d 	bl	b61e <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    6f04:	2801      	cmp	r0, #1
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    6f06:	4604      	mov	r4, r0
    if (rc == BOOT_EFLASH) {
    6f08:	d144      	bne.n	6f94 <boot_swap_type_multi+0xb4>
    6f0a:	4b36      	ldr	r3, [pc, #216]	; (6fe4 <boot_swap_type_multi+0x104>)
    6f0c:	4a36      	ldr	r2, [pc, #216]	; (6fe8 <boot_swap_type_multi+0x108>)
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    6f0e:	4837      	ldr	r0, [pc, #220]	; (6fec <boot_swap_type_multi+0x10c>)
    6f10:	1ad2      	subs	r2, r2, r3
    6f12:	08d2      	lsrs	r2, r2, #3
    6f14:	0192      	lsls	r2, r2, #6
    6f16:	f042 0203 	orr.w	r2, r2, #3
    6f1a:	4631      	mov	r1, r6
    6f1c:	f002 ff07 	bl	9d2e <log_1>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    6f20:	2303      	movs	r3, #3
    6f22:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
    6f26:	f88d 4009 	strb.w	r4, [sp, #9]
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
    6f2a:	f88d 300a 	strb.w	r3, [sp, #10]
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    6f2e:	f88d 300b 	strb.w	r3, [sp, #11]
        secondary_slot.image_num = 0;
    6f32:	f88d 500c 	strb.w	r5, [sp, #12]
        if (boot_magic_compatible_check(table->magic_primary_slot,
    6f36:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    6f3a:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    6f3e:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    6f42:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    6f46:	f89d 9002 	ldrb.w	r9, [sp, #2]
    6f4a:	4c29      	ldr	r4, [pc, #164]	; (6ff0 <boot_swap_type_multi+0x110>)
    6f4c:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    6f4e:	7820      	ldrb	r0, [r4, #0]
    6f50:	4629      	mov	r1, r5
    6f52:	f004 faf3 	bl	b53c <boot_magic_compatible_check>
    6f56:	b310      	cbz	r0, 6f9e <boot_swap_type_multi+0xbe>
            boot_magic_compatible_check(table->magic_secondary_slot,
    6f58:	7860      	ldrb	r0, [r4, #1]
    6f5a:	4631      	mov	r1, r6
    6f5c:	f004 faee 	bl	b53c <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    6f60:	b1e8      	cbz	r0, 6f9e <boot_swap_type_multi+0xbe>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    6f62:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    6f64:	2b04      	cmp	r3, #4
    6f66:	d001      	beq.n	6f6c <boot_swap_type_multi+0x8c>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    6f68:	42bb      	cmp	r3, r7
    6f6a:	d118      	bne.n	6f9e <boot_swap_type_multi+0xbe>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    6f6c:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    6f6e:	2b04      	cmp	r3, #4
    6f70:	d001      	beq.n	6f76 <boot_swap_type_multi+0x96>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    6f72:	4543      	cmp	r3, r8
    6f74:	d113      	bne.n	6f9e <boot_swap_type_multi+0xbe>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    6f76:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    6f78:	2b04      	cmp	r3, #4
    6f7a:	d10e      	bne.n	6f9a <boot_swap_type_multi+0xba>
    6f7c:	4b19      	ldr	r3, [pc, #100]	; (6fe4 <boot_swap_type_multi+0x104>)
    6f7e:	4a1a      	ldr	r2, [pc, #104]	; (6fe8 <boot_swap_type_multi+0x108>)
    6f80:	1ad2      	subs	r2, r2, r3
            BOOT_LOG_INF("Swap type: %s",
    6f82:	7963      	ldrb	r3, [r4, #5]
    6f84:	08d2      	lsrs	r2, r2, #3
    6f86:	0192      	lsls	r2, r2, #6
    6f88:	2b02      	cmp	r3, #2
    6f8a:	f042 0203 	orr.w	r2, r2, #3
    6f8e:	d117      	bne.n	6fc0 <boot_swap_type_multi+0xe0>
    6f90:	4918      	ldr	r1, [pc, #96]	; (6ff4 <boot_swap_type_multi+0x114>)
    6f92:	e01c      	b.n	6fce <boot_swap_type_multi+0xee>
    } else if (rc) {
    6f94:	2800      	cmp	r0, #0
    6f96:	d0ce      	beq.n	6f36 <boot_swap_type_multi+0x56>
    6f98:	e7ac      	b.n	6ef4 <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    6f9a:	454b      	cmp	r3, r9
    6f9c:	d0ee      	beq.n	6f7c <boot_swap_type_multi+0x9c>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    6f9e:	3201      	adds	r2, #1
    6fa0:	2a03      	cmp	r2, #3
    6fa2:	f104 0406 	add.w	r4, r4, #6
    6fa6:	d1d2      	bne.n	6f4e <boot_swap_type_multi+0x6e>
    6fa8:	4b0e      	ldr	r3, [pc, #56]	; (6fe4 <boot_swap_type_multi+0x104>)
    6faa:	490f      	ldr	r1, [pc, #60]	; (6fe8 <boot_swap_type_multi+0x108>)
    BOOT_LOG_INF("Swap type: none");
    6fac:	4812      	ldr	r0, [pc, #72]	; (6ff8 <boot_swap_type_multi+0x118>)
    6fae:	1ac9      	subs	r1, r1, r3
    6fb0:	08c9      	lsrs	r1, r1, #3
    6fb2:	0189      	lsls	r1, r1, #6
    6fb4:	f041 0103 	orr.w	r1, r1, #3
    6fb8:	f002 feac 	bl	9d14 <log_0>
    return BOOT_SWAP_TYPE_NONE;
    6fbc:	2001      	movs	r0, #1
    6fbe:	e79a      	b.n	6ef6 <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    6fc0:	2b03      	cmp	r3, #3
    6fc2:	d00c      	beq.n	6fde <boot_swap_type_multi+0xfe>
    6fc4:	490d      	ldr	r1, [pc, #52]	; (6ffc <boot_swap_type_multi+0x11c>)
    6fc6:	480e      	ldr	r0, [pc, #56]	; (7000 <boot_swap_type_multi+0x120>)
    6fc8:	2b04      	cmp	r3, #4
    6fca:	bf08      	it	eq
    6fcc:	4601      	moveq	r1, r0
    6fce:	480d      	ldr	r0, [pc, #52]	; (7004 <boot_swap_type_multi+0x124>)
    6fd0:	f002 fead 	bl	9d2e <log_1>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    6fd4:	7960      	ldrb	r0, [r4, #5]
    6fd6:	1e83      	subs	r3, r0, #2
    6fd8:	2b02      	cmp	r3, #2
    6fda:	d98c      	bls.n	6ef6 <boot_swap_type_multi+0x16>
    6fdc:	e78a      	b.n	6ef4 <boot_swap_type_multi+0x14>
            BOOT_LOG_INF("Swap type: %s",
    6fde:	490a      	ldr	r1, [pc, #40]	; (7008 <boot_swap_type_multi+0x128>)
    6fe0:	e7f5      	b.n	6fce <boot_swap_type_multi+0xee>
    6fe2:	bf00      	nop
    6fe4:	0000bee4 	.word	0x0000bee4
    6fe8:	0000bf04 	.word	0x0000bf04
    6fec:	0000d739 	.word	0x0000d739
    6ff0:	0000d7c0 	.word	0x0000d7c0
    6ff4:	0000d79d 	.word	0x0000d79d
    6ff8:	0000d7b0 	.word	0x0000d7b0
    6ffc:	0000d786 	.word	0x0000d786
    7000:	0000d77f 	.word	0x0000d77f
    7004:	0000d7a2 	.word	0x0000d7a2
    7008:	0000d798 	.word	0x0000d798

0000700c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    700c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7010:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    7014:	2a08      	cmp	r2, #8
    7016:	d106      	bne.n	7026 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7018:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    701c:	2b05      	cmp	r3, #5
    701e:	d802      	bhi.n	7026 <nrf52_errata_103+0x1a>
    7020:	4a02      	ldr	r2, [pc, #8]	; (702c <nrf52_errata_103+0x20>)
    7022:	5cd0      	ldrb	r0, [r2, r3]
    7024:	4770      	bx	lr
        return false;
    7026:	2000      	movs	r0, #0
}
    7028:	4770      	bx	lr
    702a:	bf00      	nop
    702c:	0000d7d8 	.word	0x0000d7d8

00007030 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7030:	4a02      	ldr	r2, [pc, #8]	; (703c <nvmc_wait+0xc>)
    7032:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    7036:	2b00      	cmp	r3, #0
    7038:	d0fb      	beq.n	7032 <nvmc_wait+0x2>
}
    703a:	4770      	bx	lr
    703c:	4001e000 	.word	0x4001e000

00007040 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    7040:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    7042:	f004 fb0f 	bl	b664 <nrf52_errata_136>
    7046:	b140      	cbz	r0, 705a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    7048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    704c:	2200      	movs	r2, #0
    704e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    7052:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    7056:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    705a:	f004 fb03 	bl	b664 <nrf52_errata_136>
    705e:	2800      	cmp	r0, #0
    7060:	d046      	beq.n	70f0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7066:	4b60      	ldr	r3, [pc, #384]	; (71e8 <SystemInit+0x1a8>)
    7068:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    706c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    7070:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    7074:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    7078:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    707c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    7080:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    7084:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    7088:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    708c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7090:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    7094:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    7098:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    709c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    70a0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    70a4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    70a8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    70ac:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    70b0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    70b4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    70b8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    70bc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    70c0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    70c4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    70c8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    70cc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    70d0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    70d4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    70d8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    70dc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    70e0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    70e4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    70e8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    70ec:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    70f0:	f7ff ff8c 	bl	700c <nrf52_errata_103>
    70f4:	b118      	cbz	r0, 70fe <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    70f6:	4b3d      	ldr	r3, [pc, #244]	; (71ec <SystemInit+0x1ac>)
    70f8:	4a3d      	ldr	r2, [pc, #244]	; (71f0 <SystemInit+0x1b0>)
    70fa:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    70fe:	f7ff ff85 	bl	700c <nrf52_errata_103>
    7102:	b118      	cbz	r0, 710c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    7104:	4b3b      	ldr	r3, [pc, #236]	; (71f4 <SystemInit+0x1b4>)
    7106:	22fb      	movs	r2, #251	; 0xfb
    7108:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    710c:	f7ff ff7e 	bl	700c <nrf52_errata_103>
    7110:	b170      	cbz	r0, 7130 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    7112:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7116:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    711a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    711e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    7122:	f022 020f 	bic.w	r2, r2, #15
    7126:	f003 030f 	and.w	r3, r3, #15
    712a:	4313      	orrs	r3, r2
    712c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    7130:	f7ff ff6c 	bl	700c <nrf52_errata_103>
    7134:	b120      	cbz	r0, 7140 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    7136:	4b30      	ldr	r3, [pc, #192]	; (71f8 <SystemInit+0x1b8>)
    7138:	f44f 7200 	mov.w	r2, #512	; 0x200
    713c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    7140:	f004 fa90 	bl	b664 <nrf52_errata_136>
    7144:	b148      	cbz	r0, 715a <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    7146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    714a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    714e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    7150:	bf44      	itt	mi
    7152:	f06f 0201 	mvnmi.w	r2, #1
    7156:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    715a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    715e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    7162:	2a08      	cmp	r2, #8
    7164:	d10e      	bne.n	7184 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7166:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    716a:	2b05      	cmp	r3, #5
    716c:	d802      	bhi.n	7174 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    716e:	4a23      	ldr	r2, [pc, #140]	; (71fc <SystemInit+0x1bc>)
    7170:	5cd3      	ldrb	r3, [r2, r3]
    7172:	b13b      	cbz	r3, 7184 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    7174:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7178:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    717c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7180:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7184:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7188:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    718c:	2a00      	cmp	r2, #0
    718e:	db03      	blt.n	7198 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    7190:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7194:	2b00      	cmp	r3, #0
    7196:	da22      	bge.n	71de <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7198:	4919      	ldr	r1, [pc, #100]	; (7200 <SystemInit+0x1c0>)
    719a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    719c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    71a0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    71a4:	2412      	movs	r4, #18
    nvmc_wait();
    71a6:	f7ff ff43 	bl	7030 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    71aa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    71ae:	f7ff ff3f 	bl	7030 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    71b2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    71b6:	f7ff ff3b 	bl	7030 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    71ba:	2300      	movs	r3, #0
    71bc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    71c0:	f7ff ff36 	bl	7030 <nvmc_wait>
    71c4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    71c8:	490e      	ldr	r1, [pc, #56]	; (7204 <SystemInit+0x1c4>)
    71ca:	4b0f      	ldr	r3, [pc, #60]	; (7208 <SystemInit+0x1c8>)
    71cc:	68ca      	ldr	r2, [r1, #12]
    71ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    71d2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    71d4:	60cb      	str	r3, [r1, #12]
    71d6:	f3bf 8f4f 	dsb	sy
    __NOP();
    71da:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    71dc:	e7fd      	b.n	71da <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    71de:	4b0b      	ldr	r3, [pc, #44]	; (720c <SystemInit+0x1cc>)
    71e0:	4a0b      	ldr	r2, [pc, #44]	; (7210 <SystemInit+0x1d0>)
    71e2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    71e4:	bd10      	pop	{r4, pc}
    71e6:	bf00      	nop
    71e8:	4000c000 	.word	0x4000c000
    71ec:	40005000 	.word	0x40005000
    71f0:	00038148 	.word	0x00038148
    71f4:	4000f000 	.word	0x4000f000
    71f8:	40029000 	.word	0x40029000
    71fc:	0000d7d2 	.word	0x0000d7d2
    7200:	4001e000 	.word	0x4001e000
    7204:	e000ed00 	.word	0xe000ed00
    7208:	05fa0004 	.word	0x05fa0004
    720c:	20000130 	.word	0x20000130
    7210:	03d09000 	.word	0x03d09000

00007214 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    7214:	4b04      	ldr	r3, [pc, #16]	; (7228 <nrfx_clock_init+0x14>)
    7216:	791a      	ldrb	r2, [r3, #4]
    7218:	b922      	cbnz	r2, 7224 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    721a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    721c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    721e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    7220:	4802      	ldr	r0, [pc, #8]	; (722c <nrfx_clock_init+0x18>)
    7222:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    7224:	4802      	ldr	r0, [pc, #8]	; (7230 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7226:	4770      	bx	lr
    7228:	20002814 	.word	0x20002814
    722c:	0bad0000 	.word	0x0bad0000
    7230:	0bad000c 	.word	0x0bad000c

00007234 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    7234:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    7236:	b110      	cbz	r0, 723e <nrfx_clock_stop+0xa>
    7238:	2801      	cmp	r0, #1
    723a:	d017      	beq.n	726c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    723c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    723e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7242:	2302      	movs	r3, #2
    7244:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7248:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    724c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7250:	2301      	movs	r3, #1
    7252:	60e3      	str	r3, [r4, #12]
    7254:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7258:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    725c:	03db      	lsls	r3, r3, #15
    725e:	d5ed      	bpl.n	723c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    7260:	2001      	movs	r0, #1
    7262:	f004 fa09 	bl	b678 <nrfx_busy_wait>
    7266:	3d01      	subs	r5, #1
    7268:	d1f6      	bne.n	7258 <nrfx_clock_stop+0x24>
    726a:	e7e7      	b.n	723c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    726c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7270:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    7272:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7276:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    727a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    727e:	6060      	str	r0, [r4, #4]
    7280:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7284:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7288:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    728c:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    728e:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7292:	d505      	bpl.n	72a0 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    7294:	b123      	cbz	r3, 72a0 <nrfx_clock_stop+0x6c>
    7296:	2001      	movs	r0, #1
    7298:	f004 f9ee 	bl	b678 <nrfx_busy_wait>
    729c:	3d01      	subs	r5, #1
    729e:	d1f1      	bne.n	7284 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    72a0:	4b01      	ldr	r3, [pc, #4]	; (72a8 <nrfx_clock_stop+0x74>)
    72a2:	2200      	movs	r2, #0
    72a4:	715a      	strb	r2, [r3, #5]
    72a6:	e7c9      	b.n	723c <nrfx_clock_stop+0x8>
    72a8:	20002814 	.word	0x20002814

000072ac <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    72ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    72b0:	b510      	push	{r4, lr}
    72b2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    72b6:	b16a      	cbz	r2, 72d4 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    72b8:	2200      	movs	r2, #0
    72ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    72be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    72c2:	2201      	movs	r2, #1
    72c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    72c8:	4b11      	ldr	r3, [pc, #68]	; (7310 <nrfx_power_clock_irq_handler+0x64>)
    72ca:	7958      	ldrb	r0, [r3, #5]
    72cc:	b910      	cbnz	r0, 72d4 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    72ce:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    72d0:	681b      	ldr	r3, [r3, #0]
    72d2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    72d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72d8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    72dc:	b172      	cbz	r2, 72fc <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    72de:	2200      	movs	r2, #0
    72e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    72e4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    72e8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    72ec:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    72f0:	0792      	lsls	r2, r2, #30
    72f2:	d104      	bne.n	72fe <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    72f4:	2201      	movs	r2, #1
    72f6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    72fa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    72fc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    72fe:	2202      	movs	r2, #2
    7300:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    7304:	4b02      	ldr	r3, [pc, #8]	; (7310 <nrfx_power_clock_irq_handler+0x64>)
}
    7306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    730a:	681b      	ldr	r3, [r3, #0]
    730c:	2001      	movs	r0, #1
    730e:	4718      	bx	r3
    7310:	20002814 	.word	0x20002814

00007314 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    7314:	2301      	movs	r3, #1
    7316:	fa03 f000 	lsl.w	r0, r3, r0
    731a:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    731c:	b193      	cbz	r3, 7344 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    731e:	f04f 0320 	mov.w	r3, #32
    7322:	f3ef 8111 	mrs	r1, BASEPRI
    7326:	f383 8811 	msr	BASEPRI, r3
    732a:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    732e:	4a06      	ldr	r2, [pc, #24]	; (7348 <nrfx_gpiote_channel_free+0x34>)
    7330:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    7332:	ea23 0000 	bic.w	r0, r3, r0
    7336:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    7338:	f381 8811 	msr	BASEPRI, r1
    733c:	f3bf 8f6f 	isb	sy
    7340:	4802      	ldr	r0, [pc, #8]	; (734c <nrfx_gpiote_channel_free+0x38>)
    7342:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    7344:	4802      	ldr	r0, [pc, #8]	; (7350 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7346:	4770      	bx	lr
    7348:	2000281c 	.word	0x2000281c
    734c:	0bad0000 	.word	0x0bad0000
    7350:	0bad0004 	.word	0x0bad0004

00007354 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    7354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7358:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    735a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 73b8 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    735e:	4817      	ldr	r0, [pc, #92]	; (73bc <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    7360:	f8df 805c 	ldr.w	r8, [pc, #92]	; 73c0 <nrfx_gpiote_channel_alloc+0x6c>
{
    7364:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    7366:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    7368:	2601      	movs	r6, #1
    736a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    736c:	f04f 0120 	mov.w	r1, #32
    7370:	f3ef 8c11 	mrs	ip, BASEPRI
    7374:	f381 8811 	msr	BASEPRI, r1
    7378:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    737c:	fa22 f103 	lsr.w	r1, r2, r3
    7380:	07c9      	lsls	r1, r1, #31
    7382:	d50a      	bpl.n	739a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    7384:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    7388:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    738c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    738e:	bf01      	itttt	eq
    7390:	4339      	orreq	r1, r7
    7392:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    7396:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    7398:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    739a:	f38c 8811 	msr	BASEPRI, ip
    739e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    73a2:	4540      	cmp	r0, r8
    73a4:	d005      	beq.n	73b2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    73a6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    73aa:	439a      	bics	r2, r3
    73ac:	f104 0401 	add.w	r4, r4, #1
    73b0:	d1db      	bne.n	736a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    73b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73b6:	bf00      	nop
    73b8:	2000281c 	.word	0x2000281c
    73bc:	0bad0002 	.word	0x0bad0002
    73c0:	0bad0000 	.word	0x0bad0000

000073c4 <nvmc_word_write>:
    73c4:	4a04      	ldr	r2, [pc, #16]	; (73d8 <nvmc_word_write+0x14>)
    73c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    73ca:	07db      	lsls	r3, r3, #31
    73cc:	d5fb      	bpl.n	73c6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    73ce:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    73d0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    73d4:	4770      	bx	lr
    73d6:	bf00      	nop
    73d8:	4001e000 	.word	0x4001e000

000073dc <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    73dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    73e0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
    73e2:	fbb0 f3f2 	udiv	r3, r0, r2
    73e6:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    73ea:	b973      	cbnz	r3, 740a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    73ec:	4b08      	ldr	r3, [pc, #32]	; (7410 <nrfx_nvmc_page_erase+0x34>)
    73ee:	2202      	movs	r2, #2
    73f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    73f4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    73f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    73fc:	07d2      	lsls	r2, r2, #31
    73fe:	d5fb      	bpl.n	73f8 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    7400:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    7402:	4804      	ldr	r0, [pc, #16]	; (7414 <nrfx_nvmc_page_erase+0x38>)
    7404:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    7408:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    740a:	4803      	ldr	r0, [pc, #12]	; (7418 <nrfx_nvmc_page_erase+0x3c>)
}
    740c:	4770      	bx	lr
    740e:	bf00      	nop
    7410:	4001e000 	.word	0x4001e000
    7414:	0bad0000 	.word	0x0bad0000
    7418:	0bad000a 	.word	0x0bad000a

0000741c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    741c:	b510      	push	{r4, lr}
    741e:	4c05      	ldr	r4, [pc, #20]	; (7434 <nrfx_nvmc_word_write+0x18>)
    7420:	2301      	movs	r3, #1
    7422:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    7426:	f7ff ffcd 	bl	73c4 <nvmc_word_write>
    742a:	2300      	movs	r3, #0
    742c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
    7430:	bd10      	pop	{r4, pc}
    7432:	bf00      	nop
    7434:	4001e000 	.word	0x4001e000

00007438 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    7438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    743c:	4a14      	ldr	r2, [pc, #80]	; (7490 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    743e:	4e15      	ldr	r6, [pc, #84]	; (7494 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    7440:	4f15      	ldr	r7, [pc, #84]	; (7498 <nrfx_ppi_channel_alloc+0x60>)
{
    7442:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    7444:	4815      	ldr	r0, [pc, #84]	; (749c <nrfx_ppi_channel_alloc+0x64>)
{
    7446:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    7448:	f04f 0e01 	mov.w	lr, #1
    744c:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    7450:	f04f 0320 	mov.w	r3, #32
    7454:	f3ef 8811 	mrs	r8, BASEPRI
    7458:	f383 8811 	msr	BASEPRI, r3
    745c:	f3bf 8f6f 	isb	sy
    7460:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    7464:	4213      	tst	r3, r2
    7466:	d007      	beq.n	7478 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    7468:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    746a:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    746c:	bf01      	itttt	eq
    746e:	4319      	orreq	r1, r3
    7470:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    7472:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    7476:	4638      	moveq	r0, r7
	__asm__ volatile(
    7478:	f388 8811 	msr	BASEPRI, r8
    747c:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    7480:	42b8      	cmp	r0, r7
    7482:	d003      	beq.n	748c <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    7484:	439a      	bics	r2, r3
    7486:	f104 0401 	add.w	r4, r4, #1
    748a:	d1df      	bne.n	744c <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    748c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7490:	000fffff 	.word	0x000fffff
    7494:	2000287c 	.word	0x2000287c
    7498:	0bad0000 	.word	0x0bad0000
    749c:	0bad0002 	.word	0x0bad0002

000074a0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    74a0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    74a2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    74a6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    74a8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    74aa:	6002      	str	r2, [r0, #0]
}
    74ac:	4802      	ldr	r0, [pc, #8]	; (74b8 <nrf_gpio_pin_port_decode+0x18>)
    74ae:	bf18      	it	ne
    74b0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    74b4:	4770      	bx	lr
    74b6:	bf00      	nop
    74b8:	50000300 	.word	0x50000300

000074bc <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
    74bc:	b570      	push	{r4, r5, r6, lr}
    74be:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
    74c2:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    74c6:	d14b      	bne.n	7560 <qspi_xfer+0xa4>
    74c8:	0784      	lsls	r4, r0, #30
    74ca:	d149      	bne.n	7560 <qspi_xfer+0xa4>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
    74cc:	4c26      	ldr	r4, [pc, #152]	; (7568 <qspi_xfer+0xac>)
    74ce:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
    74d2:	2d01      	cmp	r5, #1
    74d4:	d001      	beq.n	74da <qspi_xfer+0x1e>
    74d6:	429d      	cmp	r5, r3
    74d8:	d144      	bne.n	7564 <qspi_xfer+0xa8>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
    74da:	6825      	ldr	r5, [r4, #0]
    74dc:	2d00      	cmp	r5, #0
    74de:	d02e      	beq.n	753e <qspi_xfer+0x82>
    {
        if (m_cb.p_buffer_primary)
    74e0:	68a6      	ldr	r6, [r4, #8]
    74e2:	b32e      	cbz	r6, 7530 <qspi_xfer+0x74>
        {
            m_cb.p_buffer_secondary = p_buffer;
    74e4:	60e0      	str	r0, [r4, #12]
            m_cb.size_secondary     = length;
    74e6:	6161      	str	r1, [r4, #20]
            m_cb.addr_secondary     = address;
    74e8:	61e2      	str	r2, [r4, #28]
    bool is_first_buffer = false;
    74ea:	2600      	movs	r6, #0
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    74ec:	4c1f      	ldr	r4, [pc, #124]	; (756c <qspi_xfer+0xb0>)
    74ee:	2b02      	cmp	r3, #2
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
    74f0:	bf0b      	itete	eq
    74f2:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
    74f6:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    74fa:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    74fe:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    7502:	bf07      	ittee	eq
    7504:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
    7508:	2308      	moveq	r3, #8
    p_reg->READ.CNT = length;
    750a:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
    750e:	2304      	movne	r3, #4
    }

    if (!m_cb.handler)
    7510:	b9bd      	cbnz	r5, 7542 <qspi_xfer+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7512:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7516:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    751a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    751c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7520:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7522:	4a12      	ldr	r2, [pc, #72]	; (756c <qspi_xfer+0xb0>)
    7524:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    7528:	2b00      	cmp	r3, #0
    752a:	d0fb      	beq.n	7524 <qspi_xfer+0x68>
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
    752c:	4810      	ldr	r0, [pc, #64]	; (7570 <qspi_xfer+0xb4>)
}
    752e:	bd70      	pop	{r4, r5, r6, pc}
            m_cb.p_buffer_primary = p_buffer;
    7530:	60a0      	str	r0, [r4, #8]
            m_cb.size_primary     = length;
    7532:	6121      	str	r1, [r4, #16]
            m_cb.addr_primary     = address;
    7534:	61a2      	str	r2, [r4, #24]
            m_cb.state = desired_state;
    7536:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
            is_first_buffer = true;
    753a:	2601      	movs	r6, #1
    753c:	e7d6      	b.n	74ec <qspi_xfer+0x30>
    bool is_first_buffer = false;
    753e:	462e      	mov	r6, r5
    7540:	e7d4      	b.n	74ec <qspi_xfer+0x30>
    else if (is_first_buffer)
    7542:	2e00      	cmp	r6, #0
    7544:	d0f2      	beq.n	752c <qspi_xfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7546:	4909      	ldr	r1, [pc, #36]	; (756c <qspi_xfer+0xb0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7548:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    754c:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    754e:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7552:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
    7556:	2201      	movs	r2, #1
    7558:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    755c:	601a      	str	r2, [r3, #0]
    755e:	e7e5      	b.n	752c <qspi_xfer+0x70>
        return NRFX_ERROR_INVALID_ADDR;
    7560:	4804      	ldr	r0, [pc, #16]	; (7574 <qspi_xfer+0xb8>)
    7562:	e7e4      	b.n	752e <qspi_xfer+0x72>
        return NRFX_ERROR_BUSY;
    7564:	4804      	ldr	r0, [pc, #16]	; (7578 <qspi_xfer+0xbc>)
    7566:	e7e2      	b.n	752e <qspi_xfer+0x72>
    7568:	20002880 	.word	0x20002880
    756c:	40029000 	.word	0x40029000
    7570:	0bad0000 	.word	0x0bad0000
    7574:	0bad000a 	.word	0x0bad000a
    7578:	0bad000b 	.word	0x0bad000b

0000757c <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
    757c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    757e:	4d07      	ldr	r5, [pc, #28]	; (759c <qspi_ready_wait+0x20>)
    7580:	2464      	movs	r4, #100	; 0x64
    7582:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
    7586:	b933      	cbnz	r3, 7596 <qspi_ready_wait+0x1a>
    7588:	200a      	movs	r0, #10
    758a:	f004 f875 	bl	b678 <nrfx_busy_wait>
    758e:	3c01      	subs	r4, #1
    7590:	d1f7      	bne.n	7582 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
    7592:	4803      	ldr	r0, [pc, #12]	; (75a0 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
    7594:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
    7596:	4803      	ldr	r0, [pc, #12]	; (75a4 <qspi_ready_wait+0x28>)
    7598:	e7fc      	b.n	7594 <qspi_ready_wait+0x18>
    759a:	bf00      	nop
    759c:	40029000 	.word	0x40029000
    75a0:	0bad0007 	.word	0x0bad0007
    75a4:	0bad0000 	.word	0x0bad0000

000075a8 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
    75a8:	4b08      	ldr	r3, [pc, #32]	; (75cc <qspi_event_xfer_handle.constprop.0+0x24>)
    75aa:	689a      	ldr	r2, [r3, #8]
    75ac:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
    75ae:	691a      	ldr	r2, [r3, #16]
    75b0:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
    75b2:	699a      	ldr	r2, [r3, #24]
    75b4:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
    75b6:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
    75b8:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
    75ba:	b132      	cbz	r2, 75ca <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
    75bc:	695a      	ldr	r2, [r3, #20]
    75be:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
    75c0:	69da      	ldr	r2, [r3, #28]
    75c2:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
    75c4:	2200      	movs	r2, #0
    75c6:	60da      	str	r2, [r3, #12]
    75c8:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
    75ca:	4770      	bx	lr
    75cc:	20002880 	.word	0x20002880

000075d0 <nrf_qspi_cinstrdata_get.constprop.0>:
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
    75d0:	4b0e      	ldr	r3, [pc, #56]	; (760c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
    75d2:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
    75d4:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
    75d8:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
    75dc:	2807      	cmp	r0, #7
    75de:	d813      	bhi.n	7608 <nrf_qspi_cinstrdata_get.constprop.0+0x38>
    75e0:	e8df f000 	tbb	[pc, r0]
    75e4:	0b0d0f11 	.word	0x0b0d0f11
    75e8:	0406080a 	.word	0x0406080a
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
    75ec:	0e10      	lsrs	r0, r2, #24
    75ee:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
    75f0:	0c10      	lsrs	r0, r2, #16
    75f2:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
    75f4:	0a10      	lsrs	r0, r2, #8
    75f6:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
    75f8:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
    75fa:	0e1a      	lsrs	r2, r3, #24
    75fc:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
    75fe:	0c1a      	lsrs	r2, r3, #16
    7600:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
    7602:	0a1a      	lsrs	r2, r3, #8
    7604:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
    7606:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
    7608:	4770      	bx	lr
    760a:	bf00      	nop
    760c:	40029000 	.word	0x40029000

00007610 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
    7610:	3802      	subs	r0, #2
    7612:	2807      	cmp	r0, #7
    7614:	d81f      	bhi.n	7656 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
    7616:	e8df f000 	tbb	[pc, r0]
    761a:	2729      	.short	0x2729
    761c:	21231125 	.word	0x21231125
    7620:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
    7622:	79cb      	ldrb	r3, [r1, #7]
    7624:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
    7626:	798a      	ldrb	r2, [r1, #6]
    7628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
    762c:	794a      	ldrb	r2, [r1, #5]
    762e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
    7632:	790a      	ldrb	r2, [r1, #4]
    7634:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
    7636:	4a0e      	ldr	r2, [pc, #56]	; (7670 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7638:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
    763c:	78cb      	ldrb	r3, [r1, #3]
    763e:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
    7640:	788a      	ldrb	r2, [r1, #2]
    7642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
    7646:	784a      	ldrb	r2, [r1, #1]
    7648:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
    764c:	780a      	ldrb	r2, [r1, #0]
    764e:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
    7650:	4a07      	ldr	r2, [pc, #28]	; (7670 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    7652:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
    7656:	4770      	bx	lr
    switch (length)
    7658:	2300      	movs	r3, #0
    765a:	e7e4      	b.n	7626 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
    765c:	2300      	movs	r3, #0
    765e:	e7e5      	b.n	762c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
    7660:	2300      	movs	r3, #0
    7662:	e7e6      	b.n	7632 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
    7664:	2300      	movs	r3, #0
    7666:	e7eb      	b.n	7640 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
    7668:	2300      	movs	r3, #0
    766a:	e7ec      	b.n	7646 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
    766c:	2300      	movs	r3, #0
    766e:	e7ed      	b.n	764c <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
    7670:	40029000 	.word	0x40029000

00007674 <nrfx_qspi_init>:
{
    7674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7676:	4d67      	ldr	r5, [pc, #412]	; (7814 <nrfx_qspi_init+0x1a0>)
    7678:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
    767c:	4604      	mov	r4, r0
    767e:	4616      	mov	r6, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    7680:	2b00      	cmp	r3, #0
    7682:	f040 80c1 	bne.w	7808 <nrfx_qspi_init+0x194>
    if ((p_config->sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7686:	7903      	ldrb	r3, [r0, #4]
    7688:	2bff      	cmp	r3, #255	; 0xff
    768a:	f000 80c0 	beq.w	780e <nrfx_qspi_init+0x19a>
    768e:	7942      	ldrb	r2, [r0, #5]
    7690:	2aff      	cmp	r2, #255	; 0xff
    7692:	f000 80bc 	beq.w	780e <nrfx_qspi_init+0x19a>
        (p_config->csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    7696:	7982      	ldrb	r2, [r0, #6]
    7698:	2aff      	cmp	r2, #255	; 0xff
    769a:	f000 80b8 	beq.w	780e <nrfx_qspi_init+0x19a>
        (p_config->io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    769e:	79c2      	ldrb	r2, [r0, #7]
    76a0:	2aff      	cmp	r2, #255	; 0xff
    76a2:	f000 80b4 	beq.w	780e <nrfx_qspi_init+0x19a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76a6:	a801      	add	r0, sp, #4
    QSPI_PIN_INIT(p_config->sck_pin);
    76a8:	9301      	str	r3, [sp, #4]
    76aa:	f7ff fef9 	bl	74a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    76ae:	9b01      	ldr	r3, [sp, #4]
    76b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    76b4:	f240 3702 	movw	r7, #770	; 0x302
    76b8:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76bc:	a801      	add	r0, sp, #4
    QSPI_PIN_INIT(p_config->csn_pin);
    76be:	7963      	ldrb	r3, [r4, #5]
    76c0:	9301      	str	r3, [sp, #4]
    76c2:	f7ff feed 	bl	74a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    76c6:	9b01      	ldr	r3, [sp, #4]
    76c8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    76cc:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76d0:	a801      	add	r0, sp, #4
    QSPI_PIN_INIT(p_config->io0_pin);
    76d2:	79a3      	ldrb	r3, [r4, #6]
    76d4:	9301      	str	r3, [sp, #4]
    76d6:	f7ff fee3 	bl	74a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    76da:	9b01      	ldr	r3, [sp, #4]
    76dc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    76e0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76e4:	a801      	add	r0, sp, #4
    QSPI_PIN_INIT(p_config->io1_pin);
    76e6:	79e3      	ldrb	r3, [r4, #7]
    76e8:	9301      	str	r3, [sp, #4]
    76ea:	f7ff fed9 	bl	74a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    76ee:	9b01      	ldr	r3, [sp, #4]
    76f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    76f4:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (p_config->io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    76f8:	7a23      	ldrb	r3, [r4, #8]
    76fa:	2bff      	cmp	r3, #255	; 0xff
    76fc:	d008      	beq.n	7710 <nrfx_qspi_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76fe:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->io2_pin);
    7700:	9301      	str	r3, [sp, #4]
    7702:	f7ff fecd 	bl	74a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7706:	9b01      	ldr	r3, [sp, #4]
    7708:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    770c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (p_config->io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7710:	7a63      	ldrb	r3, [r4, #9]
    7712:	2bff      	cmp	r3, #255	; 0xff
    7714:	d00a      	beq.n	772c <nrfx_qspi_init+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7716:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->io3_pin);
    7718:	9301      	str	r3, [sp, #4]
    771a:	f7ff fec1 	bl	74a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    771e:	9b01      	ldr	r3, [sp, #4]
    7720:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7724:	f240 3202 	movw	r2, #770	; 0x302
    7728:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
    772c:	7923      	ldrb	r3, [r4, #4]
    772e:	483a      	ldr	r0, [pc, #232]	; (7818 <nrfx_qspi_init+0x1a4>)
    7730:	2bff      	cmp	r3, #255	; 0xff
    7732:	bf08      	it	eq
    7734:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    7738:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
    773c:	7963      	ldrb	r3, [r4, #5]
    773e:	2bff      	cmp	r3, #255	; 0xff
    7740:	bf08      	it	eq
    7742:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    7746:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
    774a:	79a3      	ldrb	r3, [r4, #6]
    774c:	2bff      	cmp	r3, #255	; 0xff
    774e:	bf08      	it	eq
    7750:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    7754:	f8c0 3530 	str.w	r3, [r0, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
    7758:	79e3      	ldrb	r3, [r4, #7]
    775a:	2bff      	cmp	r3, #255	; 0xff
    775c:	bf08      	it	eq
    775e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    7762:	f8c0 3534 	str.w	r3, [r0, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
    7766:	7a23      	ldrb	r3, [r4, #8]
    7768:	2bff      	cmp	r3, #255	; 0xff
    776a:	bf08      	it	eq
    776c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    7770:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
    7774:	7a63      	ldrb	r3, [r4, #9]
    7776:	2bff      	cmp	r3, #255	; 0xff
    7778:	bf08      	it	eq
    777a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    777e:	f8c0 353c 	str.w	r3, [r0, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
    7782:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
    7784:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    7788:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
    778a:	7ae7      	ldrb	r7, [r4, #11]
    uint32_t config = p_config->readoc;
    778c:	7aa2      	ldrb	r2, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    778e:	019b      	lsls	r3, r3, #6
    7790:	ea43 03c7 	orr.w	r3, r3, r7, lsl #3
    7794:	4313      	orrs	r3, r2
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
    7796:	7b62      	ldrb	r2, [r4, #13]
    7798:	2a00      	cmp	r2, #0
    779a:	bf14      	ite	ne
    779c:	2280      	movne	r2, #128	; 0x80
    779e:	2200      	moveq	r2, #0
    77a0:	4313      	orrs	r3, r2
    p_reg->IFCONFIG0 = config;
    77a2:	f8c0 3544 	str.w	r3, [r0, #1348]	; 0x544
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    77a6:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
    config |= p_config->sck_delay;
    77aa:	7ba2      	ldrb	r2, [r4, #14]
    77ac:	f894 c010 	ldrb.w	ip, [r4, #16]
    77b0:	7c67      	ldrb	r7, [r4, #17]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    77b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    77b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    77ba:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    77bc:	7be2      	ldrb	r2, [r4, #15]
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    77be:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    77c2:	2a00      	cmp	r2, #0
    77c4:	bf14      	ite	ne
    77c6:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    77ca:	2200      	moveq	r2, #0
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    77cc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
    77d0:	4313      	orrs	r3, r2
    p_reg->IFCONFIG1 = config;
    77d2:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
    p_reg->INTENCLR = mask;
    77d6:	2301      	movs	r3, #1
    m_cb.p_context = p_context;
    77d8:	e9c5 1600 	strd	r1, r6, [r5]
    77dc:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    if (handler)
    77e0:	b111      	cbz	r1, 77e8 <nrfx_qspi_init+0x174>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
    77e2:	2029      	movs	r0, #41	; 0x29
    77e4:	f7fc fc44 	bl	4070 <arch_irq_enable>
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
    77e8:	4b0b      	ldr	r3, [pc, #44]	; (7818 <nrfx_qspi_init+0x1a4>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    77ea:	2201      	movs	r2, #1
    m_cb.p_buffer_primary = NULL;
    77ec:	2100      	movs	r1, #0
    77ee:	60a9      	str	r1, [r5, #8]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    77f0:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
    77f4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77f8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    77fc:	601a      	str	r2, [r3, #0]
}
    77fe:	b003      	add	sp, #12
    7800:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return qspi_ready_wait();
    7804:	f7ff beba 	b.w	757c <qspi_ready_wait>
        return NRFX_ERROR_INVALID_STATE;
    7808:	4804      	ldr	r0, [pc, #16]	; (781c <nrfx_qspi_init+0x1a8>)
}
    780a:	b003      	add	sp, #12
    780c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
    780e:	4804      	ldr	r0, [pc, #16]	; (7820 <nrfx_qspi_init+0x1ac>)
    7810:	e7fb      	b.n	780a <nrfx_qspi_init+0x196>
    7812:	bf00      	nop
    7814:	20002880 	.word	0x20002880
    7818:	40029000 	.word	0x40029000
    781c:	0bad0005 	.word	0x0bad0005
    7820:	0bad0004 	.word	0x0bad0004

00007824 <nrfx_qspi_cinstr_xfer>:
{
    7824:	b570      	push	{r4, r5, r6, lr}
    7826:	4614      	mov	r4, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7828:	4a19      	ldr	r2, [pc, #100]	; (7890 <nrfx_qspi_cinstr_xfer+0x6c>)
    782a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    782e:	2a01      	cmp	r2, #1
{
    7830:	4605      	mov	r5, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    7832:	d12b      	bne.n	788c <nrfx_qspi_cinstr_xfer+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7834:	4e17      	ldr	r6, [pc, #92]	; (7894 <nrfx_qspi_cinstr_xfer+0x70>)
    7836:	2200      	movs	r2, #0
    7838:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
    783c:	b111      	cbz	r1, 7844 <nrfx_qspi_cinstr_xfer+0x20>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
    783e:	7840      	ldrb	r0, [r0, #1]
    7840:	f7ff fee6 	bl	7610 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
    7844:	2301      	movs	r3, #1
    7846:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start(NRF_QSPI_Type *                p_reg,
                                                      nrf_qspi_cinstr_conf_t const * p_config)
{
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    784a:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    784c:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    784e:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7850:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    7854:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    7856:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7858:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    785a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    785e:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    7860:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
    7864:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    7866:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    786a:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    786e:	f7ff fe85 	bl	757c <qspi_ready_wait>
    7872:	4b09      	ldr	r3, [pc, #36]	; (7898 <nrfx_qspi_cinstr_xfer+0x74>)
    7874:	4298      	cmp	r0, r3
    7876:	d00a      	beq.n	788e <nrfx_qspi_cinstr_xfer+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7878:	2300      	movs	r3, #0
    787a:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
    787e:	b11c      	cbz	r4, 7888 <nrfx_qspi_cinstr_xfer+0x64>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
    7880:	7868      	ldrb	r0, [r5, #1]
    7882:	4621      	mov	r1, r4
    7884:	f7ff fea4 	bl	75d0 <nrf_qspi_cinstrdata_get.constprop.0>
    7888:	4804      	ldr	r0, [pc, #16]	; (789c <nrfx_qspi_cinstr_xfer+0x78>)
    788a:	e000      	b.n	788e <nrfx_qspi_cinstr_xfer+0x6a>
        return NRFX_ERROR_BUSY;
    788c:	4804      	ldr	r0, [pc, #16]	; (78a0 <nrfx_qspi_cinstr_xfer+0x7c>)
}
    788e:	bd70      	pop	{r4, r5, r6, pc}
    7890:	20002880 	.word	0x20002880
    7894:	40029000 	.word	0x40029000
    7898:	0bad0007 	.word	0x0bad0007
    789c:	0bad0000 	.word	0x0bad0000
    78a0:	0bad000b 	.word	0x0bad000b

000078a4 <nrfx_qspi_mem_busy_check>:
{
    78a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
    78a6:	2300      	movs	r3, #0
    78a8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config =
    78ac:	4b0c      	ldr	r3, [pc, #48]	; (78e0 <nrfx_qspi_mem_busy_check+0x3c>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    78ae:	f10d 0207 	add.w	r2, sp, #7
    nrf_qspi_cinstr_conf_t const config =
    78b2:	6818      	ldr	r0, [r3, #0]
    78b4:	9002      	str	r0, [sp, #8]
    78b6:	889b      	ldrh	r3, [r3, #4]
    78b8:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    78bc:	4611      	mov	r1, r2
    78be:	a802      	add	r0, sp, #8
    78c0:	f7ff ffb0 	bl	7824 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
    78c4:	4b07      	ldr	r3, [pc, #28]	; (78e4 <nrfx_qspi_mem_busy_check+0x40>)
    78c6:	4298      	cmp	r0, r3
    78c8:	d106      	bne.n	78d8 <nrfx_qspi_mem_busy_check+0x34>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
    78ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
    78ce:	f013 0f01 	tst.w	r3, #1
    78d2:	4b05      	ldr	r3, [pc, #20]	; (78e8 <nrfx_qspi_mem_busy_check+0x44>)
    78d4:	bf18      	it	ne
    78d6:	4618      	movne	r0, r3
}
    78d8:	b005      	add	sp, #20
    78da:	f85d fb04 	ldr.w	pc, [sp], #4
    78de:	bf00      	nop
    78e0:	0000bfc8 	.word	0x0000bfc8
    78e4:	0bad0000 	.word	0x0bad0000
    78e8:	0bad000b 	.word	0x0bad000b

000078ec <nrfx_qspi_uninit>:
{
    78ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
    78ee:	2029      	movs	r0, #41	; 0x29
    78f0:	f7fc fbce 	bl	4090 <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
    78f4:	4b21      	ldr	r3, [pc, #132]	; (797c <nrfx_qspi_uninit+0x90>)
    78f6:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
    78fa:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
    78fe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
    7902:	bf04      	itt	eq
    7904:	4a1e      	ldreq	r2, [pc, #120]	; (7980 <nrfx_qspi_uninit+0x94>)
    7906:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    790a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    p_reg->INTENCLR = mask;
    790e:	2201      	movs	r2, #1
    7910:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7914:	611a      	str	r2, [r3, #16]
            if (var1 == 0x08)
    7916:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
    791a:	2908      	cmp	r1, #8
        *(volatile uint32_t *)0x40029054ul = 1ul;
    791c:	bf08      	it	eq
    791e:	655a      	streq	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
    7920:	4b16      	ldr	r3, [pc, #88]	; (797c <nrfx_qspi_uninit+0x90>)
    7922:	2200      	movs	r2, #0
    7924:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7928:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
    792c:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
    7930:	f8d3 7528 	ldr.w	r7, [r3, #1320]	; 0x528
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
    7934:	f8d3 6530 	ldr.w	r6, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
    7938:	f8d3 5534 	ldr.w	r5, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
    793c:	f8d3 4538 	ldr.w	r4, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
    7940:	f8d3 153c 	ldr.w	r1, [r3, #1340]	; 0x53c
    nrf_gpio_cfg_default(pins.sck_pin);
    7944:	b2c0      	uxtb	r0, r0
    7946:	f003 fedd 	bl	b704 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
    794a:	b2f8      	uxtb	r0, r7
    794c:	f003 feda 	bl	b704 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
    7950:	b2f0      	uxtb	r0, r6
    7952:	f003 fed7 	bl	b704 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
    7956:	b2e8      	uxtb	r0, r5
    7958:	f003 fed4 	bl	b704 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    795c:	b2e0      	uxtb	r0, r4
    795e:	28ff      	cmp	r0, #255	; 0xff
    7960:	b2c9      	uxtb	r1, r1
    7962:	d001      	beq.n	7968 <nrfx_qspi_uninit+0x7c>
        nrf_gpio_cfg_default(pins.io2_pin);
    7964:	f003 fece 	bl	b704 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    7968:	29ff      	cmp	r1, #255	; 0xff
    796a:	d002      	beq.n	7972 <nrfx_qspi_uninit+0x86>
        nrf_gpio_cfg_default(pins.io3_pin);
    796c:	4608      	mov	r0, r1
    796e:	f003 fec9 	bl	b704 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
    7972:	4b04      	ldr	r3, [pc, #16]	; (7984 <nrfx_qspi_uninit+0x98>)
    7974:	2200      	movs	r2, #0
    7976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
    797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    797c:	40029000 	.word	0x40029000
    7980:	00030100 	.word	0x00030100
    7984:	20002880 	.word	0x20002880

00007988 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
    7988:	078b      	lsls	r3, r1, #30
{
    798a:	b510      	push	{r4, lr}
    if (!nrfx_is_word_aligned((void const *)start_address))
    798c:	d120      	bne.n	79d0 <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
    798e:	4a12      	ldr	r2, [pc, #72]	; (79d8 <nrfx_qspi_erase+0x50>)
    7990:	6814      	ldr	r4, [r2, #0]
    7992:	b11c      	cbz	r4, 799c <nrfx_qspi_erase+0x14>
    7994:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    7998:	2b01      	cmp	r3, #1
    799a:	d11b      	bne.n	79d4 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
    799c:	2304      	movs	r3, #4
    799e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
    79a2:	4b0e      	ldr	r3, [pc, #56]	; (79dc <nrfx_qspi_erase+0x54>)
    79a4:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    79a8:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
    79aa:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    79ae:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    79b2:	2101      	movs	r1, #1
    79b4:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
    79b6:	b944      	cbnz	r4, 79ca <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    79b8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    79bc:	2900      	cmp	r1, #0
    79be:	d0fb      	beq.n	79b8 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
    79c0:	2301      	movs	r3, #1
    79c2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    return NRFX_SUCCESS;
    79c6:	4806      	ldr	r0, [pc, #24]	; (79e0 <nrfx_qspi_erase+0x58>)
}
    79c8:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
    79ca:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    79ce:	e7fa      	b.n	79c6 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
    79d0:	4804      	ldr	r0, [pc, #16]	; (79e4 <nrfx_qspi_erase+0x5c>)
    79d2:	e7f9      	b.n	79c8 <nrfx_qspi_erase+0x40>
        return NRFX_ERROR_BUSY;
    79d4:	4804      	ldr	r0, [pc, #16]	; (79e8 <nrfx_qspi_erase+0x60>)
    79d6:	e7f7      	b.n	79c8 <nrfx_qspi_erase+0x40>
    79d8:	20002880 	.word	0x20002880
    79dc:	40029000 	.word	0x40029000
    79e0:	0bad0000 	.word	0x0bad0000
    79e4:	0bad000a 	.word	0x0bad000a
    79e8:	0bad000b 	.word	0x0bad000b

000079ec <nrfx_qspi_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    79ec:	4b17      	ldr	r3, [pc, #92]	; (7a4c <nrfx_qspi_irq_handler+0x60>)
    79ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
    79f2:	b510      	push	{r4, lr}
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    79f4:	b1e2      	cbz	r2, 7a30 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    79f6:	2200      	movs	r2, #0
    switch (m_cb.state)
    79f8:	4c15      	ldr	r4, [pc, #84]	; (7a50 <nrfx_qspi_irq_handler+0x64>)
    79fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    79fe:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    7a02:	2a03      	cmp	r2, #3
    7a04:	d015      	beq.n	7a32 <nrfx_qspi_irq_handler+0x46>
    7a06:	2a04      	cmp	r2, #4
    7a08:	d015      	beq.n	7a36 <nrfx_qspi_irq_handler+0x4a>
    7a0a:	2a02      	cmp	r2, #2
    7a0c:	d104      	bne.n	7a18 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
    7a0e:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    7a10:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
    7a14:	f7ff fdc8 	bl	75a8 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
    7a18:	68a3      	ldr	r3, [r4, #8]
    7a1a:	b913      	cbnz	r3, 7a22 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
    7a1c:	2301      	movs	r3, #1
    7a1e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
    7a22:	e9d4 3100 	ldrd	r3, r1, [r4]
    7a26:	2000      	movs	r0, #0
    7a28:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
    7a2a:	2300      	movs	r3, #0
    7a2c:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
    7a30:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    7a32:	2302      	movs	r3, #2
    7a34:	e7ec      	b.n	7a10 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
    7a36:	2203      	movs	r2, #3
    7a38:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
    7a3c:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
    7a40:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
    7a42:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    7a46:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    7a4a:	e7e5      	b.n	7a18 <nrfx_qspi_irq_handler+0x2c>
    7a4c:	40029000 	.word	0x40029000
    7a50:	20002880 	.word	0x20002880

00007a54 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7a54:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    7a56:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7a5a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    7a5c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    7a5e:	6002      	str	r2, [r0, #0]
}
    7a60:	4802      	ldr	r0, [pc, #8]	; (7a6c <nrf_gpio_pin_port_decode+0x18>)
    7a62:	bf18      	it	ne
    7a64:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    7a68:	4770      	bx	lr
    7a6a:	bf00      	nop
    7a6c:	50000300 	.word	0x50000300

00007a70 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    7a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    7a74:	7907      	ldrb	r7, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7a76:	4c4c      	ldr	r4, [pc, #304]	; (7ba8 <nrfx_spi_init+0x138>)
{
    7a78:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7a7a:	2028      	movs	r0, #40	; 0x28
    7a7c:	4378      	muls	r0, r7
    7a7e:	1825      	adds	r5, r4, r0
    7a80:	7f2e      	ldrb	r6, [r5, #28]
    7a82:	2e00      	cmp	r6, #0
    7a84:	f040 808e 	bne.w	7ba4 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    7a88:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
    7a8a:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    7a8c:	7b0b      	ldrb	r3, [r1, #12]
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
    7a8e:	7808      	ldrb	r0, [r1, #0]
    if (p_config->mode <= NRF_SPI_MODE_1)
    7a90:	2b01      	cmp	r3, #1
    7a92:	d878      	bhi.n	7b86 <nrfx_spi_init+0x116>
        nrf_gpio_pin_clear(p_config->sck_pin);
    7a94:	f003 fe5b 	bl	b74e <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
    7a98:	780b      	ldrb	r3, [r1, #0]
    7a9a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7a9c:	a801      	add	r0, sp, #4
    7a9e:	f7ff ffd9 	bl	7a54 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7aa2:	9b01      	ldr	r3, [sp, #4]
    7aa4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7aa8:	2201      	movs	r2, #1
    7aaa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    7aae:	784d      	ldrb	r5, [r1, #1]
    7ab0:	2dff      	cmp	r5, #255	; 0xff
    7ab2:	d06b      	beq.n	7b8c <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
    7ab4:	4628      	mov	r0, r5
    7ab6:	f003 fe4a 	bl	b74e <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7aba:	a801      	add	r0, sp, #4
    7abc:	9501      	str	r5, [sp, #4]
    7abe:	f7ff ffc9 	bl	7a54 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7ac2:	9b01      	ldr	r3, [sp, #4]
    7ac4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7ac8:	2203      	movs	r2, #3
    7aca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    7ace:	788e      	ldrb	r6, [r1, #2]
    7ad0:	2eff      	cmp	r6, #255	; 0xff
    7ad2:	d05e      	beq.n	7b92 <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7ad4:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
    7ad6:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
    7ada:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7adc:	f7ff ffba 	bl	7a54 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7ae0:	9b01      	ldr	r3, [sp, #4]
    7ae2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7ae6:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    7aea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    7aee:	78c8      	ldrb	r0, [r1, #3]
    7af0:	28ff      	cmp	r0, #255	; 0xff
    7af2:	d00c      	beq.n	7b0e <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
    7af4:	f003 fe1e 	bl	b734 <nrf_gpio_pin_set>
        nrf_gpio_cfg_output(p_config->ss_pin);
    7af8:	78cb      	ldrb	r3, [r1, #3]
    7afa:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7afc:	a801      	add	r0, sp, #4
    7afe:	f7ff ffa9 	bl	7a54 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7b02:	9b01      	ldr	r3, [sp, #4]
    7b04:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7b08:	2203      	movs	r2, #3
    7b0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    7b0e:	f898 2004 	ldrb.w	r2, [r8, #4]
    7b12:	78c8      	ldrb	r0, [r1, #3]
    7b14:	2328      	movs	r3, #40	; 0x28
    7b16:	fb03 4302 	mla	r3, r3, r2, r4
    7b1a:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
    7b1c:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    7b20:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
    7b22:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
    7b26:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
    7b28:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    7b2c:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    7b30:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    7b34:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    7b36:	7b0d      	ldrb	r5, [r1, #12]
    7b38:	3b00      	subs	r3, #0
    7b3a:	bf18      	it	ne
    7b3c:	2301      	movne	r3, #1
    switch (spi_mode)
    7b3e:	2d02      	cmp	r5, #2
    7b40:	d02a      	beq.n	7b98 <nrfx_spi_init+0x128>
    7b42:	2d03      	cmp	r5, #3
    7b44:	d02b      	beq.n	7b9e <nrfx_spi_init+0x12e>
    7b46:	2d01      	cmp	r5, #1
    7b48:	d101      	bne.n	7b4e <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    7b4a:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    7b4e:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    7b52:	2328      	movs	r3, #40	; 0x28
    7b54:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    7b58:	437b      	muls	r3, r7
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    7b5a:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
    7b5c:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    7b5e:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    7b60:	2201      	movs	r2, #1
    7b62:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
    7b66:	b11b      	cbz	r3, 7b70 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    7b68:	f340 3007 	sbfx	r0, r0, #12, #8
    7b6c:	f7fc fa80 	bl	4070 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    7b70:	2328      	movs	r3, #40	; 0x28
    7b72:	fb03 4407 	mla	r4, r3, r7, r4
    7b76:	2300      	movs	r3, #0
    7b78:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    7b7a:	480c      	ldr	r0, [pc, #48]	; (7bac <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7b7c:	2301      	movs	r3, #1
    7b7e:	7723      	strb	r3, [r4, #28]
}
    7b80:	b003      	add	sp, #12
    7b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
    7b86:	f003 fdd5 	bl	b734 <nrf_gpio_pin_set>
    7b8a:	e785      	b.n	7a98 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    7b8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    7b90:	e79d      	b.n	7ace <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    7b92:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    7b96:	e7aa      	b.n	7aee <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    7b98:	f043 0304 	orr.w	r3, r3, #4
        break;
    7b9c:	e7d7      	b.n	7b4e <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    7b9e:	f043 0306 	orr.w	r3, r3, #6
        break;
    7ba2:	e7d4      	b.n	7b4e <nrfx_spi_init+0xde>
        return err_code;
    7ba4:	4802      	ldr	r0, [pc, #8]	; (7bb0 <nrfx_spi_init+0x140>)
    7ba6:	e7eb      	b.n	7b80 <nrfx_spi_init+0x110>
    7ba8:	200028b4 	.word	0x200028b4
    7bac:	0bad0000 	.word	0x0bad0000
    7bb0:	0bad0005 	.word	0x0bad0005

00007bb4 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    7bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    7bb8:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    7bba:	4c39      	ldr	r4, [pc, #228]	; (7ca0 <nrfx_spi_xfer+0xec>)
    7bbc:	2328      	movs	r3, #40	; 0x28
    7bbe:	437b      	muls	r3, r7
{
    7bc0:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    7bc2:	18e2      	adds	r2, r4, r3
{
    7bc4:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    7bc6:	7f51      	ldrb	r1, [r2, #29]
{
    7bc8:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    7bca:	2900      	cmp	r1, #0
    7bcc:	d165      	bne.n	7c9a <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    7bce:	58e3      	ldr	r3, [r4, r3]
    7bd0:	b10b      	cbz	r3, 7bd6 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    7bd2:	2301      	movs	r3, #1
    7bd4:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    7bd6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    7bda:	2528      	movs	r5, #40	; 0x28
    7bdc:	fb05 4507 	mla	r5, r5, r7, r4
    7be0:	f105 0c0c 	add.w	ip, r5, #12
    7be4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    7be8:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
    7bea:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    7bec:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    7bee:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    7bf2:	d001      	beq.n	7bf8 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    7bf4:	f003 fdab 	bl	b74e <nrf_gpio_pin_clear>
    }
    if (flags)
    7bf8:	2328      	movs	r3, #40	; 0x28
    7bfa:	f1b8 0f00 	cmp.w	r8, #0
    7bfe:	d006      	beq.n	7c0e <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    7c00:	fb03 4407 	mla	r4, r3, r7, r4
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    7c04:	4827      	ldr	r0, [pc, #156]	; (7ca4 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    7c06:	2300      	movs	r3, #0
    7c08:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    7c0e:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
    7c12:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
    7c16:	2204      	movs	r2, #4
    7c18:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
    7c1c:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c20:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
    7c24:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    7c28:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
    7c2a:	b192      	cbz	r2, 7c52 <nrfx_spi_xfer+0x9e>
    7c2c:	6833      	ldr	r3, [r6, #0]
    7c2e:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    7c30:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    7c34:	2a01      	cmp	r2, #1
    7c36:	d90e      	bls.n	7c56 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    7c38:	6833      	ldr	r3, [r6, #0]
    7c3a:	785b      	ldrb	r3, [r3, #1]
    7c3c:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
    7c40:	2328      	movs	r3, #40	; 0x28
    7c42:	437b      	muls	r3, r7
    7c44:	58e6      	ldr	r6, [r4, r3]
    7c46:	b176      	cbz	r6, 7c66 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
    7c48:	2304      	movs	r3, #4
    7c4a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    7c4e:	4816      	ldr	r0, [pc, #88]	; (7ca8 <nrfx_spi_xfer+0xf4>)
    7c50:	e7db      	b.n	7c0a <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    7c52:	7fdb      	ldrb	r3, [r3, #31]
    7c54:	e7ec      	b.n	7c30 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    7c56:	68f3      	ldr	r3, [r6, #12]
    7c58:	2b01      	cmp	r3, #1
    7c5a:	d9f1      	bls.n	7c40 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    7c5c:	2328      	movs	r3, #40	; 0x28
    7c5e:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
    7c62:	7fdb      	ldrb	r3, [r3, #31]
    7c64:	e7ea      	b.n	7c3c <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    7c66:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    7c6a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c6e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    7c72:	2b00      	cmp	r3, #0
    7c74:	d0fb      	beq.n	7c6e <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7c76:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    7c7a:	4628      	mov	r0, r5
    7c7c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    7c80:	f003 fd72 	bl	b768 <transfer_byte>
    7c84:	2800      	cmp	r0, #0
    7c86:	d1f2      	bne.n	7c6e <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    7c88:	2328      	movs	r3, #40	; 0x28
    7c8a:	fb03 4407 	mla	r4, r3, r7, r4
    7c8e:	7fa0      	ldrb	r0, [r4, #30]
    7c90:	28ff      	cmp	r0, #255	; 0xff
    7c92:	d0dc      	beq.n	7c4e <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
    7c94:	f003 fd4e 	bl	b734 <nrf_gpio_pin_set>
    7c98:	e7d9      	b.n	7c4e <nrfx_spi_xfer+0x9a>
        return err_code;
    7c9a:	4804      	ldr	r0, [pc, #16]	; (7cac <nrfx_spi_xfer+0xf8>)
    7c9c:	e7b5      	b.n	7c0a <nrfx_spi_xfer+0x56>
    7c9e:	bf00      	nop
    7ca0:	200028b4 	.word	0x200028b4
    7ca4:	0bad0003 	.word	0x0bad0003
    7ca8:	0bad0000 	.word	0x0bad0000
    7cac:	0bad000b 	.word	0x0bad000b

00007cb0 <nrfx_spi_2_irq_handler>:
    7cb0:	480c      	ldr	r0, [pc, #48]	; (7ce4 <nrfx_spi_2_irq_handler+0x34>)
    NRFX_ASSERT(p_cb->handler);

    nrf_spi_event_clear(p_spi, NRF_SPI_EVENT_READY);
    NRFX_LOG_DEBUG("Event: NRF_SPI_EVENT_READY.");

    if (!transfer_byte(p_spi, p_cb))
    7cb2:	490d      	ldr	r1, [pc, #52]	; (7ce8 <nrfx_spi_2_irq_handler+0x38>)
    7cb4:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
    7cb6:	b510      	push	{r4, lr}
    7cb8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    7cbc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
    7cc0:	f003 fd52 	bl	b768 <transfer_byte>
    7cc4:	b968      	cbnz	r0, 7ce2 <nrfx_spi_2_irq_handler+0x32>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    7cc6:	7f88      	ldrb	r0, [r1, #30]
    7cc8:	28ff      	cmp	r0, #255	; 0xff
    7cca:	d001      	beq.n	7cd0 <nrfx_spi_2_irq_handler+0x20>
        nrf_gpio_pin_set(p_cb->ss_pin);
    7ccc:	f003 fd32 	bl	b734 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    7cd0:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    7cd2:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
    7cd4:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
}
    7cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7cda:	e9d1 3100 	ldrd	r3, r1, [r1]
    7cde:	4803      	ldr	r0, [pc, #12]	; (7cec <nrfx_spi_2_irq_handler+0x3c>)
    7ce0:	4718      	bx	r3
}
    7ce2:	bd10      	pop	{r4, pc}
    7ce4:	40023000 	.word	0x40023000
    7ce8:	200028b4 	.word	0x200028b4
    7cec:	200028bc 	.word	0x200028bc

00007cf0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    7cf0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7cf2:	4c11      	ldr	r4, [pc, #68]	; (7d38 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    7cf4:	4a11      	ldr	r2, [pc, #68]	; (7d3c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    7cf6:	4912      	ldr	r1, [pc, #72]	; (7d40 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7cf8:	2303      	movs	r3, #3
    7cfa:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    7cfc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7cfe:	4b11      	ldr	r3, [pc, #68]	; (7d44 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    7d00:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7d02:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    7d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
    7d08:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    7d0a:	2300      	movs	r3, #0
    7d0c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    7d0e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7d10:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    7d12:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    7d14:	4a0c      	ldr	r2, [pc, #48]	; (7d48 <_DoInit+0x58>)
    7d16:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    7d18:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    7d1a:	2210      	movs	r2, #16
    7d1c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    7d1e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    7d20:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7d22:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    7d24:	f002 ff19 	bl	ab5a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    7d28:	4908      	ldr	r1, [pc, #32]	; (7d4c <_DoInit+0x5c>)
    7d2a:	4620      	mov	r0, r4
    7d2c:	f002 ff15 	bl	ab5a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    7d30:	2320      	movs	r3, #32
    7d32:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    7d34:	bd10      	pop	{r4, pc}
    7d36:	bf00      	nop
    7d38:	200028dc 	.word	0x200028dc
    7d3c:	0000d7de 	.word	0x0000d7de
    7d40:	0000d7e7 	.word	0x0000d7e7
    7d44:	20002fac 	.word	0x20002fac
    7d48:	20002f9c 	.word	0x20002f9c
    7d4c:	0000d7eb 	.word	0x0000d7eb

00007d50 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    7d54:	4f23      	ldr	r7, [pc, #140]	; (7de4 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    7d56:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7d5a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    7d5c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7d60:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    7d62:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7d64:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7d66:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7d68:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7d6a:	d834      	bhi.n	7dd6 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    7d6c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    7d70:	ebaa 0905 	sub.w	r9, sl, r5
    7d74:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    7d78:	4294      	cmp	r4, r2
    7d7a:	d811      	bhi.n	7da0 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7d7c:	f04f 0918 	mov.w	r9, #24
    7d80:	fb06 9309 	mla	r3, r6, r9, r9
    7d84:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    7d86:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7d88:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    7d8a:	4641      	mov	r1, r8
    7d8c:	4428      	add	r0, r5
    7d8e:	f002 ff45 	bl	ac1c <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    7d92:	fb09 7606 	mla	r6, r9, r6, r7
    7d96:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    7d98:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    7d9a:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    7d9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    7da0:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7da2:	429c      	cmp	r4, r3
    7da4:	d81b      	bhi.n	7dde <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7da6:	fb00 bb0b 	mla	fp, r0, fp, fp
    7daa:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    7dac:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7dae:	f8db 0004 	ldr.w	r0, [fp, #4]
    7db2:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    7db4:	4428      	add	r0, r5
    7db6:	f002 ff31 	bl	ac1c <memcpy>
      if (NumBytes) {
    7dba:	ebb4 040a 	subs.w	r4, r4, sl
    7dbe:	d006      	beq.n	7dce <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    7dc0:	f8db 0004 	ldr.w	r0, [fp, #4]
    7dc4:	4622      	mov	r2, r4
    7dc6:	eb08 0109 	add.w	r1, r8, r9
    7dca:	f002 ff27 	bl	ac1c <memcpy>
      pRing->WrOff = NumBytes;
    7dce:	2018      	movs	r0, #24
    7dd0:	fb00 7606 	mla	r6, r0, r6, r7
    7dd4:	e7e0      	b.n	7d98 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    7dd6:	3b01      	subs	r3, #1
    7dd8:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    7dda:	42a3      	cmp	r3, r4
    7ddc:	d2ce      	bcs.n	7d7c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    7dde:	2000      	movs	r0, #0
    7de0:	e7dc      	b.n	7d9c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    7de2:	bf00      	nop
    7de4:	200028dc 	.word	0x200028dc

00007de8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7de8:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    7dea:	4b16      	ldr	r3, [pc, #88]	; (7e44 <SEGGER_RTT_WriteNoLock+0x5c>)
    7dec:	2418      	movs	r4, #24
    7dee:	fb00 4504 	mla	r5, r0, r4, r4
    7df2:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    7df4:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7df8:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    7dfa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    7dfc:	2c01      	cmp	r4, #1
    7dfe:	d00e      	beq.n	7e1e <SEGGER_RTT_WriteNoLock+0x36>
    7e00:	2c02      	cmp	r4, #2
    7e02:	d018      	beq.n	7e36 <SEGGER_RTT_WriteNoLock+0x4e>
    7e04:	b9e4      	cbnz	r4, 7e40 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    7e06:	4628      	mov	r0, r5
    7e08:	f003 fce1 	bl	b7ce <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    7e0c:	4286      	cmp	r6, r0
    7e0e:	d804      	bhi.n	7e1a <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    7e10:	4632      	mov	r2, r6
    7e12:	4628      	mov	r0, r5
    7e14:	f003 fce4 	bl	b7e0 <_WriteNoCheck>
    7e18:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    7e1a:	4620      	mov	r0, r4
    7e1c:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    7e1e:	4628      	mov	r0, r5
    7e20:	f003 fcd5 	bl	b7ce <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    7e24:	4286      	cmp	r6, r0
    7e26:	4634      	mov	r4, r6
    7e28:	bf28      	it	cs
    7e2a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    7e2c:	4622      	mov	r2, r4
    7e2e:	4628      	mov	r0, r5
    7e30:	f003 fcd6 	bl	b7e0 <_WriteNoCheck>
    break;
    7e34:	e7f1      	b.n	7e1a <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    7e36:	4628      	mov	r0, r5
}
    7e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    7e3c:	f003 bcec 	b.w	b818 <_WriteBlocking>
  switch (pRing->Flags) {
    7e40:	2400      	movs	r4, #0
  return Status;
    7e42:	e7ea      	b.n	7e1a <SEGGER_RTT_WriteNoLock+0x32>
    7e44:	200028dc 	.word	0x200028dc

00007e48 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    7e48:	4b03      	ldr	r3, [pc, #12]	; (7e58 <SEGGER_RTT_HasDataUp+0x10>)
    7e4a:	2218      	movs	r2, #24
    7e4c:	fb02 3300 	mla	r3, r2, r0, r3
    7e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    7e52:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    7e54:	1a80      	subs	r0, r0, r2
    7e56:	4770      	bx	lr
    7e58:	200028dc 	.word	0x200028dc

00007e5c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7e5c:	4b0e      	ldr	r3, [pc, #56]	; (7e98 <z_sys_init_run_level+0x3c>)
{
    7e5e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7e60:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7e64:	3001      	adds	r0, #1
    7e66:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    7e6a:	42a6      	cmp	r6, r4
    7e6c:	d800      	bhi.n	7e70 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    7e6e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    7e70:	e9d4 3500 	ldrd	r3, r5, [r4]
    7e74:	4628      	mov	r0, r5
    7e76:	4798      	blx	r3
		if (dev != NULL) {
    7e78:	b165      	cbz	r5, 7e94 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    7e7a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    7e7c:	b130      	cbz	r0, 7e8c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    7e7e:	2800      	cmp	r0, #0
    7e80:	bfb8      	it	lt
    7e82:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    7e84:	28ff      	cmp	r0, #255	; 0xff
    7e86:	bfa8      	it	ge
    7e88:	20ff      	movge	r0, #255	; 0xff
    7e8a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    7e8c:	785a      	ldrb	r2, [r3, #1]
    7e8e:	f042 0201 	orr.w	r2, r2, #1
    7e92:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7e94:	3408      	adds	r4, #8
    7e96:	e7e8      	b.n	7e6a <z_sys_init_run_level+0xe>
    7e98:	0000c430 	.word	0x0000c430

00007e9c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    7e9c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    7e9e:	4605      	mov	r5, r0
    7ea0:	b910      	cbnz	r0, 7ea8 <z_impl_device_get_binding+0xc>
		return NULL;
    7ea2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    7ea4:	4620      	mov	r0, r4
    7ea6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    7ea8:	7803      	ldrb	r3, [r0, #0]
    7eaa:	2b00      	cmp	r3, #0
    7eac:	d0f9      	beq.n	7ea2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    7eae:	4c0e      	ldr	r4, [pc, #56]	; (7ee8 <z_impl_device_get_binding+0x4c>)
    7eb0:	4e0e      	ldr	r6, [pc, #56]	; (7eec <z_impl_device_get_binding+0x50>)
    7eb2:	42b4      	cmp	r4, r6
    7eb4:	d108      	bne.n	7ec8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    7eb6:	4c0c      	ldr	r4, [pc, #48]	; (7ee8 <z_impl_device_get_binding+0x4c>)
    7eb8:	42b4      	cmp	r4, r6
    7eba:	d0f2      	beq.n	7ea2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7ebc:	4620      	mov	r0, r4
    7ebe:	f003 fcdc 	bl	b87a <z_device_ready>
    7ec2:	b950      	cbnz	r0, 7eda <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    7ec4:	3418      	adds	r4, #24
    7ec6:	e7f7      	b.n	7eb8 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    7ec8:	4620      	mov	r0, r4
    7eca:	f003 fcd6 	bl	b87a <z_device_ready>
    7ece:	b110      	cbz	r0, 7ed6 <z_impl_device_get_binding+0x3a>
    7ed0:	6823      	ldr	r3, [r4, #0]
    7ed2:	42ab      	cmp	r3, r5
    7ed4:	d0e6      	beq.n	7ea4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    7ed6:	3418      	adds	r4, #24
    7ed8:	e7eb      	b.n	7eb2 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7eda:	6821      	ldr	r1, [r4, #0]
    7edc:	4628      	mov	r0, r5
    7ede:	f002 fe68 	bl	abb2 <strcmp>
    7ee2:	2800      	cmp	r0, #0
    7ee4:	d1ee      	bne.n	7ec4 <z_impl_device_get_binding+0x28>
    7ee6:	e7dd      	b.n	7ea4 <z_impl_device_get_binding+0x8>
    7ee8:	0000bc74 	.word	0x0000bc74
    7eec:	0000bd64 	.word	0x0000bd64

00007ef0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    7ef0:	b510      	push	{r4, lr}
    7ef2:	4604      	mov	r4, r0
	z_impl_log_panic();
    7ef4:	f7fa fbb8 	bl	2668 <z_impl_log_panic>
    7ef8:	4b06      	ldr	r3, [pc, #24]	; (7f14 <k_sys_fatal_error_handler+0x24>)
    7efa:	4907      	ldr	r1, [pc, #28]	; (7f18 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    7efc:	4807      	ldr	r0, [pc, #28]	; (7f1c <k_sys_fatal_error_handler+0x2c>)
    7efe:	1ac9      	subs	r1, r1, r3
    7f00:	08c9      	lsrs	r1, r1, #3
    7f02:	0189      	lsls	r1, r1, #6
    7f04:	f041 0101 	orr.w	r1, r1, #1
    7f08:	f001 ff04 	bl	9d14 <log_0>
	arch_system_halt(reason);
    7f0c:	4620      	mov	r0, r4
    7f0e:	f003 fcc0 	bl	b892 <arch_system_halt>
    7f12:	bf00      	nop
    7f14:	0000bee4 	.word	0x0000bee4
    7f18:	0000bf14 	.word	0x0000bf14
    7f1c:	0000d7f2 	.word	0x0000d7f2

00007f20 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7f20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7f24:	4606      	mov	r6, r0
    7f26:	460f      	mov	r7, r1
	__asm__ volatile(
    7f28:	f04f 0320 	mov.w	r3, #32
    7f2c:	f3ef 8811 	mrs	r8, BASEPRI
    7f30:	f383 8811 	msr	BASEPRI, r3
    7f34:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    7f38:	f000 fe0e 	bl	8b58 <z_impl_k_current_get>
    7f3c:	4c1f      	ldr	r4, [pc, #124]	; (7fbc <z_fatal_error+0x9c>)
    7f3e:	4b20      	ldr	r3, [pc, #128]	; (7fc0 <z_fatal_error+0xa0>)
    7f40:	1ae4      	subs	r4, r4, r3
    7f42:	2e04      	cmp	r6, #4
    7f44:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    7f48:	bf96      	itet	ls
    7f4a:	4a1e      	ldrls	r2, [pc, #120]	; (7fc4 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7f4c:	4a1e      	ldrhi	r2, [pc, #120]	; (7fc8 <z_fatal_error+0xa8>)
    7f4e:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    7f52:	01a4      	lsls	r4, r4, #6
    7f54:	f044 0301 	orr.w	r3, r4, #1
    7f58:	4605      	mov	r5, r0
    7f5a:	f8ad 3000 	strh.w	r3, [sp]
    7f5e:	481b      	ldr	r0, [pc, #108]	; (7fcc <z_fatal_error+0xac>)
    7f60:	2300      	movs	r3, #0
    7f62:	4631      	mov	r1, r6
    7f64:	f001 ff10 	bl	9d88 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7f68:	b147      	cbz	r7, 7f7c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7f6a:	69fb      	ldr	r3, [r7, #28]
    7f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7f70:	b123      	cbz	r3, 7f7c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    7f72:	4817      	ldr	r0, [pc, #92]	; (7fd0 <z_fatal_error+0xb0>)
    7f74:	f044 0101 	orr.w	r1, r4, #1
    7f78:	f001 fecc 	bl	9d14 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7f7c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7f80:	b12d      	cbz	r5, 7f8e <z_fatal_error+0x6e>
    7f82:	4628      	mov	r0, r5
    7f84:	f003 fcdb 	bl	b93e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    7f88:	b108      	cbz	r0, 7f8e <z_fatal_error+0x6e>
    7f8a:	7803      	ldrb	r3, [r0, #0]
    7f8c:	b903      	cbnz	r3, 7f90 <z_fatal_error+0x70>
		thread_name = "unknown";
    7f8e:	4811      	ldr	r0, [pc, #68]	; (7fd4 <z_fatal_error+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    7f90:	f7fa fa18 	bl	23c4 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
    7f94:	4623      	mov	r3, r4
    7f96:	4602      	mov	r2, r0
    7f98:	4629      	mov	r1, r5
    7f9a:	480f      	ldr	r0, [pc, #60]	; (7fd8 <z_fatal_error+0xb8>)
    7f9c:	f001 fedb 	bl	9d56 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7fa0:	4639      	mov	r1, r7
    7fa2:	4630      	mov	r0, r6
    7fa4:	f7ff ffa4 	bl	7ef0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    7fa8:	f388 8811 	msr	BASEPRI, r8
    7fac:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7fb0:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7fb2:	b002      	add	sp, #8
    7fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7fb8:	f7fc bbfe 	b.w	47b8 <z_impl_k_thread_abort>
    7fbc:	0000bf14 	.word	0x0000bf14
    7fc0:	0000bee4 	.word	0x0000bee4
    7fc4:	0000c448 	.word	0x0000c448
    7fc8:	0000d801 	.word	0x0000d801
    7fcc:	0000d817 	.word	0x0000d817
    7fd0:	0000d83f 	.word	0x0000d83f
    7fd4:	0000d80f 	.word	0x0000d80f
    7fd8:	0000d860 	.word	0x0000d860

00007fdc <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    7fdc:	4802      	ldr	r0, [pc, #8]	; (7fe8 <z_bss_zero+0xc>)
    7fde:	4a03      	ldr	r2, [pc, #12]	; (7fec <z_bss_zero+0x10>)
    7fe0:	2100      	movs	r1, #0
    7fe2:	1a12      	subs	r2, r2, r0
    7fe4:	f002 be25 	b.w	ac32 <memset>
    7fe8:	20000220 	.word	0x20000220
    7fec:	2000356c 	.word	0x2000356c

00007ff0 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7ff0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    7ff2:	4b0a      	ldr	r3, [pc, #40]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7ff4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7ff6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    7ff8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7ffa:	f7ff ff2f 	bl	7e5c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7ffe:	f000 ffd1 	bl	8fa4 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    8002:	2003      	movs	r0, #3
    8004:	f7ff ff2a 	bl	7e5c <z_sys_init_run_level>

	z_init_static_threads();
    8008:	f000 f942 	bl	8290 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    800c:	f7f8 fb26 	bl	65c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8010:	4a03      	ldr	r2, [pc, #12]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    8012:	7b13      	ldrb	r3, [r2, #12]
    8014:	f023 0301 	bic.w	r3, r3, #1
    8018:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    801a:	bd08      	pop	{r3, pc}
    801c:	200033ac 	.word	0x200033ac
    8020:	20000830 	.word	0x20000830

00008024 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    8024:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    8028:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    802a:	f7fa f90d 	bl	2248 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    802e:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8110 <z_cstart+0xec>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    8032:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    8036:	4d37      	ldr	r5, [pc, #220]	; (8114 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    8038:	4e37      	ldr	r6, [pc, #220]	; (8118 <z_cstart+0xf4>)
    803a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    803c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 811c <z_cstart+0xf8>
	z_setup_new_thread(thread, stack,
    8040:	4f37      	ldr	r7, [pc, #220]	; (8120 <z_cstart+0xfc>)
    8042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8046:	2400      	movs	r4, #0
    8048:	616b      	str	r3, [r5, #20]
    804a:	23e0      	movs	r3, #224	; 0xe0
    804c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    8050:	77ec      	strb	r4, [r5, #31]
    8052:	762c      	strb	r4, [r5, #24]
    8054:	766c      	strb	r4, [r5, #25]
    8056:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8058:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    805a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    805e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8060:	f7fc fb44 	bl	46ec <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8064:	f7fc f87c 	bl	4160 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    8068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    806c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    806e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8070:	f7fc fc40 	bl	48f4 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    8074:	4d2b      	ldr	r5, [pc, #172]	; (8124 <z_cstart+0x100>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    8076:	f7fc fbb1 	bl	47dc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    807a:	f240 1301 	movw	r3, #257	; 0x101
    807e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    8082:	ab06      	add	r3, sp, #24
    8084:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    8086:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    808a:	f003 fbf5 	bl	b878 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    808e:	4620      	mov	r0, r4
    8090:	f7ff fee4 	bl	7e5c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8094:	2001      	movs	r0, #1
    8096:	f7ff fee1 	bl	7e5c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    809a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    809e:	f000 fcad 	bl	89fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    80a2:	4b21      	ldr	r3, [pc, #132]	; (8128 <z_cstart+0x104>)
	_kernel.ready_q.cache = &z_main_thread;
    80a4:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    80a6:	4921      	ldr	r1, [pc, #132]	; (812c <z_cstart+0x108>)
    80a8:	9305      	str	r3, [sp, #20]
    80aa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    80ae:	4653      	mov	r3, sl
    80b0:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    80b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    80b8:	9400      	str	r4, [sp, #0]
    80ba:	4630      	mov	r0, r6
    80bc:	f000 f88c 	bl	81d8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    80c0:	7b73      	ldrb	r3, [r6, #13]
    80c2:	4680      	mov	r8, r0
    80c4:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    80c8:	4630      	mov	r0, r6
    80ca:	7373      	strb	r3, [r6, #13]
    80cc:	f003 fcc3 	bl	ba56 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    80d0:	230f      	movs	r3, #15
    80d2:	e9cd 4302 	strd	r4, r3, [sp, #8]
    80d6:	4916      	ldr	r1, [pc, #88]	; (8130 <z_cstart+0x10c>)
    80d8:	4b16      	ldr	r3, [pc, #88]	; (8134 <z_cstart+0x110>)
    80da:	f44f 72a0 	mov.w	r2, #320	; 0x140
    80de:	e9cd b404 	strd	fp, r4, [sp, #16]
    80e2:	e9cd 5400 	strd	r5, r4, [sp]
    80e6:	4638      	mov	r0, r7
    80e8:	f000 f876 	bl	81d8 <z_setup_new_thread>
    80ec:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    80ee:	60ef      	str	r7, [r5, #12]
    80f0:	f023 0304 	bic.w	r3, r3, #4
    80f4:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    80f6:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    80fa:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    80fe:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    8100:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8104:	4652      	mov	r2, sl
    8106:	4641      	mov	r1, r8
    8108:	4630      	mov	r0, r6
    810a:	f7fc f817 	bl	413c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    810e:	bf00      	nop
    8110:	200069b0 	.word	0x200069b0
    8114:	e000ed00 	.word	0xe000ed00
    8118:	20000830 	.word	0x20000830
    811c:	00007ff1 	.word	0x00007ff1
    8120:	200007b0 	.word	0x200007b0
    8124:	20002984 	.word	0x20002984
    8128:	0000d8c2 	.word	0x0000d8c2
    812c:	20003870 	.word	0x20003870
    8130:	20006070 	.word	0x20006070
    8134:	00008349 	.word	0x00008349

00008138 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    8138:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    813a:	4b0e      	ldr	r3, [pc, #56]	; (8174 <init_mem_slab_module+0x3c>)
    813c:	4c0e      	ldr	r4, [pc, #56]	; (8178 <init_mem_slab_module+0x40>)
    813e:	42a3      	cmp	r3, r4
    8140:	d301      	bcc.n	8146 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    8142:	2000      	movs	r0, #0
	return rc;
}
    8144:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8146:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    814a:	ea41 0200 	orr.w	r2, r1, r0
    814e:	f012 0203 	ands.w	r2, r2, #3
    8152:	d10b      	bne.n	816c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    8154:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    8156:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8158:	42aa      	cmp	r2, r5
    815a:	d101      	bne.n	8160 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    815c:	331c      	adds	r3, #28
    815e:	e7ee      	b.n	813e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    8160:	695e      	ldr	r6, [r3, #20]
    8162:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8164:	3201      	adds	r2, #1
		slab->free_list = p;
    8166:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    8168:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    816a:	e7f5      	b.n	8158 <init_mem_slab_module+0x20>
	return rc;
    816c:	f06f 0015 	mvn.w	r0, #21
    8170:	e7e8      	b.n	8144 <init_mem_slab_module+0xc>
    8172:	bf00      	nop
    8174:	2000019c 	.word	0x2000019c
    8178:	2000019c 	.word	0x2000019c

0000817c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    817c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    817e:	460c      	mov	r4, r1
	__asm__ volatile(
    8180:	f04f 0520 	mov.w	r5, #32
    8184:	f3ef 8111 	mrs	r1, BASEPRI
    8188:	f385 8811 	msr	BASEPRI, r5
    818c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    8190:	6945      	ldr	r5, [r0, #20]
    8192:	b15d      	cbz	r5, 81ac <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    8194:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    8196:	682b      	ldr	r3, [r5, #0]
    8198:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    819a:	6983      	ldr	r3, [r0, #24]
    819c:	3301      	adds	r3, #1
    819e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    81a0:	2000      	movs	r0, #0
	__asm__ volatile(
    81a2:	f381 8811 	msr	BASEPRI, r1
    81a6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    81aa:	e011      	b.n	81d0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    81ac:	ea52 0c03 	orrs.w	ip, r2, r3
    81b0:	d103      	bne.n	81ba <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    81b2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    81b4:	f06f 000b 	mvn.w	r0, #11
    81b8:	e7f3      	b.n	81a2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    81ba:	e9cd 2300 	strd	r2, r3, [sp]
    81be:	4602      	mov	r2, r0
    81c0:	3008      	adds	r0, #8
    81c2:	f000 faa3 	bl	870c <z_pend_curr>
		if (result == 0) {
    81c6:	b918      	cbnz	r0, 81d0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    81c8:	4b02      	ldr	r3, [pc, #8]	; (81d4 <k_mem_slab_alloc+0x58>)
    81ca:	689b      	ldr	r3, [r3, #8]
    81cc:	695b      	ldr	r3, [r3, #20]
    81ce:	6023      	str	r3, [r4, #0]
}
    81d0:	b003      	add	sp, #12
    81d2:	bd30      	pop	{r4, r5, pc}
    81d4:	20002984 	.word	0x20002984

000081d8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    81d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    81dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    81de:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    81e0:	2604      	movs	r6, #4
    81e2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    81e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    81e6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    81e8:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    81ec:	1dd6      	adds	r6, r2, #7
    81ee:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    81f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    81f4:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    81f6:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    81fa:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    81fe:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    8202:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    8204:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    8206:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8208:	9202      	str	r2, [sp, #8]
    820a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    820c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    820e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8214:	9200      	str	r2, [sp, #0]
    8216:	4642      	mov	r2, r8
{
    8218:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    821a:	f7fb ff73 	bl	4104 <arch_new_thread>
	if (!_current) {
    821e:	4b05      	ldr	r3, [pc, #20]	; (8234 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    8220:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    8222:	689b      	ldr	r3, [r3, #8]
    8224:	b103      	cbz	r3, 8228 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    8226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    8228:	6723      	str	r3, [r4, #112]	; 0x70
}
    822a:	4640      	mov	r0, r8
    822c:	b004      	add	sp, #16
    822e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8232:	bf00      	nop
    8234:	20002984 	.word	0x20002984

00008238 <z_impl_k_thread_create>:
{
    8238:	b5f0      	push	{r4, r5, r6, r7, lr}
    823a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    823c:	2700      	movs	r7, #0
    823e:	9705      	str	r7, [sp, #20]
    8240:	9f10      	ldr	r7, [sp, #64]	; 0x40
    8242:	9704      	str	r7, [sp, #16]
    8244:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    8246:	9703      	str	r7, [sp, #12]
    8248:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    824a:	9702      	str	r7, [sp, #8]
{
    824c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8250:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    8252:	9701      	str	r7, [sp, #4]
    8254:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    8256:	9700      	str	r7, [sp, #0]
{
    8258:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    825a:	f7ff ffbd 	bl	81d8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    825e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    8262:	bf08      	it	eq
    8264:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    8268:	d005      	beq.n	8276 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    826a:	ea55 0306 	orrs.w	r3, r5, r6
    826e:	d105      	bne.n	827c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    8270:	4620      	mov	r0, r4
    8272:	f000 fb5d 	bl	8930 <z_sched_start>
}
    8276:	4620      	mov	r0, r4
    8278:	b007      	add	sp, #28
    827a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    827c:	4903      	ldr	r1, [pc, #12]	; (828c <z_impl_k_thread_create+0x54>)
    827e:	4632      	mov	r2, r6
    8280:	462b      	mov	r3, r5
    8282:	f104 0018 	add.w	r0, r4, #24
    8286:	f000 fd25 	bl	8cd4 <z_add_timeout>
    828a:	e7f4      	b.n	8276 <z_impl_k_thread_create+0x3e>
    828c:	0000ba77 	.word	0x0000ba77

00008290 <z_init_static_threads>:
{
    8290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8294:	4c29      	ldr	r4, [pc, #164]	; (833c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    8296:	4d2a      	ldr	r5, [pc, #168]	; (8340 <z_init_static_threads+0xb0>)
{
    8298:	b087      	sub	sp, #28
    829a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    829c:	42ae      	cmp	r6, r5
    829e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    82a2:	d30f      	bcc.n	82c4 <z_init_static_threads+0x34>
	k_sched_lock();
    82a4:	f000 f9c0 	bl	8628 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    82a8:	4c24      	ldr	r4, [pc, #144]	; (833c <z_init_static_threads+0xac>)
    82aa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8344 <z_init_static_threads+0xb4>
    82ae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    82b2:	f240 37e7 	movw	r7, #999	; 0x3e7
    82b6:	42ac      	cmp	r4, r5
    82b8:	d320      	bcc.n	82fc <z_init_static_threads+0x6c>
}
    82ba:	b007      	add	sp, #28
    82bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    82c0:	f000 ba6a 	b.w	8798 <k_sched_unlock>
		z_setup_new_thread(
    82c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    82c8:	9305      	str	r3, [sp, #20]
    82ca:	f854 3c10 	ldr.w	r3, [r4, #-16]
    82ce:	9304      	str	r3, [sp, #16]
    82d0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    82d4:	9303      	str	r3, [sp, #12]
    82d6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    82da:	9302      	str	r3, [sp, #8]
    82dc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    82e0:	9301      	str	r3, [sp, #4]
    82e2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    82e6:	9300      	str	r3, [sp, #0]
    82e8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    82ec:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    82f0:	f7ff ff72 	bl	81d8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    82f4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    82f8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    82fa:	e7ce      	b.n	829a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    82fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    82fe:	1c5a      	adds	r2, r3, #1
    8300:	d00d      	beq.n	831e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    8302:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8306:	2100      	movs	r1, #0
    8308:	4638      	mov	r0, r7
    830a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    830e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    8312:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8316:	d104      	bne.n	8322 <z_init_static_threads+0x92>
	z_sched_start(thread);
    8318:	4640      	mov	r0, r8
    831a:	f000 fb09 	bl	8930 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    831e:	3430      	adds	r4, #48	; 0x30
    8320:	e7c9      	b.n	82b6 <z_init_static_threads+0x26>
    8322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8326:	2300      	movs	r3, #0
    8328:	f7f7 ff3a 	bl	1a0 <__aeabi_uldivmod>
    832c:	4602      	mov	r2, r0
    832e:	460b      	mov	r3, r1
    8330:	f108 0018 	add.w	r0, r8, #24
    8334:	4649      	mov	r1, r9
    8336:	f000 fccd 	bl	8cd4 <z_add_timeout>
    833a:	e7f0      	b.n	831e <z_init_static_threads+0x8e>
    833c:	2000019c 	.word	0x2000019c
    8340:	2000019c 	.word	0x2000019c
    8344:	0000ba77 	.word	0x0000ba77

00008348 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8348:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    834a:	4c09      	ldr	r4, [pc, #36]	; (8370 <idle+0x28>)
	__asm__ volatile(
    834c:	f04f 0220 	mov.w	r2, #32
    8350:	f3ef 8311 	mrs	r3, BASEPRI
    8354:	f382 8811 	msr	BASEPRI, r2
    8358:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    835c:	f003 fbf0 	bl	bb40 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    8360:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    8362:	f7fa fd43 	bl	2dec <pm_system_suspend>
    8366:	2800      	cmp	r0, #0
    8368:	d1f0      	bne.n	834c <idle+0x4>
	arch_cpu_idle();
    836a:	f7fb feff 	bl	416c <arch_cpu_idle>
}
    836e:	e7ed      	b.n	834c <idle+0x4>
    8370:	20002984 	.word	0x20002984

00008374 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8374:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8378:	4604      	mov	r4, r0
    837a:	4617      	mov	r7, r2
    837c:	461e      	mov	r6, r3
    837e:	f04f 0320 	mov.w	r3, #32
    8382:	f3ef 8811 	mrs	r8, BASEPRI
    8386:	f383 8811 	msr	BASEPRI, r3
    838a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    838e:	68c3      	ldr	r3, [r0, #12]
    8390:	4a32      	ldr	r2, [pc, #200]	; (845c <z_impl_k_mutex_lock+0xe8>)
    8392:	b16b      	cbz	r3, 83b0 <z_impl_k_mutex_lock+0x3c>
    8394:	6880      	ldr	r0, [r0, #8]
    8396:	6891      	ldr	r1, [r2, #8]
    8398:	4288      	cmp	r0, r1
    839a:	d019      	beq.n	83d0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    839c:	ea57 0306 	orrs.w	r3, r7, r6
    83a0:	d118      	bne.n	83d4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    83a2:	f388 8811 	msr	BASEPRI, r8
    83a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    83aa:	f06f 000f 	mvn.w	r0, #15
    83ae:	e00c      	b.n	83ca <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    83b0:	6891      	ldr	r1, [r2, #8]
    83b2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    83b6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    83b8:	3301      	adds	r3, #1
    83ba:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    83bc:	6893      	ldr	r3, [r2, #8]
    83be:	60a3      	str	r3, [r4, #8]
    83c0:	f388 8811 	msr	BASEPRI, r8
    83c4:	f3bf 8f6f 	isb	sy
		return 0;
    83c8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    83ca:	b002      	add	sp, #8
    83cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    83d0:	6921      	ldr	r1, [r4, #16]
    83d2:	e7f0      	b.n	83b6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    83d4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    83d8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    83dc:	4299      	cmp	r1, r3
    83de:	bfa8      	it	ge
    83e0:	4619      	movge	r1, r3
    83e2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    83e6:	4291      	cmp	r1, r2
    83e8:	bfb8      	it	lt
    83ea:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    83ec:	428b      	cmp	r3, r1
    83ee:	dd2e      	ble.n	844e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    83f0:	f003 faae 	bl	b950 <adjust_owner_prio.isra.0>
    83f4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    83f6:	e9cd 7600 	strd	r7, r6, [sp]
    83fa:	4819      	ldr	r0, [pc, #100]	; (8460 <z_impl_k_mutex_lock+0xec>)
    83fc:	4622      	mov	r2, r4
    83fe:	4641      	mov	r1, r8
    8400:	f000 f984 	bl	870c <z_pend_curr>
	if (got_mutex == 0) {
    8404:	2800      	cmp	r0, #0
    8406:	d0e0      	beq.n	83ca <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    8408:	f04f 0320 	mov.w	r3, #32
    840c:	f3ef 8611 	mrs	r6, BASEPRI
    8410:	f383 8811 	msr	BASEPRI, r3
    8414:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8418:	6823      	ldr	r3, [r4, #0]
    841a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    841c:	429c      	cmp	r4, r3
    841e:	d00a      	beq.n	8436 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8420:	b14b      	cbz	r3, 8436 <z_impl_k_mutex_lock+0xc2>
    8422:	f993 300e 	ldrsb.w	r3, [r3, #14]
    8426:	4299      	cmp	r1, r3
    8428:	bfa8      	it	ge
    842a:	4619      	movge	r1, r3
    842c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    8430:	4299      	cmp	r1, r3
    8432:	bfb8      	it	lt
    8434:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    8436:	68a0      	ldr	r0, [r4, #8]
    8438:	f003 fa8a 	bl	b950 <adjust_owner_prio.isra.0>
    843c:	b900      	cbnz	r0, 8440 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    843e:	b145      	cbz	r5, 8452 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    8440:	4807      	ldr	r0, [pc, #28]	; (8460 <z_impl_k_mutex_lock+0xec>)
    8442:	4631      	mov	r1, r6
    8444:	f000 f8de 	bl	8604 <z_reschedule>
	return -EAGAIN;
    8448:	f06f 000a 	mvn.w	r0, #10
    844c:	e7bd      	b.n	83ca <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    844e:	2500      	movs	r5, #0
    8450:	e7d1      	b.n	83f6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    8452:	f386 8811 	msr	BASEPRI, r6
    8456:	f3bf 8f6f 	isb	sy
    845a:	e7f5      	b.n	8448 <z_impl_k_mutex_lock+0xd4>
    845c:	20002984 	.word	0x20002984
    8460:	200033ad 	.word	0x200033ad

00008464 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    8464:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    8466:	6883      	ldr	r3, [r0, #8]
{
    8468:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    846a:	2b00      	cmp	r3, #0
    846c:	d032      	beq.n	84d4 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    846e:	4a1c      	ldr	r2, [pc, #112]	; (84e0 <z_impl_k_mutex_unlock+0x7c>)
    8470:	6892      	ldr	r2, [r2, #8]
    8472:	4293      	cmp	r3, r2
    8474:	d131      	bne.n	84da <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    8476:	7bda      	ldrb	r2, [r3, #15]
    8478:	3a01      	subs	r2, #1
    847a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    847c:	68c3      	ldr	r3, [r0, #12]
    847e:	2b01      	cmp	r3, #1
    8480:	d905      	bls.n	848e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    8482:	3b01      	subs	r3, #1
    8484:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    8486:	f000 f987 	bl	8798 <k_sched_unlock>

	return 0;
    848a:	2000      	movs	r0, #0
}
    848c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    848e:	f04f 0320 	mov.w	r3, #32
    8492:	f3ef 8511 	mrs	r5, BASEPRI
    8496:	f383 8811 	msr	BASEPRI, r3
    849a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    849e:	6901      	ldr	r1, [r0, #16]
    84a0:	6880      	ldr	r0, [r0, #8]
    84a2:	f003 fa55 	bl	b950 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    84a6:	4620      	mov	r0, r4
    84a8:	f003 fb1c 	bl	bae4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    84ac:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    84ae:	b158      	cbz	r0, 84c8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    84b0:	f990 200e 	ldrsb.w	r2, [r0, #14]
    84b4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    84b6:	2200      	movs	r2, #0
    84b8:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    84ba:	f003 facc 	bl	ba56 <z_ready_thread>
		z_reschedule(&lock, key);
    84be:	4809      	ldr	r0, [pc, #36]	; (84e4 <z_impl_k_mutex_unlock+0x80>)
    84c0:	4629      	mov	r1, r5
    84c2:	f000 f89f 	bl	8604 <z_reschedule>
    84c6:	e7de      	b.n	8486 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    84c8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    84ca:	f385 8811 	msr	BASEPRI, r5
    84ce:	f3bf 8f6f 	isb	sy
    84d2:	e7d8      	b.n	8486 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    84d4:	f06f 0015 	mvn.w	r0, #21
    84d8:	e7d8      	b.n	848c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    84da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    84de:	e7d5      	b.n	848c <z_impl_k_mutex_unlock+0x28>
    84e0:	20002984 	.word	0x20002984
    84e4:	200033ad 	.word	0x200033ad

000084e8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    84e8:	b538      	push	{r3, r4, r5, lr}
    84ea:	4604      	mov	r4, r0
	__asm__ volatile(
    84ec:	f04f 0320 	mov.w	r3, #32
    84f0:	f3ef 8511 	mrs	r5, BASEPRI
    84f4:	f383 8811 	msr	BASEPRI, r3
    84f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    84fc:	f003 faf2 	bl	bae4 <z_unpend_first_thread>

	if (thread != NULL) {
    8500:	b148      	cbz	r0, 8516 <z_impl_k_sem_give+0x2e>
    8502:	2200      	movs	r2, #0
    8504:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8506:	f003 faa6 	bl	ba56 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    850a:	4629      	mov	r1, r5
    850c:	4805      	ldr	r0, [pc, #20]	; (8524 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    850e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    8512:	f000 b877 	b.w	8604 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8516:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    851a:	429a      	cmp	r2, r3
    851c:	bf18      	it	ne
    851e:	3301      	addne	r3, #1
    8520:	60a3      	str	r3, [r4, #8]
}
    8522:	e7f2      	b.n	850a <z_impl_k_sem_give+0x22>
    8524:	200033ad 	.word	0x200033ad

00008528 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8528:	b513      	push	{r0, r1, r4, lr}
    852a:	f04f 0420 	mov.w	r4, #32
    852e:	f3ef 8111 	mrs	r1, BASEPRI
    8532:	f384 8811 	msr	BASEPRI, r4
    8536:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    853a:	6884      	ldr	r4, [r0, #8]
    853c:	b144      	cbz	r4, 8550 <z_impl_k_sem_take+0x28>
		sem->count--;
    853e:	3c01      	subs	r4, #1
    8540:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    8542:	f381 8811 	msr	BASEPRI, r1
    8546:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    854a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    854c:	b002      	add	sp, #8
    854e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8550:	ea52 0403 	orrs.w	r4, r2, r3
    8554:	d106      	bne.n	8564 <z_impl_k_sem_take+0x3c>
    8556:	f381 8811 	msr	BASEPRI, r1
    855a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    855e:	f06f 000f 	mvn.w	r0, #15
    8562:	e7f3      	b.n	854c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8564:	e9cd 2300 	strd	r2, r3, [sp]
    8568:	4602      	mov	r2, r0
    856a:	4802      	ldr	r0, [pc, #8]	; (8574 <z_impl_k_sem_take+0x4c>)
    856c:	f000 f8ce 	bl	870c <z_pend_curr>
	return ret;
    8570:	e7ec      	b.n	854c <z_impl_k_sem_take+0x24>
    8572:	bf00      	nop
    8574:	200033ad 	.word	0x200033ad

00008578 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    8578:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    857a:	4c08      	ldr	r4, [pc, #32]	; (859c <z_reset_time_slice+0x24>)
    857c:	6823      	ldr	r3, [r4, #0]
    857e:	b15b      	cbz	r3, 8598 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    8580:	f7fa ff0c 	bl	339c <sys_clock_elapsed>
    8584:	4603      	mov	r3, r0
    8586:	6820      	ldr	r0, [r4, #0]
    8588:	4a05      	ldr	r2, [pc, #20]	; (85a0 <z_reset_time_slice+0x28>)
    858a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    858c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    8590:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    8592:	2100      	movs	r1, #0
    8594:	f003 bae4 	b.w	bb60 <z_set_timeout_expiry>
}
    8598:	bd10      	pop	{r4, pc}
    859a:	bf00      	nop
    859c:	200029bc 	.word	0x200029bc
    85a0:	20002984 	.word	0x20002984

000085a4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    85a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85a6:	4604      	mov	r4, r0
    85a8:	460d      	mov	r5, r1
	__asm__ volatile(
    85aa:	f04f 0320 	mov.w	r3, #32
    85ae:	f3ef 8611 	mrs	r6, BASEPRI
    85b2:	f383 8811 	msr	BASEPRI, r3
    85b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    85ba:	4b0f      	ldr	r3, [pc, #60]	; (85f8 <k_sched_time_slice_set+0x54>)
    85bc:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    85be:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    85c2:	f240 30e7 	movw	r0, #999	; 0x3e7
    85c6:	6119      	str	r1, [r3, #16]
    85c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    85cc:	2300      	movs	r3, #0
    85ce:	fbe4 0107 	umlal	r0, r1, r4, r7
    85d2:	f7f7 fde5 	bl	1a0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    85d6:	2c00      	cmp	r4, #0
    85d8:	4b08      	ldr	r3, [pc, #32]	; (85fc <k_sched_time_slice_set+0x58>)
    85da:	dc09      	bgt.n	85f0 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    85dc:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    85de:	4b08      	ldr	r3, [pc, #32]	; (8600 <k_sched_time_slice_set+0x5c>)
    85e0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    85e2:	f7ff ffc9 	bl	8578 <z_reset_time_slice>
	__asm__ volatile(
    85e6:	f386 8811 	msr	BASEPRI, r6
    85ea:	f3bf 8f6f 	isb	sy
	}
}
    85ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    85f0:	2802      	cmp	r0, #2
    85f2:	bfb8      	it	lt
    85f4:	2002      	movlt	r0, #2
    85f6:	e7f1      	b.n	85dc <k_sched_time_slice_set+0x38>
    85f8:	20002984 	.word	0x20002984
    85fc:	200029bc 	.word	0x200029bc
    8600:	200029b8 	.word	0x200029b8

00008604 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8604:	b949      	cbnz	r1, 861a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8606:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    860a:	b930      	cbnz	r0, 861a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    860c:	4b05      	ldr	r3, [pc, #20]	; (8624 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    860e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8610:	689b      	ldr	r3, [r3, #8]
    8612:	429a      	cmp	r2, r3
    8614:	d001      	beq.n	861a <z_reschedule+0x16>
	ret = arch_swap(key);
    8616:	f7fb bcdd 	b.w	3fd4 <arch_swap>
    861a:	f381 8811 	msr	BASEPRI, r1
    861e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    8622:	4770      	bx	lr
    8624:	20002984 	.word	0x20002984

00008628 <k_sched_lock>:
	__asm__ volatile(
    8628:	f04f 0320 	mov.w	r3, #32
    862c:	f3ef 8111 	mrs	r1, BASEPRI
    8630:	f383 8811 	msr	BASEPRI, r3
    8634:	f3bf 8f6f 	isb	sy
    8638:	4b04      	ldr	r3, [pc, #16]	; (864c <k_sched_lock+0x24>)
    863a:	689a      	ldr	r2, [r3, #8]
    863c:	7bd3      	ldrb	r3, [r2, #15]
    863e:	3b01      	subs	r3, #1
    8640:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    8642:	f381 8811 	msr	BASEPRI, r1
    8646:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    864a:	4770      	bx	lr
    864c:	20002984 	.word	0x20002984

00008650 <update_cache>:
{
    8650:	b538      	push	{r3, r4, r5, lr}
    8652:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    8654:	480c      	ldr	r0, [pc, #48]	; (8688 <update_cache+0x38>)
    8656:	4d0d      	ldr	r5, [pc, #52]	; (868c <update_cache+0x3c>)
    8658:	f003 f9cd 	bl	b9f6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    865c:	4604      	mov	r4, r0
    865e:	b900      	cbnz	r0, 8662 <update_cache+0x12>
    8660:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    8662:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    8664:	b94a      	cbnz	r2, 867a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    8666:	7b5a      	ldrb	r2, [r3, #13]
    8668:	06d2      	lsls	r2, r2, #27
    866a:	d106      	bne.n	867a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    866c:	69a2      	ldr	r2, [r4, #24]
    866e:	b922      	cbnz	r2, 867a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    8670:	89da      	ldrh	r2, [r3, #14]
    8672:	2a7f      	cmp	r2, #127	; 0x7f
    8674:	d901      	bls.n	867a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    8676:	626b      	str	r3, [r5, #36]	; 0x24
}
    8678:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    867a:	429c      	cmp	r4, r3
    867c:	d001      	beq.n	8682 <update_cache+0x32>
			z_reset_time_slice();
    867e:	f7ff ff7b 	bl	8578 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    8682:	626c      	str	r4, [r5, #36]	; 0x24
}
    8684:	e7f8      	b.n	8678 <update_cache+0x28>
    8686:	bf00      	nop
    8688:	200029ac 	.word	0x200029ac
    868c:	20002984 	.word	0x20002984

00008690 <unready_thread>:
{
    8690:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    8692:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8696:	7b43      	ldrb	r3, [r0, #13]
    8698:	2a00      	cmp	r2, #0
{
    869a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    869c:	da04      	bge.n	86a8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    869e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    86a2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    86a4:	f003 f96f 	bl	b986 <sys_dlist_remove>
	update_cache(thread == _current);
    86a8:	4b04      	ldr	r3, [pc, #16]	; (86bc <unready_thread+0x2c>)
    86aa:	6898      	ldr	r0, [r3, #8]
    86ac:	1a43      	subs	r3, r0, r1
    86ae:	4258      	negs	r0, r3
    86b0:	4158      	adcs	r0, r3
}
    86b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    86b6:	f7ff bfcb 	b.w	8650 <update_cache>
    86ba:	bf00      	nop
    86bc:	20002984 	.word	0x20002984

000086c0 <pend>:
{
    86c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86c4:	4606      	mov	r6, r0
    86c6:	4615      	mov	r5, r2
    86c8:	461c      	mov	r4, r3
	__asm__ volatile(
    86ca:	f04f 0320 	mov.w	r3, #32
    86ce:	f3ef 8711 	mrs	r7, BASEPRI
    86d2:	f383 8811 	msr	BASEPRI, r3
    86d6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    86da:	f003 f992 	bl	ba02 <add_to_waitq_locked>
	__asm__ volatile(
    86de:	f387 8811 	msr	BASEPRI, r7
    86e2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    86e6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    86ea:	bf08      	it	eq
    86ec:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    86f0:	d008      	beq.n	8704 <pend+0x44>
    86f2:	462a      	mov	r2, r5
    86f4:	4623      	mov	r3, r4
    86f6:	f106 0018 	add.w	r0, r6, #24
    86fa:	4903      	ldr	r1, [pc, #12]	; (8708 <pend+0x48>)
}
    86fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8700:	f000 bae8 	b.w	8cd4 <z_add_timeout>
    8704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8708:	0000ba77 	.word	0x0000ba77

0000870c <z_pend_curr>:
{
    870c:	b510      	push	{r4, lr}
	pending_current = _current;
    870e:	4b07      	ldr	r3, [pc, #28]	; (872c <z_pend_curr+0x20>)
    8710:	6898      	ldr	r0, [r3, #8]
    8712:	4b07      	ldr	r3, [pc, #28]	; (8730 <z_pend_curr+0x24>)
{
    8714:	460c      	mov	r4, r1
	pending_current = _current;
    8716:	6018      	str	r0, [r3, #0]
{
    8718:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    871a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    871e:	f7ff ffcf 	bl	86c0 <pend>
    8722:	4620      	mov	r0, r4
}
    8724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8728:	f7fb bc54 	b.w	3fd4 <arch_swap>
    872c:	20002984 	.word	0x20002984
    8730:	200029b4 	.word	0x200029b4

00008734 <z_impl_k_thread_suspend>:
{
    8734:	b570      	push	{r4, r5, r6, lr}
    8736:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8738:	3018      	adds	r0, #24
    873a:	f003 f9eb 	bl	bb14 <z_abort_timeout>
	__asm__ volatile(
    873e:	f04f 0320 	mov.w	r3, #32
    8742:	f3ef 8611 	mrs	r6, BASEPRI
    8746:	f383 8811 	msr	BASEPRI, r3
    874a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    874e:	f994 200d 	ldrsb.w	r2, [r4, #13]
    8752:	7b63      	ldrb	r3, [r4, #13]
    8754:	2a00      	cmp	r2, #0
    8756:	da05      	bge.n	8764 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    875c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    875e:	4620      	mov	r0, r4
    8760:	f003 f911 	bl	b986 <sys_dlist_remove>
		update_cache(thread == _current);
    8764:	4d0b      	ldr	r5, [pc, #44]	; (8794 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8766:	7b63      	ldrb	r3, [r4, #13]
    8768:	68a8      	ldr	r0, [r5, #8]
    876a:	f043 0310 	orr.w	r3, r3, #16
    876e:	7363      	strb	r3, [r4, #13]
    8770:	1b03      	subs	r3, r0, r4
    8772:	4258      	negs	r0, r3
    8774:	4158      	adcs	r0, r3
    8776:	f7ff ff6b 	bl	8650 <update_cache>
	__asm__ volatile(
    877a:	f386 8811 	msr	BASEPRI, r6
    877e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8782:	68ab      	ldr	r3, [r5, #8]
    8784:	42a3      	cmp	r3, r4
    8786:	d103      	bne.n	8790 <z_impl_k_thread_suspend+0x5c>
}
    8788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    878c:	f003 b929 	b.w	b9e2 <z_reschedule_unlocked>
}
    8790:	bd70      	pop	{r4, r5, r6, pc}
    8792:	bf00      	nop
    8794:	20002984 	.word	0x20002984

00008798 <k_sched_unlock>:
{
    8798:	b510      	push	{r4, lr}
	__asm__ volatile(
    879a:	f04f 0320 	mov.w	r3, #32
    879e:	f3ef 8411 	mrs	r4, BASEPRI
    87a2:	f383 8811 	msr	BASEPRI, r3
    87a6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    87aa:	4b08      	ldr	r3, [pc, #32]	; (87cc <k_sched_unlock+0x34>)
    87ac:	689a      	ldr	r2, [r3, #8]
    87ae:	7bd3      	ldrb	r3, [r2, #15]
    87b0:	3301      	adds	r3, #1
    87b2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    87b4:	2000      	movs	r0, #0
    87b6:	f7ff ff4b 	bl	8650 <update_cache>
	__asm__ volatile(
    87ba:	f384 8811 	msr	BASEPRI, r4
    87be:	f3bf 8f6f 	isb	sy
}
    87c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    87c6:	f003 b90c 	b.w	b9e2 <z_reschedule_unlocked>
    87ca:	bf00      	nop
    87cc:	20002984 	.word	0x20002984

000087d0 <move_thread_to_end_of_prio_q>:
{
    87d0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    87d2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    87d6:	7b43      	ldrb	r3, [r0, #13]
    87d8:	2a00      	cmp	r2, #0
{
    87da:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    87dc:	da04      	bge.n	87e8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    87de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    87e2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    87e4:	f003 f8cf 	bl	b986 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    87e8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    87ea:	4a15      	ldr	r2, [pc, #84]	; (8840 <move_thread_to_end_of_prio_q+0x70>)
    87ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    87f0:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    87f2:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    87f6:	f102 0528 	add.w	r5, r2, #40	; 0x28
    87fa:	42ab      	cmp	r3, r5
    87fc:	d01b      	beq.n	8836 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    87fe:	b1d3      	cbz	r3, 8836 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    8800:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    8804:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    8808:	4286      	cmp	r6, r0
    880a:	d00f      	beq.n	882c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    880c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    880e:	2800      	cmp	r0, #0
    8810:	dd0c      	ble.n	882c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    8812:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    8814:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    8818:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    881a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    881c:	6890      	ldr	r0, [r2, #8]
    881e:	1a43      	subs	r3, r0, r1
    8820:	4258      	negs	r0, r3
}
    8822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    8826:	4158      	adcs	r0, r3
    8828:	f7ff bf12 	b.w	8650 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    882c:	42a3      	cmp	r3, r4
    882e:	d002      	beq.n	8836 <move_thread_to_end_of_prio_q+0x66>
    8830:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8832:	2b00      	cmp	r3, #0
    8834:	d1e6      	bne.n	8804 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    8836:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    883a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    883c:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    883e:	e7ed      	b.n	881c <move_thread_to_end_of_prio_q+0x4c>
    8840:	20002984 	.word	0x20002984

00008844 <z_time_slice>:
{
    8844:	b538      	push	{r3, r4, r5, lr}
    8846:	4601      	mov	r1, r0
	__asm__ volatile(
    8848:	f04f 0320 	mov.w	r3, #32
    884c:	f3ef 8411 	mrs	r4, BASEPRI
    8850:	f383 8811 	msr	BASEPRI, r3
    8854:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    8858:	4b15      	ldr	r3, [pc, #84]	; (88b0 <z_time_slice+0x6c>)
    885a:	4a16      	ldr	r2, [pc, #88]	; (88b4 <z_time_slice+0x70>)
    885c:	6898      	ldr	r0, [r3, #8]
    885e:	6815      	ldr	r5, [r2, #0]
    8860:	42a8      	cmp	r0, r5
    8862:	d106      	bne.n	8872 <z_time_slice+0x2e>
			z_reset_time_slice();
    8864:	f7ff fe88 	bl	8578 <z_reset_time_slice>
	__asm__ volatile(
    8868:	f384 8811 	msr	BASEPRI, r4
    886c:	f3bf 8f6f 	isb	sy
}
    8870:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    8872:	2500      	movs	r5, #0
    8874:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    8876:	4a10      	ldr	r2, [pc, #64]	; (88b8 <z_time_slice+0x74>)
    8878:	6812      	ldr	r2, [r2, #0]
    887a:	b1ba      	cbz	r2, 88ac <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    887c:	89c2      	ldrh	r2, [r0, #14]
    887e:	2a7f      	cmp	r2, #127	; 0x7f
    8880:	d814      	bhi.n	88ac <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    8882:	7b42      	ldrb	r2, [r0, #13]
    8884:	06d2      	lsls	r2, r2, #27
    8886:	d111      	bne.n	88ac <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8888:	4a0c      	ldr	r2, [pc, #48]	; (88bc <z_time_slice+0x78>)
    888a:	f990 500e 	ldrsb.w	r5, [r0, #14]
    888e:	6812      	ldr	r2, [r2, #0]
    8890:	4295      	cmp	r5, r2
    8892:	db0b      	blt.n	88ac <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    8894:	4a0a      	ldr	r2, [pc, #40]	; (88c0 <z_time_slice+0x7c>)
    8896:	4290      	cmp	r0, r2
    8898:	d008      	beq.n	88ac <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    889a:	691a      	ldr	r2, [r3, #16]
    889c:	428a      	cmp	r2, r1
    889e:	dc02      	bgt.n	88a6 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    88a0:	f7ff ff96 	bl	87d0 <move_thread_to_end_of_prio_q>
    88a4:	e7de      	b.n	8864 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    88a6:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    88a8:	611a      	str	r2, [r3, #16]
    88aa:	e7dd      	b.n	8868 <z_time_slice+0x24>
    88ac:	2200      	movs	r2, #0
    88ae:	e7fb      	b.n	88a8 <z_time_slice+0x64>
    88b0:	20002984 	.word	0x20002984
    88b4:	200029b4 	.word	0x200029b4
    88b8:	200029bc 	.word	0x200029bc
    88bc:	200029b8 	.word	0x200029b8
    88c0:	200007b0 	.word	0x200007b0

000088c4 <ready_thread>:
{
    88c4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    88c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    88ca:	7b43      	ldrb	r3, [r0, #13]
    88cc:	2a00      	cmp	r2, #0
    88ce:	db2a      	blt.n	8926 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    88d0:	06da      	lsls	r2, r3, #27
    88d2:	d128      	bne.n	8926 <ready_thread+0x62>
    88d4:	6982      	ldr	r2, [r0, #24]
    88d6:	bb32      	cbnz	r2, 8926 <ready_thread+0x62>
	return list->head == list;
    88d8:	4a14      	ldr	r2, [pc, #80]	; (892c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    88da:	f063 037f 	orn	r3, r3, #127	; 0x7f
    88de:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    88e0:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88e4:	f102 0528 	add.w	r5, r2, #40	; 0x28
    88e8:	42ab      	cmp	r3, r5
    88ea:	d017      	beq.n	891c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    88ec:	b1b3      	cbz	r3, 891c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    88ee:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    88f2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    88f6:	428e      	cmp	r6, r1
    88f8:	d00b      	beq.n	8912 <ready_thread+0x4e>
		return b2 - b1;
    88fa:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    88fc:	2900      	cmp	r1, #0
    88fe:	dd08      	ble.n	8912 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    8900:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8902:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    8906:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8908:	6058      	str	r0, [r3, #4]
}
    890a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    890c:	2000      	movs	r0, #0
    890e:	f7ff be9f 	b.w	8650 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8912:	42a3      	cmp	r3, r4
    8914:	d002      	beq.n	891c <ready_thread+0x58>
    8916:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8918:	2b00      	cmp	r3, #0
    891a:	d1ea      	bne.n	88f2 <ready_thread+0x2e>
	node->prev = tail;
    891c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    8920:	6020      	str	r0, [r4, #0]
	list->tail = node;
    8922:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    8924:	e7f1      	b.n	890a <ready_thread+0x46>
}
    8926:	bc70      	pop	{r4, r5, r6}
    8928:	4770      	bx	lr
    892a:	bf00      	nop
    892c:	20002984 	.word	0x20002984

00008930 <z_sched_start>:
{
    8930:	b510      	push	{r4, lr}
	__asm__ volatile(
    8932:	f04f 0220 	mov.w	r2, #32
    8936:	f3ef 8411 	mrs	r4, BASEPRI
    893a:	f382 8811 	msr	BASEPRI, r2
    893e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    8942:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    8944:	0751      	lsls	r1, r2, #29
    8946:	d404      	bmi.n	8952 <z_sched_start+0x22>
	__asm__ volatile(
    8948:	f384 8811 	msr	BASEPRI, r4
    894c:	f3bf 8f6f 	isb	sy
}
    8950:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8952:	f022 0204 	bic.w	r2, r2, #4
    8956:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    8958:	f7ff ffb4 	bl	88c4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    895c:	4621      	mov	r1, r4
    895e:	4802      	ldr	r0, [pc, #8]	; (8968 <z_sched_start+0x38>)
}
    8960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    8964:	f7ff be4e 	b.w	8604 <z_reschedule>
    8968:	200033ad 	.word	0x200033ad

0000896c <z_set_prio>:
{
    896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    896e:	4604      	mov	r4, r0
	__asm__ volatile(
    8970:	f04f 0320 	mov.w	r3, #32
    8974:	f3ef 8611 	mrs	r6, BASEPRI
    8978:	f383 8811 	msr	BASEPRI, r3
    897c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    8980:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8982:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    8984:	b249      	sxtb	r1, r1
    8986:	d133      	bne.n	89f0 <z_set_prio+0x84>
		if (need_sched) {
    8988:	6982      	ldr	r2, [r0, #24]
    898a:	bb8a      	cbnz	r2, 89f0 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    898c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8990:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8992:	f002 fff8 	bl	b986 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8996:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    8998:	4a17      	ldr	r2, [pc, #92]	; (89f8 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    899a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    899c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    89a0:	7343      	strb	r3, [r0, #13]
    89a2:	4610      	mov	r0, r2
    89a4:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89a8:	4283      	cmp	r3, r0
    89aa:	d01b      	beq.n	89e4 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    89ac:	b1d3      	cbz	r3, 89e4 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    89ae:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	int32_t b2 = thread_2->base.prio;
    89b0:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    89b4:	42a9      	cmp	r1, r5
    89b6:	d010      	beq.n	89da <z_set_prio+0x6e>
		return b2 - b1;
    89b8:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    89ba:	2d00      	cmp	r5, #0
    89bc:	dd0d      	ble.n	89da <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    89be:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    89c0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    89c4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    89c6:	605c      	str	r4, [r3, #4]
			update_cache(1);
    89c8:	2001      	movs	r0, #1
    89ca:	f7ff fe41 	bl	8650 <update_cache>
    89ce:	2001      	movs	r0, #1
	__asm__ volatile(
    89d0:	f386 8811 	msr	BASEPRI, r6
    89d4:	f3bf 8f6f 	isb	sy
}
    89d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    89da:	42bb      	cmp	r3, r7
    89dc:	d002      	beq.n	89e4 <z_set_prio+0x78>
    89de:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    89e0:	2b00      	cmp	r3, #0
    89e2:	d1e5      	bne.n	89b0 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    89e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->prev = tail;
    89e6:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    89ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
    89ec:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    89ee:	e7eb      	b.n	89c8 <z_set_prio+0x5c>
			thread->base.prio = prio;
    89f0:	73a1      	strb	r1, [r4, #14]
    89f2:	2000      	movs	r0, #0
    89f4:	e7ec      	b.n	89d0 <z_set_prio+0x64>
    89f6:	bf00      	nop
    89f8:	20002984 	.word	0x20002984

000089fc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    89fc:	4b04      	ldr	r3, [pc, #16]	; (8a10 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    89fe:	2100      	movs	r1, #0
    8a00:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    8a04:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    8a08:	4608      	mov	r0, r1
    8a0a:	f7ff bdcb 	b.w	85a4 <k_sched_time_slice_set>
    8a0e:	bf00      	nop
    8a10:	20002984 	.word	0x20002984

00008a14 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    8a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    8a16:	f04f 0320 	mov.w	r3, #32
    8a1a:	f3ef 8511 	mrs	r5, BASEPRI
    8a1e:	f383 8811 	msr	BASEPRI, r3
    8a22:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    8a26:	491a      	ldr	r1, [pc, #104]	; (8a90 <z_impl_k_yield+0x7c>)
    8a28:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a2a:	7b43      	ldrb	r3, [r0, #13]
    8a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8a30:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8a32:	f002 ffa8 	bl	b986 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    8a36:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8a38:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    8a3a:	4608      	mov	r0, r1
    8a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    8a40:	735a      	strb	r2, [r3, #13]
    8a42:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a46:	4282      	cmp	r2, r0
    8a48:	d01c      	beq.n	8a84 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a4a:	b1da      	cbz	r2, 8a84 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    8a4c:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
    8a4e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    8a52:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    8a56:	42a6      	cmp	r6, r4
    8a58:	d00f      	beq.n	8a7a <z_impl_k_yield+0x66>
		return b2 - b1;
    8a5a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8a5c:	2c00      	cmp	r4, #0
    8a5e:	dd0c      	ble.n	8a7a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    8a60:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    8a62:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    8a66:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    8a68:	6053      	str	r3, [r2, #4]
	update_cache(1);
    8a6a:	2001      	movs	r0, #1
    8a6c:	f7ff fdf0 	bl	8650 <update_cache>
    8a70:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    8a72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8a76:	f7fb baad 	b.w	3fd4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8a7a:	42ba      	cmp	r2, r7
    8a7c:	d002      	beq.n	8a84 <z_impl_k_yield+0x70>
    8a7e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a80:	2a00      	cmp	r2, #0
    8a82:	d1e6      	bne.n	8a52 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    8a84:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
    8a86:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    8a8a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8a8c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
    8a8e:	e7ec      	b.n	8a6a <z_impl_k_yield+0x56>
    8a90:	20002984 	.word	0x20002984

00008a94 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8a94:	ea50 0301 	orrs.w	r3, r0, r1
{
    8a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a9c:	4605      	mov	r5, r0
    8a9e:	460e      	mov	r6, r1
	if (ticks == 0) {
    8aa0:	d103      	bne.n	8aaa <z_tick_sleep+0x16>
	z_impl_k_yield();
    8aa2:	f7ff ffb7 	bl	8a14 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    8aa6:	2000      	movs	r0, #0
    8aa8:	e033      	b.n	8b12 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    8aaa:	f06f 0401 	mvn.w	r4, #1
    8aae:	1a24      	subs	r4, r4, r0
    8ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8ab4:	eb63 0301 	sbc.w	r3, r3, r1
    8ab8:	2c01      	cmp	r4, #1
    8aba:	f173 0300 	sbcs.w	r3, r3, #0
    8abe:	da02      	bge.n	8ac6 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8ac0:	f003 f868 	bl	bb94 <sys_clock_tick_get_32>
    8ac4:	1944      	adds	r4, r0, r5
    8ac6:	f04f 0320 	mov.w	r3, #32
    8aca:	f3ef 8811 	mrs	r8, BASEPRI
    8ace:	f383 8811 	msr	BASEPRI, r3
    8ad2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    8ad6:	4f10      	ldr	r7, [pc, #64]	; (8b18 <z_tick_sleep+0x84>)
    8ad8:	4b10      	ldr	r3, [pc, #64]	; (8b1c <z_tick_sleep+0x88>)
    8ada:	68b8      	ldr	r0, [r7, #8]
    8adc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    8ade:	f7ff fdd7 	bl	8690 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8ae2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8ae4:	490e      	ldr	r1, [pc, #56]	; (8b20 <z_tick_sleep+0x8c>)
    8ae6:	462a      	mov	r2, r5
    8ae8:	4633      	mov	r3, r6
    8aea:	3018      	adds	r0, #24
    8aec:	f000 f8f2 	bl	8cd4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8af0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8af2:	7b53      	ldrb	r3, [r2, #13]
    8af4:	f043 0310 	orr.w	r3, r3, #16
    8af8:	7353      	strb	r3, [r2, #13]
    8afa:	4640      	mov	r0, r8
    8afc:	f7fb fa6a 	bl	3fd4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8b00:	f003 f848 	bl	bb94 <sys_clock_tick_get_32>
    8b04:	1a20      	subs	r0, r4, r0
    8b06:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8b0a:	2801      	cmp	r0, #1
    8b0c:	f173 0300 	sbcs.w	r3, r3, #0
    8b10:	dbc9      	blt.n	8aa6 <z_tick_sleep+0x12>
}
    8b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b16:	bf00      	nop
    8b18:	20002984 	.word	0x20002984
    8b1c:	200029b4 	.word	0x200029b4
    8b20:	0000ba77 	.word	0x0000ba77

00008b24 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8b24:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    8b28:	bf08      	it	eq
    8b2a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    8b2e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8b30:	d106      	bne.n	8b40 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    8b32:	4b08      	ldr	r3, [pc, #32]	; (8b54 <z_impl_k_sleep+0x30>)
    8b34:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8b36:	f7ff fdfd 	bl	8734 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8b3e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    8b40:	f7ff ffa8 	bl	8a94 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    8b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8b48:	fb80 0303 	smull	r0, r3, r0, r3
    8b4c:	0bc0      	lsrs	r0, r0, #15
    8b4e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8b52:	e7f4      	b.n	8b3e <z_impl_k_sleep+0x1a>
    8b54:	20002984 	.word	0x20002984

00008b58 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8b58:	4b01      	ldr	r3, [pc, #4]	; (8b60 <z_impl_k_current_get+0x8>)
    8b5a:	6898      	ldr	r0, [r3, #8]
    8b5c:	4770      	bx	lr
    8b5e:	bf00      	nop
    8b60:	20002984 	.word	0x20002984

00008b64 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b68:	4604      	mov	r4, r0
    8b6a:	f04f 0320 	mov.w	r3, #32
    8b6e:	f3ef 8611 	mrs	r6, BASEPRI
    8b72:	f383 8811 	msr	BASEPRI, r3
    8b76:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8b7a:	7b43      	ldrb	r3, [r0, #13]
    8b7c:	071a      	lsls	r2, r3, #28
    8b7e:	d505      	bpl.n	8b8c <z_thread_abort+0x28>
	__asm__ volatile(
    8b80:	f386 8811 	msr	BASEPRI, r6
    8b84:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8b8c:	f023 0220 	bic.w	r2, r3, #32
    8b90:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8b94:	09d2      	lsrs	r2, r2, #7
    8b96:	d120      	bne.n	8bda <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8b98:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    8b9a:	68a3      	ldr	r3, [r4, #8]
    8b9c:	b113      	cbz	r3, 8ba4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    8b9e:	4620      	mov	r0, r4
    8ba0:	f002 fef9 	bl	b996 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8ba4:	f104 0018 	add.w	r0, r4, #24
    8ba8:	f002 ffb4 	bl	bb14 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8bac:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8bb0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8bb4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8bb6:	42bd      	cmp	r5, r7
    8bb8:	d000      	beq.n	8bbc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8bba:	b9b5      	cbnz	r5, 8bea <z_thread_abort+0x86>
		update_cache(1);
    8bbc:	2001      	movs	r0, #1
    8bbe:	f7ff fd47 	bl	8650 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    8bc2:	4b10      	ldr	r3, [pc, #64]	; (8c04 <z_thread_abort+0xa0>)
    8bc4:	689b      	ldr	r3, [r3, #8]
    8bc6:	42a3      	cmp	r3, r4
    8bc8:	d1da      	bne.n	8b80 <z_thread_abort+0x1c>
    8bca:	f3ef 8305 	mrs	r3, IPSR
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d1d6      	bne.n	8b80 <z_thread_abort+0x1c>
    8bd2:	4630      	mov	r0, r6
    8bd4:	f7fb f9fe 	bl	3fd4 <arch_swap>
	return ret;
    8bd8:	e7d2      	b.n	8b80 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8bda:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8bde:	f043 0308 	orr.w	r3, r3, #8
    8be2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8be4:	f002 fecf 	bl	b986 <sys_dlist_remove>
}
    8be8:	e7d7      	b.n	8b9a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    8bea:	4628      	mov	r0, r5
    8bec:	f002 fed3 	bl	b996 <unpend_thread_no_timeout>
    8bf0:	f105 0018 	add.w	r0, r5, #24
    8bf4:	f002 ff8e 	bl	bb14 <z_abort_timeout>
    8bf8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    8bfc:	4628      	mov	r0, r5
    8bfe:	f7ff fe61 	bl	88c4 <ready_thread>
    8c02:	e7d7      	b.n	8bb4 <z_thread_abort+0x50>
    8c04:	20002984 	.word	0x20002984

00008c08 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    8c08:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    8c0a:	4806      	ldr	r0, [pc, #24]	; (8c24 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    8c0c:	4a06      	ldr	r2, [pc, #24]	; (8c28 <z_data_copy+0x20>)
    8c0e:	4907      	ldr	r1, [pc, #28]	; (8c2c <z_data_copy+0x24>)
    8c10:	1a12      	subs	r2, r2, r0
    8c12:	f002 f803 	bl	ac1c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    8c1a:	4a05      	ldr	r2, [pc, #20]	; (8c30 <z_data_copy+0x28>)
    8c1c:	4905      	ldr	r1, [pc, #20]	; (8c34 <z_data_copy+0x2c>)
    8c1e:	4806      	ldr	r0, [pc, #24]	; (8c38 <z_data_copy+0x30>)
    8c20:	f001 bffc 	b.w	ac1c <memcpy>
    8c24:	20000000 	.word	0x20000000
    8c28:	20000220 	.word	0x20000220
    8c2c:	0000d914 	.word	0x0000d914
    8c30:	00000000 	.word	0x00000000
    8c34:	0000d914 	.word	0x0000d914
    8c38:	20000000 	.word	0x20000000

00008c3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8c3c:	4b03      	ldr	r3, [pc, #12]	; (8c4c <elapsed+0x10>)
    8c3e:	681b      	ldr	r3, [r3, #0]
    8c40:	b90b      	cbnz	r3, 8c46 <elapsed+0xa>
    8c42:	f7fa bbab 	b.w	339c <sys_clock_elapsed>
}
    8c46:	2000      	movs	r0, #0
    8c48:	4770      	bx	lr
    8c4a:	bf00      	nop
    8c4c:	200029c0 	.word	0x200029c0

00008c50 <next_timeout>:
	return list->head == list;
    8c50:	4b11      	ldr	r3, [pc, #68]	; (8c98 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    8c52:	b510      	push	{r4, lr}
    8c54:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c56:	429c      	cmp	r4, r3
    8c58:	bf08      	it	eq
    8c5a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8c5c:	f7ff ffee 	bl	8c3c <elapsed>
    8c60:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    8c62:	b16c      	cbz	r4, 8c80 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8c64:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    8c68:	1ac0      	subs	r0, r0, r3
    8c6a:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    8c6e:	2801      	cmp	r0, #1
    8c70:	f173 0200 	sbcs.w	r2, r3, #0
    8c74:	db0d      	blt.n	8c92 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8c76:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    8c7a:	f173 0300 	sbcs.w	r3, r3, #0
    8c7e:	db01      	blt.n	8c84 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    8c80:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8c84:	4b05      	ldr	r3, [pc, #20]	; (8c9c <next_timeout+0x4c>)
    8c86:	691b      	ldr	r3, [r3, #16]
    8c88:	b113      	cbz	r3, 8c90 <next_timeout+0x40>
    8c8a:	4298      	cmp	r0, r3
    8c8c:	bfa8      	it	ge
    8c8e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8c90:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    8c92:	2000      	movs	r0, #0
    8c94:	e7f6      	b.n	8c84 <next_timeout+0x34>
    8c96:	bf00      	nop
    8c98:	20000134 	.word	0x20000134
    8c9c:	20002984 	.word	0x20002984

00008ca0 <remove_timeout>:
{
    8ca0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    8ca2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8ca4:	b168      	cbz	r0, 8cc2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    8ca6:	4a0a      	ldr	r2, [pc, #40]	; (8cd0 <remove_timeout+0x30>)
    8ca8:	6852      	ldr	r2, [r2, #4]
    8caa:	4290      	cmp	r0, r2
    8cac:	d009      	beq.n	8cc2 <remove_timeout+0x22>
	if (next(t) != NULL) {
    8cae:	b143      	cbz	r3, 8cc2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    8cb0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8cb4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8cb8:	1912      	adds	r2, r2, r4
    8cba:	eb41 0105 	adc.w	r1, r1, r5
    8cbe:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8cc2:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    8cc4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8cc6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8cc8:	2300      	movs	r3, #0
	node->prev = NULL;
    8cca:	e9c0 3300 	strd	r3, r3, [r0]
}
    8cce:	bd30      	pop	{r4, r5, pc}
    8cd0:	20000134 	.word	0x20000134

00008cd4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8cd8:	bf08      	it	eq
    8cda:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ce0:	4604      	mov	r4, r0
    8ce2:	461f      	mov	r7, r3
    8ce4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8ce6:	d067      	beq.n	8db8 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    8ce8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    8cea:	f04f 0320 	mov.w	r3, #32
    8cee:	f3ef 8611 	mrs	r6, BASEPRI
    8cf2:	f383 8811 	msr	BASEPRI, r3
    8cf6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    8cfa:	f06f 0201 	mvn.w	r2, #1
    8cfe:	1b53      	subs	r3, r2, r5
    8d00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    8d04:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8d08:	2b00      	cmp	r3, #0
    8d0a:	db1b      	blt.n	8d44 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8d0c:	4b2b      	ldr	r3, [pc, #172]	; (8dbc <z_add_timeout+0xe8>)
    8d0e:	e9d3 1300 	ldrd	r1, r3, [r3]
    8d12:	1a52      	subs	r2, r2, r1
    8d14:	eb6c 0303 	sbc.w	r3, ip, r3
    8d18:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    8d1a:	eb63 0307 	sbc.w	r3, r3, r7
    8d1e:	2d01      	cmp	r5, #1
    8d20:	f173 0200 	sbcs.w	r2, r3, #0
    8d24:	bfbc      	itt	lt
    8d26:	2501      	movlt	r5, #1
    8d28:	2300      	movlt	r3, #0
    8d2a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    8d2e:	4824      	ldr	r0, [pc, #144]	; (8dc0 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    8d30:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d34:	4283      	cmp	r3, r0
    8d36:	d118      	bne.n	8d6a <z_add_timeout+0x96>
	node->prev = tail;
    8d38:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    8d3c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    8d40:	6044      	str	r4, [r0, #4]
}
    8d42:	e026      	b.n	8d92 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8d44:	f7ff ff7a 	bl	8c3c <elapsed>
    8d48:	3501      	adds	r5, #1
    8d4a:	f147 0700 	adc.w	r7, r7, #0
    8d4e:	182d      	adds	r5, r5, r0
    8d50:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    8d54:	e9c4 5704 	strd	r5, r7, [r4, #16]
    8d58:	e7e9      	b.n	8d2e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    8d5a:	1a52      	subs	r2, r2, r1
    8d5c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    8d60:	459c      	cmp	ip, r3
    8d62:	e9c4 2504 	strd	r2, r5, [r4, #16]
    8d66:	d0e7      	beq.n	8d38 <z_add_timeout+0x64>
    8d68:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d0e4      	beq.n	8d38 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    8d6e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    8d72:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    8d76:	428a      	cmp	r2, r1
    8d78:	eb75 0e07 	sbcs.w	lr, r5, r7
    8d7c:	daed      	bge.n	8d5a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    8d7e:	1a8a      	subs	r2, r1, r2
    8d80:	eb67 0505 	sbc.w	r5, r7, r5
    8d84:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    8d88:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8d8a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8d8e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8d90:	605c      	str	r4, [r3, #4]
	return list->head == list;
    8d92:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d94:	4283      	cmp	r3, r0
    8d96:	d00b      	beq.n	8db0 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8d98:	429c      	cmp	r4, r3
    8d9a:	d109      	bne.n	8db0 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8d9c:	f7ff ff58 	bl	8c50 <next_timeout>

			if (next_time == 0 ||
    8da0:	b118      	cbz	r0, 8daa <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    8da2:	4b08      	ldr	r3, [pc, #32]	; (8dc4 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    8da4:	691b      	ldr	r3, [r3, #16]
    8da6:	4283      	cmp	r3, r0
    8da8:	d002      	beq.n	8db0 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    8daa:	2100      	movs	r1, #0
    8dac:	f7fa fac4 	bl	3338 <sys_clock_set_timeout>
	__asm__ volatile(
    8db0:	f386 8811 	msr	BASEPRI, r6
    8db4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8dba:	bf00      	nop
    8dbc:	200008b0 	.word	0x200008b0
    8dc0:	20000134 	.word	0x20000134
    8dc4:	20002984 	.word	0x20002984

00008dc8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    8dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8dcc:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8dce:	f7ff fd39 	bl	8844 <z_time_slice>
	__asm__ volatile(
    8dd2:	f04f 0320 	mov.w	r3, #32
    8dd6:	f3ef 8411 	mrs	r4, BASEPRI
    8dda:	f383 8811 	msr	BASEPRI, r3
    8dde:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    8de2:	4e24      	ldr	r6, [pc, #144]	; (8e74 <sys_clock_announce+0xac>)
	return list->head == list;
    8de4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8e78 <sys_clock_announce+0xb0>
    8de8:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    8dea:	4d24      	ldr	r5, [pc, #144]	; (8e7c <sys_clock_announce+0xb4>)
    8dec:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8df0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8df2:	4540      	cmp	r0, r8
		curr_tick += dt;
    8df4:	e9d5 1e00 	ldrd	r1, lr, [r5]
    8df8:	ea4f 77e2 	mov.w	r7, r2, asr #31
    8dfc:	d00b      	beq.n	8e16 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8dfe:	b150      	cbz	r0, 8e16 <sys_clock_announce+0x4e>
    8e00:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    8e04:	429a      	cmp	r2, r3
    8e06:	eb77 090c 	sbcs.w	r9, r7, ip
    8e0a:	da16      	bge.n	8e3a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8e0c:	1a9b      	subs	r3, r3, r2
    8e0e:	eb6c 0c07 	sbc.w	ip, ip, r7
    8e12:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    8e16:	1852      	adds	r2, r2, r1
    8e18:	eb4e 0707 	adc.w	r7, lr, r7
    8e1c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    8e20:	2500      	movs	r5, #0
    8e22:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8e24:	f7ff ff14 	bl	8c50 <next_timeout>
    8e28:	4629      	mov	r1, r5
    8e2a:	f7fa fa85 	bl	3338 <sys_clock_set_timeout>
	__asm__ volatile(
    8e2e:	f384 8811 	msr	BASEPRI, r4
    8e32:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    8e3a:	1859      	adds	r1, r3, r1
    8e3c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    8e40:	1ad3      	subs	r3, r2, r3
    8e42:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    8e44:	2200      	movs	r2, #0
    8e46:	2300      	movs	r3, #0
    8e48:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    8e4c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    8e50:	f7ff ff26 	bl	8ca0 <remove_timeout>
    8e54:	f384 8811 	msr	BASEPRI, r4
    8e58:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8e5c:	6883      	ldr	r3, [r0, #8]
    8e5e:	4798      	blx	r3
	__asm__ volatile(
    8e60:	f04f 0320 	mov.w	r3, #32
    8e64:	f3ef 8411 	mrs	r4, BASEPRI
    8e68:	f383 8811 	msr	BASEPRI, r3
    8e6c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    8e70:	e7bc      	b.n	8dec <sys_clock_announce+0x24>
    8e72:	bf00      	nop
    8e74:	200029c0 	.word	0x200029c0
    8e78:	20000134 	.word	0x20000134
    8e7c:	200008b0 	.word	0x200008b0

00008e80 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8e80:	b510      	push	{r4, lr}
    8e82:	f04f 0320 	mov.w	r3, #32
    8e86:	f3ef 8411 	mrs	r4, BASEPRI
    8e8a:	f383 8811 	msr	BASEPRI, r3
    8e8e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8e92:	f7fa fa83 	bl	339c <sys_clock_elapsed>
    8e96:	4a05      	ldr	r2, [pc, #20]	; (8eac <sys_clock_tick_get+0x2c>)
    8e98:	e9d2 3100 	ldrd	r3, r1, [r2]
    8e9c:	18c0      	adds	r0, r0, r3
    8e9e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    8ea2:	f384 8811 	msr	BASEPRI, r4
    8ea6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8eaa:	bd10      	pop	{r4, pc}
    8eac:	200008b0 	.word	0x200008b0

00008eb0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8eb0:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8eb2:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    8eb6:	3301      	adds	r3, #1
    8eb8:	f142 0200 	adc.w	r2, r2, #0
    8ebc:	2b02      	cmp	r3, #2
    8ebe:	f172 0300 	sbcs.w	r3, r2, #0
{
    8ec2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8ec4:	d304      	bcc.n	8ed0 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8ec6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    8eca:	490d      	ldr	r1, [pc, #52]	; (8f00 <z_timer_expiration_handler+0x50>)
    8ecc:	f7ff ff02 	bl	8cd4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8ed0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8ed2:	3301      	adds	r3, #1
    8ed4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    8ed6:	6a23      	ldr	r3, [r4, #32]
    8ed8:	b10b      	cbz	r3, 8ede <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
    8eda:	4620      	mov	r0, r4
    8edc:	4798      	blx	r3
	return list->head == list;
    8ede:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ee2:	42a5      	cmp	r5, r4
    8ee4:	d00a      	beq.n	8efc <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    8ee6:	b14d      	cbz	r5, 8efc <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    8ee8:	4628      	mov	r0, r5
    8eea:	f002 fd5e 	bl	b9aa <z_unpend_thread_no_timeout>
    8eee:	2300      	movs	r3, #0
    8ef0:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
    8ef2:	4628      	mov	r0, r5
}
    8ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    8ef8:	f002 bdad 	b.w	ba56 <z_ready_thread>
}
    8efc:	bd38      	pop	{r3, r4, r5, pc}
    8efe:	bf00      	nop
    8f00:	00008eb1 	.word	0x00008eb1

00008f04 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f08:	4611      	mov	r1, r2
    8f0a:	4605      	mov	r5, r0
    8f0c:	4618      	mov	r0, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8f0e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8f12:	bf08      	it	eq
    8f14:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    8f18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    8f1c:	4688      	mov	r8, r1
    8f1e:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8f20:	d03c      	beq.n	8f9c <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8f26:	bf08      	it	eq
    8f28:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    8f2c:	4614      	mov	r4, r2
    8f2e:	461e      	mov	r6, r3
    8f30:	d013      	beq.n	8f5a <z_impl_k_timer_start+0x56>
    8f32:	431a      	orrs	r2, r3
    8f34:	d011      	beq.n	8f5a <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
    8f36:	f06f 0201 	mvn.w	r2, #1
    8f3a:	1b12      	subs	r2, r2, r4
    8f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8f40:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8f44:	2a00      	cmp	r2, #0
    8f46:	da08      	bge.n	8f5a <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
    8f48:	3c01      	subs	r4, #1
    8f4a:	f163 0600 	sbc.w	r6, r3, #0
    8f4e:	2c01      	cmp	r4, #1
    8f50:	f176 0300 	sbcs.w	r3, r6, #0
    8f54:	bfbc      	itt	lt
    8f56:	2401      	movlt	r4, #1
    8f58:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    8f5a:	f06f 0301 	mvn.w	r3, #1
    8f5e:	1a5b      	subs	r3, r3, r1
    8f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8f64:	eb63 0300 	sbc.w	r3, r3, r0
    8f68:	2b00      	cmp	r3, #0
    8f6a:	da08      	bge.n	8f7e <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
    8f6c:	1e4a      	subs	r2, r1, #1
    8f6e:	f160 0700 	sbc.w	r7, r0, #0
    8f72:	2f00      	cmp	r7, #0
    8f74:	4690      	mov	r8, r2
    8f76:	bfbc      	itt	lt
    8f78:	f04f 0800 	movlt.w	r8, #0
    8f7c:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
    8f7e:	4628      	mov	r0, r5
    8f80:	f002 fdc8 	bl	bb14 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    8f84:	2300      	movs	r3, #0
    8f86:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    8f88:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8f8c:	4642      	mov	r2, r8
    8f8e:	463b      	mov	r3, r7
    8f90:	4628      	mov	r0, r5
    8f92:	4903      	ldr	r1, [pc, #12]	; (8fa0 <z_impl_k_timer_start+0x9c>)
		     duration);
}
    8f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8f98:	f7ff be9c 	b.w	8cd4 <z_add_timeout>
}
    8f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8fa0:	00008eb1 	.word	0x00008eb1

00008fa4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8fa4:	4a02      	ldr	r2, [pc, #8]	; (8fb0 <boot_banner+0xc>)
    8fa6:	4903      	ldr	r1, [pc, #12]	; (8fb4 <boot_banner+0x10>)
    8fa8:	4803      	ldr	r0, [pc, #12]	; (8fb8 <boot_banner+0x14>)
    8faa:	f000 bd3f 	b.w	9a2c <printk>
    8fae:	bf00      	nop
    8fb0:	0000c9b2 	.word	0x0000c9b2
    8fb4:	0000d8ca 	.word	0x0000d8ca
    8fb8:	0000d8eb 	.word	0x0000d8eb

00008fbc <nrf_cc3xx_platform_init_no_rng>:
    8fbc:	b510      	push	{r4, lr}
    8fbe:	4c0a      	ldr	r4, [pc, #40]	; (8fe8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8fc0:	6823      	ldr	r3, [r4, #0]
    8fc2:	b11b      	cbz	r3, 8fcc <nrf_cc3xx_platform_init_no_rng+0x10>
    8fc4:	2301      	movs	r3, #1
    8fc6:	6023      	str	r3, [r4, #0]
    8fc8:	2000      	movs	r0, #0
    8fca:	bd10      	pop	{r4, pc}
    8fcc:	f000 f8d6 	bl	917c <CC_LibInitNoRng>
    8fd0:	2800      	cmp	r0, #0
    8fd2:	d0f7      	beq.n	8fc4 <nrf_cc3xx_platform_init_no_rng+0x8>
    8fd4:	3801      	subs	r0, #1
    8fd6:	2806      	cmp	r0, #6
    8fd8:	d803      	bhi.n	8fe2 <nrf_cc3xx_platform_init_no_rng+0x26>
    8fda:	4b04      	ldr	r3, [pc, #16]	; (8fec <nrf_cc3xx_platform_init_no_rng+0x30>)
    8fdc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8fe0:	bd10      	pop	{r4, pc}
    8fe2:	4803      	ldr	r0, [pc, #12]	; (8ff0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8fe4:	bd10      	pop	{r4, pc}
    8fe6:	bf00      	nop
    8fe8:	200029c4 	.word	0x200029c4
    8fec:	0000c45c 	.word	0x0000c45c
    8ff0:	ffff8ffe 	.word	0xffff8ffe

00008ff4 <nrf_cc3xx_platform_abort>:
    8ff4:	f3bf 8f4f 	dsb	sy
    8ff8:	4905      	ldr	r1, [pc, #20]	; (9010 <nrf_cc3xx_platform_abort+0x1c>)
    8ffa:	4b06      	ldr	r3, [pc, #24]	; (9014 <nrf_cc3xx_platform_abort+0x20>)
    8ffc:	68ca      	ldr	r2, [r1, #12]
    8ffe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9002:	4313      	orrs	r3, r2
    9004:	60cb      	str	r3, [r1, #12]
    9006:	f3bf 8f4f 	dsb	sy
    900a:	bf00      	nop
    900c:	e7fd      	b.n	900a <nrf_cc3xx_platform_abort+0x16>
    900e:	bf00      	nop
    9010:	e000ed00 	.word	0xe000ed00
    9014:	05fa0004 	.word	0x05fa0004

00009018 <CC_PalAbort>:
    9018:	b4f0      	push	{r4, r5, r6, r7}
    901a:	4f09      	ldr	r7, [pc, #36]	; (9040 <CC_PalAbort+0x28>)
    901c:	4e09      	ldr	r6, [pc, #36]	; (9044 <CC_PalAbort+0x2c>)
    901e:	4c0a      	ldr	r4, [pc, #40]	; (9048 <CC_PalAbort+0x30>)
    9020:	4a0a      	ldr	r2, [pc, #40]	; (904c <CC_PalAbort+0x34>)
    9022:	4d0b      	ldr	r5, [pc, #44]	; (9050 <CC_PalAbort+0x38>)
    9024:	490b      	ldr	r1, [pc, #44]	; (9054 <CC_PalAbort+0x3c>)
    9026:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    902a:	603b      	str	r3, [r7, #0]
    902c:	6852      	ldr	r2, [r2, #4]
    902e:	6033      	str	r3, [r6, #0]
    9030:	6023      	str	r3, [r4, #0]
    9032:	2400      	movs	r4, #0
    9034:	602b      	str	r3, [r5, #0]
    9036:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    903a:	bcf0      	pop	{r4, r5, r6, r7}
    903c:	4710      	bx	r2
    903e:	bf00      	nop
    9040:	5002b400 	.word	0x5002b400
    9044:	5002b404 	.word	0x5002b404
    9048:	5002b408 	.word	0x5002b408
    904c:	2000013c 	.word	0x2000013c
    9050:	5002b40c 	.word	0x5002b40c
    9054:	5002a000 	.word	0x5002a000

00009058 <nrf_cc3xx_platform_set_abort>:
    9058:	e9d0 1200 	ldrd	r1, r2, [r0]
    905c:	4b01      	ldr	r3, [pc, #4]	; (9064 <nrf_cc3xx_platform_set_abort+0xc>)
    905e:	e9c3 1200 	strd	r1, r2, [r3]
    9062:	4770      	bx	lr
    9064:	2000013c 	.word	0x2000013c

00009068 <mutex_free>:
    9068:	b510      	push	{r4, lr}
    906a:	4604      	mov	r4, r0
    906c:	b130      	cbz	r0, 907c <mutex_free+0x14>
    906e:	6863      	ldr	r3, [r4, #4]
    9070:	06db      	lsls	r3, r3, #27
    9072:	d502      	bpl.n	907a <mutex_free+0x12>
    9074:	2300      	movs	r3, #0
    9076:	6023      	str	r3, [r4, #0]
    9078:	6063      	str	r3, [r4, #4]
    907a:	bd10      	pop	{r4, pc}
    907c:	4b02      	ldr	r3, [pc, #8]	; (9088 <mutex_free+0x20>)
    907e:	4803      	ldr	r0, [pc, #12]	; (908c <mutex_free+0x24>)
    9080:	685b      	ldr	r3, [r3, #4]
    9082:	4798      	blx	r3
    9084:	e7f3      	b.n	906e <mutex_free+0x6>
    9086:	bf00      	nop
    9088:	2000013c 	.word	0x2000013c
    908c:	0000c478 	.word	0x0000c478

00009090 <mutex_unlock>:
    9090:	b168      	cbz	r0, 90ae <mutex_unlock+0x1e>
    9092:	6843      	ldr	r3, [r0, #4]
    9094:	b13b      	cbz	r3, 90a6 <mutex_unlock+0x16>
    9096:	06db      	lsls	r3, r3, #27
    9098:	d507      	bpl.n	90aa <mutex_unlock+0x1a>
    909a:	f3bf 8f5f 	dmb	sy
    909e:	2300      	movs	r3, #0
    90a0:	6003      	str	r3, [r0, #0]
    90a2:	4618      	mov	r0, r3
    90a4:	4770      	bx	lr
    90a6:	4803      	ldr	r0, [pc, #12]	; (90b4 <mutex_unlock+0x24>)
    90a8:	4770      	bx	lr
    90aa:	4803      	ldr	r0, [pc, #12]	; (90b8 <mutex_unlock+0x28>)
    90ac:	4770      	bx	lr
    90ae:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    90b2:	4770      	bx	lr
    90b4:	ffff8fea 	.word	0xffff8fea
    90b8:	ffff8fe9 	.word	0xffff8fe9

000090bc <mutex_init>:
    90bc:	b510      	push	{r4, lr}
    90be:	4604      	mov	r4, r0
    90c0:	b120      	cbz	r0, 90cc <mutex_init+0x10>
    90c2:	2200      	movs	r2, #0
    90c4:	2311      	movs	r3, #17
    90c6:	6022      	str	r2, [r4, #0]
    90c8:	6063      	str	r3, [r4, #4]
    90ca:	bd10      	pop	{r4, pc}
    90cc:	4801      	ldr	r0, [pc, #4]	; (90d4 <mutex_init+0x18>)
    90ce:	f7ff ffa3 	bl	9018 <CC_PalAbort>
    90d2:	e7f6      	b.n	90c2 <mutex_init+0x6>
    90d4:	0000c4a0 	.word	0x0000c4a0

000090d8 <mutex_lock>:
    90d8:	b1c0      	cbz	r0, 910c <mutex_lock+0x34>
    90da:	6843      	ldr	r3, [r0, #4]
    90dc:	b1a3      	cbz	r3, 9108 <mutex_lock+0x30>
    90de:	06db      	lsls	r3, r3, #27
    90e0:	d510      	bpl.n	9104 <mutex_lock+0x2c>
    90e2:	2201      	movs	r2, #1
    90e4:	f3bf 8f5b 	dmb	ish
    90e8:	e850 3f00 	ldrex	r3, [r0]
    90ec:	e840 2100 	strex	r1, r2, [r0]
    90f0:	2900      	cmp	r1, #0
    90f2:	d1f9      	bne.n	90e8 <mutex_lock+0x10>
    90f4:	f3bf 8f5b 	dmb	ish
    90f8:	2b01      	cmp	r3, #1
    90fa:	d0f3      	beq.n	90e4 <mutex_lock+0xc>
    90fc:	f3bf 8f5f 	dmb	sy
    9100:	2000      	movs	r0, #0
    9102:	4770      	bx	lr
    9104:	4803      	ldr	r0, [pc, #12]	; (9114 <mutex_lock+0x3c>)
    9106:	4770      	bx	lr
    9108:	4803      	ldr	r0, [pc, #12]	; (9118 <mutex_lock+0x40>)
    910a:	4770      	bx	lr
    910c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9110:	4770      	bx	lr
    9112:	bf00      	nop
    9114:	ffff8fe9 	.word	0xffff8fe9
    9118:	ffff8fea 	.word	0xffff8fea

0000911c <nrf_cc3xx_platform_set_mutexes>:
    911c:	b570      	push	{r4, r5, r6, lr}
    911e:	e9d0 2300 	ldrd	r2, r3, [r0]
    9122:	4c13      	ldr	r4, [pc, #76]	; (9170 <nrf_cc3xx_platform_set_mutexes+0x54>)
    9124:	4d13      	ldr	r5, [pc, #76]	; (9174 <nrf_cc3xx_platform_set_mutexes+0x58>)
    9126:	e9c4 2300 	strd	r2, r3, [r4]
    912a:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    912e:	e9c4 6302 	strd	r6, r3, [r4, #8]
    9132:	4b11      	ldr	r3, [pc, #68]	; (9178 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    9134:	6808      	ldr	r0, [r1, #0]
    9136:	6018      	str	r0, [r3, #0]
    9138:	6848      	ldr	r0, [r1, #4]
    913a:	6058      	str	r0, [r3, #4]
    913c:	6888      	ldr	r0, [r1, #8]
    913e:	6098      	str	r0, [r3, #8]
    9140:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    9144:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    9148:	60de      	str	r6, [r3, #12]
    914a:	6118      	str	r0, [r3, #16]
    914c:	06cb      	lsls	r3, r1, #27
    914e:	d50d      	bpl.n	916c <nrf_cc3xx_platform_set_mutexes+0x50>
    9150:	2300      	movs	r3, #0
    9152:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    9156:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    915a:	f505 7088 	add.w	r0, r5, #272	; 0x110
    915e:	4790      	blx	r2
    9160:	6823      	ldr	r3, [r4, #0]
    9162:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    9166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    916a:	4718      	bx	r3
    916c:	bd70      	pop	{r4, r5, r6, pc}
    916e:	bf00      	nop
    9170:	2000014c 	.word	0x2000014c
    9174:	200033b0 	.word	0x200033b0
    9178:	2000015c 	.word	0x2000015c

0000917c <CC_LibInitNoRng>:
    917c:	b510      	push	{r4, lr}
    917e:	f000 f833 	bl	91e8 <CC_HalInit>
    9182:	b120      	cbz	r0, 918e <CC_LibInitNoRng+0x12>
    9184:	2403      	movs	r4, #3
    9186:	f000 f867 	bl	9258 <CC_PalTerminate>
    918a:	4620      	mov	r0, r4
    918c:	bd10      	pop	{r4, pc}
    918e:	f000 f835 	bl	91fc <CC_PalInit>
    9192:	b990      	cbnz	r0, 91ba <CC_LibInitNoRng+0x3e>
    9194:	f000 f8b0 	bl	92f8 <CC_PalPowerSaveModeSelect>
    9198:	b990      	cbnz	r0, 91c0 <CC_LibInitNoRng+0x44>
    919a:	4b0f      	ldr	r3, [pc, #60]	; (91d8 <CC_LibInitNoRng+0x5c>)
    919c:	681b      	ldr	r3, [r3, #0]
    919e:	0e1b      	lsrs	r3, r3, #24
    91a0:	2bf0      	cmp	r3, #240	; 0xf0
    91a2:	d108      	bne.n	91b6 <CC_LibInitNoRng+0x3a>
    91a4:	4a0d      	ldr	r2, [pc, #52]	; (91dc <CC_LibInitNoRng+0x60>)
    91a6:	4b0e      	ldr	r3, [pc, #56]	; (91e0 <CC_LibInitNoRng+0x64>)
    91a8:	6812      	ldr	r2, [r2, #0]
    91aa:	429a      	cmp	r2, r3
    91ac:	d00a      	beq.n	91c4 <CC_LibInitNoRng+0x48>
    91ae:	2407      	movs	r4, #7
    91b0:	f000 f81c 	bl	91ec <CC_HalTerminate>
    91b4:	e7e7      	b.n	9186 <CC_LibInitNoRng+0xa>
    91b6:	2406      	movs	r4, #6
    91b8:	e7fa      	b.n	91b0 <CC_LibInitNoRng+0x34>
    91ba:	2404      	movs	r4, #4
    91bc:	4620      	mov	r0, r4
    91be:	bd10      	pop	{r4, pc}
    91c0:	2400      	movs	r4, #0
    91c2:	e7f5      	b.n	91b0 <CC_LibInitNoRng+0x34>
    91c4:	2001      	movs	r0, #1
    91c6:	f000 f897 	bl	92f8 <CC_PalPowerSaveModeSelect>
    91ca:	4604      	mov	r4, r0
    91cc:	2800      	cmp	r0, #0
    91ce:	d1f7      	bne.n	91c0 <CC_LibInitNoRng+0x44>
    91d0:	4b04      	ldr	r3, [pc, #16]	; (91e4 <CC_LibInitNoRng+0x68>)
    91d2:	6018      	str	r0, [r3, #0]
    91d4:	e7d9      	b.n	918a <CC_LibInitNoRng+0xe>
    91d6:	bf00      	nop
    91d8:	5002b928 	.word	0x5002b928
    91dc:	5002ba24 	.word	0x5002ba24
    91e0:	20e00000 	.word	0x20e00000
    91e4:	5002ba0c 	.word	0x5002ba0c

000091e8 <CC_HalInit>:
    91e8:	2000      	movs	r0, #0
    91ea:	4770      	bx	lr

000091ec <CC_HalTerminate>:
    91ec:	2000      	movs	r0, #0
    91ee:	4770      	bx	lr

000091f0 <CC_HalMaskInterrupt>:
    91f0:	4b01      	ldr	r3, [pc, #4]	; (91f8 <CC_HalMaskInterrupt+0x8>)
    91f2:	6018      	str	r0, [r3, #0]
    91f4:	4770      	bx	lr
    91f6:	bf00      	nop
    91f8:	5002ba04 	.word	0x5002ba04

000091fc <CC_PalInit>:
    91fc:	b510      	push	{r4, lr}
    91fe:	4811      	ldr	r0, [pc, #68]	; (9244 <CC_PalInit+0x48>)
    9200:	f000 f848 	bl	9294 <CC_PalMutexCreate>
    9204:	b100      	cbz	r0, 9208 <CC_PalInit+0xc>
    9206:	bd10      	pop	{r4, pc}
    9208:	480f      	ldr	r0, [pc, #60]	; (9248 <CC_PalInit+0x4c>)
    920a:	f000 f843 	bl	9294 <CC_PalMutexCreate>
    920e:	2800      	cmp	r0, #0
    9210:	d1f9      	bne.n	9206 <CC_PalInit+0xa>
    9212:	4c0e      	ldr	r4, [pc, #56]	; (924c <CC_PalInit+0x50>)
    9214:	4620      	mov	r0, r4
    9216:	f000 f83d 	bl	9294 <CC_PalMutexCreate>
    921a:	2800      	cmp	r0, #0
    921c:	d1f3      	bne.n	9206 <CC_PalInit+0xa>
    921e:	4b0c      	ldr	r3, [pc, #48]	; (9250 <CC_PalInit+0x54>)
    9220:	480c      	ldr	r0, [pc, #48]	; (9254 <CC_PalInit+0x58>)
    9222:	601c      	str	r4, [r3, #0]
    9224:	f000 f836 	bl	9294 <CC_PalMutexCreate>
    9228:	4601      	mov	r1, r0
    922a:	2800      	cmp	r0, #0
    922c:	d1eb      	bne.n	9206 <CC_PalInit+0xa>
    922e:	f000 f82d 	bl	928c <CC_PalDmaInit>
    9232:	4604      	mov	r4, r0
    9234:	b108      	cbz	r0, 923a <CC_PalInit+0x3e>
    9236:	4620      	mov	r0, r4
    9238:	bd10      	pop	{r4, pc}
    923a:	f000 f83f 	bl	92bc <CC_PalPowerSaveModeInit>
    923e:	4620      	mov	r0, r4
    9240:	e7fa      	b.n	9238 <CC_PalInit+0x3c>
    9242:	bf00      	nop
    9244:	20000194 	.word	0x20000194
    9248:	20000188 	.word	0x20000188
    924c:	20000190 	.word	0x20000190
    9250:	20000198 	.word	0x20000198
    9254:	2000018c 	.word	0x2000018c

00009258 <CC_PalTerminate>:
    9258:	b508      	push	{r3, lr}
    925a:	4808      	ldr	r0, [pc, #32]	; (927c <CC_PalTerminate+0x24>)
    925c:	f000 f824 	bl	92a8 <CC_PalMutexDestroy>
    9260:	4807      	ldr	r0, [pc, #28]	; (9280 <CC_PalTerminate+0x28>)
    9262:	f000 f821 	bl	92a8 <CC_PalMutexDestroy>
    9266:	4807      	ldr	r0, [pc, #28]	; (9284 <CC_PalTerminate+0x2c>)
    9268:	f000 f81e 	bl	92a8 <CC_PalMutexDestroy>
    926c:	4806      	ldr	r0, [pc, #24]	; (9288 <CC_PalTerminate+0x30>)
    926e:	f000 f81b 	bl	92a8 <CC_PalMutexDestroy>
    9272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9276:	f000 b80b 	b.w	9290 <CC_PalDmaTerminate>
    927a:	bf00      	nop
    927c:	20000194 	.word	0x20000194
    9280:	20000188 	.word	0x20000188
    9284:	20000190 	.word	0x20000190
    9288:	2000018c 	.word	0x2000018c

0000928c <CC_PalDmaInit>:
    928c:	2000      	movs	r0, #0
    928e:	4770      	bx	lr

00009290 <CC_PalDmaTerminate>:
    9290:	4770      	bx	lr
    9292:	bf00      	nop

00009294 <CC_PalMutexCreate>:
    9294:	b508      	push	{r3, lr}
    9296:	4b03      	ldr	r3, [pc, #12]	; (92a4 <CC_PalMutexCreate+0x10>)
    9298:	6802      	ldr	r2, [r0, #0]
    929a:	681b      	ldr	r3, [r3, #0]
    929c:	6810      	ldr	r0, [r2, #0]
    929e:	4798      	blx	r3
    92a0:	2000      	movs	r0, #0
    92a2:	bd08      	pop	{r3, pc}
    92a4:	2000014c 	.word	0x2000014c

000092a8 <CC_PalMutexDestroy>:
    92a8:	b508      	push	{r3, lr}
    92aa:	4b03      	ldr	r3, [pc, #12]	; (92b8 <CC_PalMutexDestroy+0x10>)
    92ac:	6802      	ldr	r2, [r0, #0]
    92ae:	685b      	ldr	r3, [r3, #4]
    92b0:	6810      	ldr	r0, [r2, #0]
    92b2:	4798      	blx	r3
    92b4:	2000      	movs	r0, #0
    92b6:	bd08      	pop	{r3, pc}
    92b8:	2000014c 	.word	0x2000014c

000092bc <CC_PalPowerSaveModeInit>:
    92bc:	b570      	push	{r4, r5, r6, lr}
    92be:	4c09      	ldr	r4, [pc, #36]	; (92e4 <CC_PalPowerSaveModeInit+0x28>)
    92c0:	4d09      	ldr	r5, [pc, #36]	; (92e8 <CC_PalPowerSaveModeInit+0x2c>)
    92c2:	6920      	ldr	r0, [r4, #16]
    92c4:	68ab      	ldr	r3, [r5, #8]
    92c6:	4798      	blx	r3
    92c8:	b118      	cbz	r0, 92d2 <CC_PalPowerSaveModeInit+0x16>
    92ca:	4b08      	ldr	r3, [pc, #32]	; (92ec <CC_PalPowerSaveModeInit+0x30>)
    92cc:	4808      	ldr	r0, [pc, #32]	; (92f0 <CC_PalPowerSaveModeInit+0x34>)
    92ce:	685b      	ldr	r3, [r3, #4]
    92d0:	4798      	blx	r3
    92d2:	4a08      	ldr	r2, [pc, #32]	; (92f4 <CC_PalPowerSaveModeInit+0x38>)
    92d4:	68eb      	ldr	r3, [r5, #12]
    92d6:	6920      	ldr	r0, [r4, #16]
    92d8:	2100      	movs	r1, #0
    92da:	6011      	str	r1, [r2, #0]
    92dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92e0:	4718      	bx	r3
    92e2:	bf00      	nop
    92e4:	2000015c 	.word	0x2000015c
    92e8:	2000014c 	.word	0x2000014c
    92ec:	2000013c 	.word	0x2000013c
    92f0:	0000c4c4 	.word	0x0000c4c4
    92f4:	200029d8 	.word	0x200029d8

000092f8 <CC_PalPowerSaveModeSelect>:
    92f8:	b570      	push	{r4, r5, r6, lr}
    92fa:	4d1a      	ldr	r5, [pc, #104]	; (9364 <CC_PalPowerSaveModeSelect+0x6c>)
    92fc:	4e1a      	ldr	r6, [pc, #104]	; (9368 <CC_PalPowerSaveModeSelect+0x70>)
    92fe:	4604      	mov	r4, r0
    9300:	68b2      	ldr	r2, [r6, #8]
    9302:	6928      	ldr	r0, [r5, #16]
    9304:	4790      	blx	r2
    9306:	b9f0      	cbnz	r0, 9346 <CC_PalPowerSaveModeSelect+0x4e>
    9308:	b15c      	cbz	r4, 9322 <CC_PalPowerSaveModeSelect+0x2a>
    930a:	4c18      	ldr	r4, [pc, #96]	; (936c <CC_PalPowerSaveModeSelect+0x74>)
    930c:	6823      	ldr	r3, [r4, #0]
    930e:	b1ab      	cbz	r3, 933c <CC_PalPowerSaveModeSelect+0x44>
    9310:	2b01      	cmp	r3, #1
    9312:	d01a      	beq.n	934a <CC_PalPowerSaveModeSelect+0x52>
    9314:	3b01      	subs	r3, #1
    9316:	6023      	str	r3, [r4, #0]
    9318:	6928      	ldr	r0, [r5, #16]
    931a:	68f3      	ldr	r3, [r6, #12]
    931c:	4798      	blx	r3
    931e:	2000      	movs	r0, #0
    9320:	bd70      	pop	{r4, r5, r6, pc}
    9322:	4c12      	ldr	r4, [pc, #72]	; (936c <CC_PalPowerSaveModeSelect+0x74>)
    9324:	6821      	ldr	r1, [r4, #0]
    9326:	b939      	cbnz	r1, 9338 <CC_PalPowerSaveModeSelect+0x40>
    9328:	4b11      	ldr	r3, [pc, #68]	; (9370 <CC_PalPowerSaveModeSelect+0x78>)
    932a:	4a12      	ldr	r2, [pc, #72]	; (9374 <CC_PalPowerSaveModeSelect+0x7c>)
    932c:	2001      	movs	r0, #1
    932e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    9332:	6813      	ldr	r3, [r2, #0]
    9334:	2b00      	cmp	r3, #0
    9336:	d1fc      	bne.n	9332 <CC_PalPowerSaveModeSelect+0x3a>
    9338:	3101      	adds	r1, #1
    933a:	6021      	str	r1, [r4, #0]
    933c:	68f3      	ldr	r3, [r6, #12]
    933e:	6928      	ldr	r0, [r5, #16]
    9340:	4798      	blx	r3
    9342:	2000      	movs	r0, #0
    9344:	bd70      	pop	{r4, r5, r6, pc}
    9346:	480c      	ldr	r0, [pc, #48]	; (9378 <CC_PalPowerSaveModeSelect+0x80>)
    9348:	bd70      	pop	{r4, r5, r6, pc}
    934a:	4a0a      	ldr	r2, [pc, #40]	; (9374 <CC_PalPowerSaveModeSelect+0x7c>)
    934c:	6813      	ldr	r3, [r2, #0]
    934e:	2b00      	cmp	r3, #0
    9350:	d1fc      	bne.n	934c <CC_PalPowerSaveModeSelect+0x54>
    9352:	4a07      	ldr	r2, [pc, #28]	; (9370 <CC_PalPowerSaveModeSelect+0x78>)
    9354:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    9358:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    935c:	f7ff ff48 	bl	91f0 <CC_HalMaskInterrupt>
    9360:	6823      	ldr	r3, [r4, #0]
    9362:	e7d7      	b.n	9314 <CC_PalPowerSaveModeSelect+0x1c>
    9364:	2000015c 	.word	0x2000015c
    9368:	2000014c 	.word	0x2000014c
    936c:	200029d8 	.word	0x200029d8
    9370:	5002a000 	.word	0x5002a000
    9374:	5002b910 	.word	0x5002b910
    9378:	ffff8fe9 	.word	0xffff8fe9

0000937c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    937c:	4770      	bx	lr

0000937e <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    937e:	b129      	cbz	r1, 938c <flash_area_id_from_multi_image_slot+0xe>
    9380:	2901      	cmp	r1, #1
    9382:	bf14      	ite	ne
    9384:	f06f 0015 	mvnne.w	r0, #21
    9388:	2002      	moveq	r0, #2
    938a:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    938c:	2004      	movs	r0, #4
}
    938e:	4770      	bx	lr

00009390 <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    9390:	4770      	bx	lr

00009392 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    9392:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9396:	460e      	mov	r6, r1
    9398:	4617      	mov	r7, r2
    939a:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    939c:	4604      	mov	r4, r0
    939e:	b928      	cbnz	r0, 93ac <bootutil_tlv_iter_begin+0x1a>
        return -1;
    93a0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    93a4:	4640      	mov	r0, r8
    93a6:	b003      	add	sp, #12
    93a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    93ac:	2900      	cmp	r1, #0
    93ae:	d0f7      	beq.n	93a0 <bootutil_tlv_iter_begin+0xe>
    93b0:	2a00      	cmp	r2, #0
    93b2:	d0f5      	beq.n	93a0 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    93b4:	68cb      	ldr	r3, [r1, #12]
    93b6:	890d      	ldrh	r5, [r1, #8]
    93b8:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    93ba:	2304      	movs	r3, #4
    93bc:	eb0d 0203 	add.w	r2, sp, r3
    93c0:	4629      	mov	r1, r5
    93c2:	4638      	mov	r0, r7
    93c4:	f001 f823 	bl	a40e <flash_area_read>
    93c8:	4680      	mov	r8, r0
    93ca:	2800      	cmp	r0, #0
    93cc:	d1e8      	bne.n	93a0 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    93ce:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    93d2:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    93d4:	f646 1208 	movw	r2, #26888	; 0x6908
    93d8:	4291      	cmp	r1, r2
    93da:	d123      	bne.n	9424 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    93dc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    93e0:	4299      	cmp	r1, r3
    93e2:	d1dd      	bne.n	93a0 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    93e4:	2304      	movs	r3, #4
    93e6:	eb0d 0203 	add.w	r2, sp, r3
    93ea:	4429      	add	r1, r5
    93ec:	4638      	mov	r0, r7
    93ee:	f001 f80e 	bl	a40e <flash_area_read>
    93f2:	2800      	cmp	r0, #0
    93f4:	d1d4      	bne.n	93a0 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    93f6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    93fa:	f646 1307 	movw	r3, #26887	; 0x6907
    93fe:	429a      	cmp	r2, r3
    9400:	d1ce      	bne.n	93a0 <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    9402:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    9406:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    9408:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    940a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    940e:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    9412:	442b      	add	r3, r5
    9414:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    9416:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    9418:	4413      	add	r3, r2
    it->fap = fap;
    941a:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    941e:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    9420:	6125      	str	r5, [r4, #16]
    return 0;
    9422:	e7bf      	b.n	93a4 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    9424:	2b00      	cmp	r3, #0
    9426:	d0e6      	beq.n	93f6 <bootutil_tlv_iter_begin+0x64>
    9428:	e7ba      	b.n	93a0 <bootutil_tlv_iter_begin+0xe>

0000942a <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    942a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    942e:	460f      	mov	r7, r1
    9430:	4690      	mov	r8, r2
    9432:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    9434:	4604      	mov	r4, r0
    9436:	b920      	cbnz	r0, 9442 <bootutil_tlv_iter_next+0x18>
        return -1;
    9438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    943c:	b003      	add	sp, #12
    943e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    9442:	6803      	ldr	r3, [r0, #0]
    9444:	2b00      	cmp	r3, #0
    9446:	d0f7      	beq.n	9438 <bootutil_tlv_iter_next+0xe>
    9448:	6843      	ldr	r3, [r0, #4]
    944a:	2b00      	cmp	r3, #0
    944c:	d0f4      	beq.n	9438 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    944e:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    9452:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9456:	429a      	cmp	r2, r3
    9458:	d216      	bcs.n	9488 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    945a:	6823      	ldr	r3, [r4, #0]
    945c:	895b      	ldrh	r3, [r3, #10]
    945e:	b123      	cbz	r3, 946a <bootutil_tlv_iter_next+0x40>
    9460:	68e3      	ldr	r3, [r4, #12]
    9462:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    9464:	bf04      	itt	eq
    9466:	3304      	addeq	r3, #4
    9468:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    946a:	2304      	movs	r3, #4
    946c:	6921      	ldr	r1, [r4, #16]
    946e:	6860      	ldr	r0, [r4, #4]
    9470:	eb0d 0203 	add.w	r2, sp, r3
    9474:	f000 ffcb 	bl	a40e <flash_area_read>
        if (rc) {
    9478:	2800      	cmp	r0, #0
    947a:	d1dd      	bne.n	9438 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    947c:	7aa3      	ldrb	r3, [r4, #10]
    947e:	6925      	ldr	r5, [r4, #16]
    9480:	b123      	cbz	r3, 948c <bootutil_tlv_iter_next+0x62>
    9482:	68e3      	ldr	r3, [r4, #12]
    9484:	42ab      	cmp	r3, r5
    9486:	d801      	bhi.n	948c <bootutil_tlv_iter_next+0x62>
            return 1;
    9488:	2001      	movs	r0, #1
    948a:	e7d7      	b.n	943c <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    948c:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    948e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    9492:	4549      	cmp	r1, r9
    9494:	f102 0304 	add.w	r3, r2, #4
    9498:	d003      	beq.n	94a2 <bootutil_tlv_iter_next+0x78>
    949a:	f8bd c004 	ldrh.w	ip, [sp, #4]
    949e:	458c      	cmp	ip, r1
    94a0:	d10b      	bne.n	94ba <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    94a2:	b116      	cbz	r6, 94aa <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    94a4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    94a8:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    94aa:	3504      	adds	r5, #4
    94ac:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    94ae:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    94b2:	6922      	ldr	r2, [r4, #16]
    94b4:	4413      	add	r3, r2
    94b6:	6123      	str	r3, [r4, #16]
            return 0;
    94b8:	e7c0      	b.n	943c <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    94ba:	442b      	add	r3, r5
    94bc:	6123      	str	r3, [r4, #16]
    94be:	e7c8      	b.n	9452 <bootutil_tlv_iter_next+0x28>

000094c0 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    94c0:	f001 bb83 	b.w	abca <memcmp>

000094c4 <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    94c4:	f44f 7340 	mov.w	r3, #768	; 0x300
    94c8:	4358      	muls	r0, r3
}
    94ca:	3030      	adds	r0, #48	; 0x30
    94cc:	4770      	bx	lr

000094ce <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    94ce:	780b      	ldrb	r3, [r1, #0]
    94d0:	2b04      	cmp	r3, #4
    94d2:	d006      	beq.n	94e2 <boot_status_entries+0x14>
    return -1;
    94d4:	2b02      	cmp	r3, #2
    94d6:	bf0c      	ite	eq
    94d8:	f44f 7040 	moveq.w	r0, #768	; 0x300
    94dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    94e0:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    94e2:	f44f 7040 	mov.w	r0, #768	; 0x300
}
    94e6:	4770      	bx	lr

000094e8 <boot_status_off>:
{
    94e8:	b510      	push	{r4, lr}
    94ea:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    94ec:	f001 f80d 	bl	a50a <flash_area_align>
    return fap->fa_size - off_from_end;
    94f0:	68a3      	ldr	r3, [r4, #8]
}
    94f2:	f44f 7240 	mov.w	r2, #768	; 0x300
    return fap->fa_size - off_from_end;
    94f6:	3b30      	subs	r3, #48	; 0x30
}
    94f8:	fb02 3010 	mls	r0, r2, r0, r3
    94fc:	bd10      	pop	{r4, pc}

000094fe <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    94fe:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    9500:	2201      	movs	r2, #1
    9502:	3920      	subs	r1, #32
    9504:	f002 b878 	b.w	b5f8 <boot_write_trailer_flag>

00009508 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    9508:	b513      	push	{r0, r1, r4, lr}
    950a:	4604      	mov	r4, r0
    950c:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    950e:	f002 f812 	bl	b536 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    9512:	2304      	movs	r3, #4
    9514:	f1a0 0108 	sub.w	r1, r0, #8
    9518:	eb0d 0203 	add.w	r2, sp, r3
    951c:	4620      	mov	r0, r4
    951e:	f002 f83e 	bl	b59e <boot_write_trailer>
}
    9522:	b002      	add	sp, #8
    9524:	bd10      	pop	{r4, pc}

00009526 <boot_read_image_headers>:
{
    9526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    9528:	4613      	mov	r3, r2
{
    952a:	460f      	mov	r7, r1
    952c:	4616      	mov	r6, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    952e:	2100      	movs	r1, #0
    9530:	4602      	mov	r2, r0
{
    9532:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    9534:	f7f7 fc8a 	bl	e4c <boot_read_image_header>
        if (rc != 0) {
    9538:	4604      	mov	r4, r0
    953a:	b950      	cbnz	r0, 9552 <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    953c:	4633      	mov	r3, r6
    953e:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    9542:	2101      	movs	r1, #1
    9544:	4628      	mov	r0, r5
    9546:	f7f7 fc81 	bl	e4c <boot_read_image_header>
        if (rc != 0) {
    954a:	b110      	cbz	r0, 9552 <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    954c:	2f00      	cmp	r7, #0
    954e:	bf18      	it	ne
    9550:	4604      	movne	r4, r0
}
    9552:	4620      	mov	r0, r4
    9554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009556 <boot_read_image_size.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    9556:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9558:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    955a:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    955c:	460c      	mov	r4, r1
    955e:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    9560:	f7ff ff0d 	bl	937e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    9564:	4669      	mov	r1, sp
    9566:	b2c0      	uxtb	r0, r0
    9568:	f7f9 fbbc 	bl	2ce4 <flash_area_open>
    if (rc != 0) {
    956c:	bb30      	cbnz	r0, 95bc <boot_read_image_size.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    956e:	212c      	movs	r1, #44	; 0x2c
    9570:	fb01 5404 	mla	r4, r1, r4, r5
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    9574:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    9576:	8921      	ldrh	r1, [r4, #8]
    9578:	68e3      	ldr	r3, [r4, #12]
    957a:	18cd      	adds	r5, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    957c:	2304      	movs	r3, #4
    957e:	eb0d 0203 	add.w	r2, sp, r3
    9582:	4629      	mov	r1, r5
    9584:	f000 ff43 	bl	a40e <flash_area_read>
    9588:	b9c0      	cbnz	r0, 95bc <boot_read_image_size.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    958a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    958e:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    9590:	f646 1308 	movw	r3, #26888	; 0x6908
    9594:	429a      	cmp	r2, r3
    9596:	d116      	bne.n	95c6 <boot_read_image_size.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    9598:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    959c:	429c      	cmp	r4, r3
    959e:	d10d      	bne.n	95bc <boot_read_image_size.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    95a0:	2304      	movs	r3, #4
    95a2:	9800      	ldr	r0, [sp, #0]
    95a4:	eb0d 0203 	add.w	r2, sp, r3
    95a8:	1961      	adds	r1, r4, r5
    95aa:	f000 ff30 	bl	a40e <flash_area_read>
    95ae:	b928      	cbnz	r0, 95bc <boot_read_image_size.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    95b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    95b4:	f646 1307 	movw	r3, #26887	; 0x6907
    95b8:	429a      	cmp	r2, r3
    95ba:	d007      	beq.n	95cc <boot_read_image_size.isra.0+0x76>
    flash_area_close(fap);
    95bc:	9800      	ldr	r0, [sp, #0]
    95be:	f000 ff25 	bl	a40c <flash_area_close>
}
    95c2:	b002      	add	sp, #8
    95c4:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    95c6:	2c00      	cmp	r4, #0
    95c8:	d0f2      	beq.n	95b0 <boot_read_image_size.isra.0+0x5a>
    95ca:	e7f7      	b.n	95bc <boot_read_image_size.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    95cc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    95d0:	4421      	add	r1, r4
    95d2:	4429      	add	r1, r5
    95d4:	6031      	str	r1, [r6, #0]
    rc = 0;
    95d6:	e7f1      	b.n	95bc <boot_read_image_size.isra.0+0x66>

000095d8 <boot_read_sectors>:
{
    95d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    95da:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
    95dc:	4604      	mov	r4, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    95de:	f44f 7580 	mov.w	r5, #256	; 0x100
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    95e2:	a901      	add	r1, sp, #4
    95e4:	2004      	movs	r0, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    95e6:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    95e8:	f7f9 fb90 	bl	2d0c <flash_area_get_sectors>
    if (rc != 0) {
    95ec:	b958      	cbnz	r0, 9606 <boot_read_sectors+0x2e>
    *out_num_sectors = num_sectors;
    95ee:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    95f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    95f2:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    95f4:	a901      	add	r1, sp, #4
    95f6:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    95f8:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    95fa:	f7f9 fb87 	bl	2d0c <flash_area_get_sectors>
    if (rc != 0) {
    95fe:	4605      	mov	r5, r0
    9600:	b128      	cbz	r0, 960e <boot_read_sectors+0x36>
        return BOOT_EFLASH_SEC;
    9602:	2509      	movs	r5, #9
    9604:	e000      	b.n	9608 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    9606:	2501      	movs	r5, #1
}
    9608:	4628      	mov	r0, r5
    960a:	b003      	add	sp, #12
    960c:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    960e:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    9610:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    9612:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    9614:	f000 ff79 	bl	a50a <flash_area_align>
    9618:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    961a:	e7f5      	b.n	9608 <boot_read_sectors+0x30>

0000961c <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    961c:	2301      	movs	r3, #1
    961e:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    9620:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    9624:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    9626:	2300      	movs	r3, #0
    bs->source = 0;
    9628:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    962c:	4770      	bx	lr

0000962e <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    962e:	7943      	ldrb	r3, [r0, #5]
    9630:	2b01      	cmp	r3, #1
    9632:	d107      	bne.n	9644 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    9634:	6803      	ldr	r3, [r0, #0]
    9636:	2b01      	cmp	r3, #1
    9638:	d104      	bne.n	9644 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    963a:	7900      	ldrb	r0, [r0, #4]
    963c:	1e43      	subs	r3, r0, #1
    963e:	4258      	negs	r0, r3
    9640:	4158      	adcs	r0, r3
    9642:	4770      	bx	lr
    9644:	2000      	movs	r0, #0
}
    9646:	4770      	bx	lr

00009648 <boot_write_status>:
{
    9648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    964a:	4606      	mov	r6, r0
    964c:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    964e:	2004      	movs	r0, #4
    9650:	a901      	add	r1, sp, #4
    9652:	f7f9 fb47 	bl	2ce4 <flash_area_open>
    if (rc != 0) {
    9656:	bb38      	cbnz	r0, 96a8 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    9658:	9801      	ldr	r0, [sp, #4]
    965a:	f7ff ff45 	bl	94e8 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    965e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    9660:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    9662:	4628      	mov	r0, r5
    9664:	f000 f8e5 	bl	9832 <boot_status_internal_off>
    off = boot_status_off(fap) +
    9668:	4404      	add	r4, r0
    align = flash_area_align(fap);
    966a:	9801      	ldr	r0, [sp, #4]
    966c:	f000 ff4d 	bl	a50a <flash_area_align>
    9670:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    9672:	9801      	ldr	r0, [sp, #4]
    9674:	f000 ff52 	bl	a51c <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    9678:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    967a:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    967c:	eb0d 0002 	add.w	r0, sp, r2
    9680:	f001 fad7 	bl	ac32 <memset>
    buf[0] = bs->state;
    9684:	792b      	ldrb	r3, [r5, #4]
    9686:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    968a:	4621      	mov	r1, r4
    968c:	9801      	ldr	r0, [sp, #4]
    968e:	4633      	mov	r3, r6
    9690:	aa02      	add	r2, sp, #8
    9692:	f000 fed8 	bl	a446 <flash_area_write>
    if (rc != 0) {
    9696:	1e04      	subs	r4, r0, #0
    9698:	bf18      	it	ne
    969a:	2401      	movne	r4, #1
    flash_area_close(fap);
    969c:	9801      	ldr	r0, [sp, #4]
    969e:	f000 feb5 	bl	a40c <flash_area_close>
}
    96a2:	4620      	mov	r0, r4
    96a4:	b004      	add	sp, #16
    96a6:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    96a8:	2401      	movs	r4, #1
    96aa:	e7f7      	b.n	969c <boot_write_status+0x54>

000096ac <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    96ac:	f000 befe 	b.w	a4ac <flash_area_erase>

000096b0 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    96b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96b4:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    96b6:	2100      	movs	r1, #0
{
    96b8:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    96ba:	4608      	mov	r0, r1
    96bc:	f7ff fe5f 	bl	937e <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    96c0:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    96c2:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    96c4:	2000      	movs	r0, #0
    96c6:	f7ff fe5a 	bl	937e <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    96ca:	7833      	ldrb	r3, [r6, #0]
    96cc:	429c      	cmp	r4, r3
    96ce:	d021      	beq.n	9714 <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    96d0:	4298      	cmp	r0, r3
    96d2:	d121      	bne.n	9718 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    96d4:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    96d6:	232c      	movs	r3, #44	; 0x2c
    96d8:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    96dc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    96de:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    96e0:	f7ff fef0 	bl	94c4 <boot_trailer_sz>
    sector = boot_img_num_sectors(state, slot) - 1;
    96e4:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    96e6:	4607      	mov	r7, r0
    total_sz = 0;
    96e8:	f04f 0800 	mov.w	r8, #0
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    96ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    96ee:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    96f2:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    96f6:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    96fa:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    96fc:	464a      	mov	r2, r9
    96fe:	1ac9      	subs	r1, r1, r3
    9700:	4630      	mov	r0, r6
        assert(rc == 0);

        sector--;
        total_sz += sz;
    9702:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    9704:	f7ff ffd2 	bl	96ac <boot_erase_region>
    } while (total_sz < trailer_sz);
    9708:	45b8      	cmp	r8, r7
        sector--;
    970a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    } while (total_sz < trailer_sz);
    970e:	d3ed      	bcc.n	96ec <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    9710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    9714:	2500      	movs	r5, #0
    9716:	e7de      	b.n	96d6 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    9718:	2001      	movs	r0, #1
    971a:	e7f9      	b.n	9710 <swap_erase_trailer_sectors+0x60>

0000971c <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    971c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    971e:	4615      	mov	r5, r2
    9720:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    9722:	2002      	movs	r0, #2
    9724:	4669      	mov	r1, sp
    9726:	f001 ff7a 	bl	b61e <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    972a:	79e9      	ldrb	r1, [r5, #7]
    972c:	2901      	cmp	r1, #1
    972e:	d003      	beq.n	9738 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    9730:	2200      	movs	r2, #0
    9732:	4620      	mov	r0, r4
    9734:	f001 ff87 	bl	b646 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    9738:	f89d 3003 	ldrb.w	r3, [sp, #3]
    973c:	2b01      	cmp	r3, #1
    973e:	d102      	bne.n	9746 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    9740:	4620      	mov	r0, r4
    9742:	f001 ff63 	bl	b60c <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    9746:	68a9      	ldr	r1, [r5, #8]
    9748:	4620      	mov	r0, r4
    974a:	f7ff fedd 	bl	9508 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    974e:	4620      	mov	r0, r4
    9750:	f7fd fb68 	bl	6e24 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    9754:	2000      	movs	r0, #0
    9756:	b003      	add	sp, #12
    9758:	bd30      	pop	{r4, r5, pc}

0000975a <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    975a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    975c:	460d      	mov	r5, r1
    975e:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    9760:	f7f7 fc80 	bl	1064 <swap_status_source>
    9764:	4604      	mov	r4, r0
    9766:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    9768:	b138      	cbz	r0, 977a <swap_read_status+0x20>
    976a:	2802      	cmp	r0, #2
    976c:	d12f      	bne.n	97ce <swap_read_status+0x74>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    976e:	a901      	add	r1, sp, #4
    9770:	2004      	movs	r0, #4
    9772:	f7f9 fab7 	bl	2ce4 <flash_area_open>
    if (rc != 0) {
    9776:	b118      	cbz	r0, 9780 <swap_read_status+0x26>
        return BOOT_EFLASH;
    9778:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    977a:	4620      	mov	r0, r4
    977c:	b002      	add	sp, #8
    977e:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    9780:	9801      	ldr	r0, [sp, #4]
    9782:	462a      	mov	r2, r5
    9784:	4631      	mov	r1, r6
    9786:	f7f7 fbaf 	bl	ee8 <swap_read_status_bytes>
    if (rc == 0) {
    978a:	4604      	mov	r4, r0
    978c:	b9d8      	cbnz	r0, 97c6 <swap_read_status+0x6c>
        off = boot_swap_info_off(fap);
    978e:	9801      	ldr	r0, [sp, #4]
    9790:	f001 fed1 	bl	b536 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    9794:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    9796:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    9798:	f10d 0203 	add.w	r2, sp, #3
    979c:	9801      	ldr	r0, [sp, #4]
    979e:	f000 fe36 	bl	a40e <flash_area_read>
        if (rc != 0) {
    97a2:	4604      	mov	r4, r0
    97a4:	2800      	cmp	r0, #0
    97a6:	d1e7      	bne.n	9778 <swap_read_status+0x1e>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    97a8:	9801      	ldr	r0, [sp, #4]
    97aa:	2201      	movs	r2, #1
    97ac:	f10d 0103 	add.w	r1, sp, #3
    97b0:	f001 fed2 	bl	b558 <bootutil_buffer_is_erased>
    97b4:	b110      	cbz	r0, 97bc <swap_read_status+0x62>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    97b6:	2301      	movs	r3, #1
    97b8:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    97bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    97c0:	f003 030f 	and.w	r3, r3, #15
    97c4:	71eb      	strb	r3, [r5, #7]
    flash_area_close(fap);
    97c6:	9801      	ldr	r0, [sp, #4]
    97c8:	f000 fe20 	bl	a40c <flash_area_close>
    return rc;
    97cc:	e7d5      	b.n	977a <swap_read_status+0x20>
    switch (bs->source) {
    97ce:	2407      	movs	r4, #7
    97d0:	e7d3      	b.n	977a <swap_read_status+0x20>

000097d2 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    97d2:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    97d4:	2004      	movs	r0, #4
    97d6:	a901      	add	r1, sp, #4
    97d8:	f7f9 fa84 	bl	2ce4 <flash_area_open>
            &fap);
    if (rc != 0) {
    97dc:	b948      	cbnz	r0, 97f2 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    97de:	9801      	ldr	r0, [sp, #4]
    97e0:	f7ff fe8d 	bl	94fe <boot_write_copy_done>
    97e4:	4604      	mov	r4, r0
    flash_area_close(fap);
    97e6:	9801      	ldr	r0, [sp, #4]
    97e8:	f000 fe10 	bl	a40c <flash_area_close>
    return rc;
}
    97ec:	4620      	mov	r0, r4
    97ee:	b002      	add	sp, #8
    97f0:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    97f2:	2401      	movs	r4, #1
    97f4:	e7fa      	b.n	97ec <swap_set_copy_done+0x1a>

000097f6 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    97f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    97f8:	2004      	movs	r0, #4
    97fa:	a901      	add	r1, sp, #4
    97fc:	f7f9 fa72 	bl	2ce4 <flash_area_open>
            &fap);
    if (rc != 0) {
    9800:	b9a8      	cbnz	r0, 982e <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    9802:	9801      	ldr	r0, [sp, #4]
    9804:	a902      	add	r1, sp, #8
    9806:	f7fd fb1b 	bl	6e40 <boot_read_swap_state>
    if (rc != 0) {
    980a:	4604      	mov	r4, r0
    980c:	b968      	cbnz	r0, 982a <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    980e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9812:	2b03      	cmp	r3, #3
    9814:	d103      	bne.n	981e <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    9816:	9801      	ldr	r0, [sp, #4]
    9818:	f001 fef8 	bl	b60c <boot_write_image_ok>
    981c:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    981e:	9801      	ldr	r0, [sp, #4]
    9820:	f000 fdf4 	bl	a40c <flash_area_close>
    return rc;
}
    9824:	4620      	mov	r0, r4
    9826:	b004      	add	sp, #16
    9828:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    982a:	2401      	movs	r4, #1
    982c:	e7f7      	b.n	981e <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    982e:	2401      	movs	r4, #1
    9830:	e7f8      	b.n	9824 <swap_set_image_ok+0x2e>

00009832 <boot_status_internal_off>:
{
    9832:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    9834:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    9836:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    9838:	2b01      	cmp	r3, #1
    983a:	bf0c      	ite	eq
    983c:	2301      	moveq	r3, #1
    983e:	2302      	movne	r3, #2
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    9840:	fb01 f403 	mul.w	r4, r1, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    9844:	6803      	ldr	r3, [r0, #0]
    9846:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    984a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    984e:	fb04 f303 	mul.w	r3, r4, r3
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    9852:	bf14      	ite	ne
    9854:	020d      	lslne	r5, r1, #8
    9856:	2500      	moveq	r5, #0
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    9858:	fb01 3102 	mla	r1, r1, r2, r3
}
    985c:	1948      	adds	r0, r1, r5
    985e:	bd30      	pop	{r4, r5, pc}

00009860 <tc_sha256_update>:
{
    9860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9862:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
    9864:	b110      	cbz	r0, 986c <tc_sha256_update+0xc>
    9866:	b1f9      	cbz	r1, 98a8 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
    9868:	b90a      	cbnz	r2, 986e <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
    986a:	2001      	movs	r0, #1
}
    986c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    986e:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
    9870:	f100 0728 	add.w	r7, r0, #40	; 0x28
			s->leftover_offset = 0;
    9874:	2600      	movs	r6, #0
	while (datalen-- > 0) {
    9876:	42a5      	cmp	r5, r4
    9878:	d0f7      	beq.n	986a <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
    987a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    987c:	1c5a      	adds	r2, r3, #1
    987e:	6682      	str	r2, [r0, #104]	; 0x68
    9880:	4403      	add	r3, r0
    9882:	f814 1b01 	ldrb.w	r1, [r4], #1
    9886:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
    988a:	2a3f      	cmp	r2, #63	; 0x3f
    988c:	d9f3      	bls.n	9876 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
    988e:	4639      	mov	r1, r7
    9890:	f7f7 fdaa 	bl	13e8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
    9894:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
    9898:	f513 7300 	adds.w	r3, r3, #512	; 0x200
    989c:	f142 0200 	adc.w	r2, r2, #0
    98a0:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
    98a4:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
    98a6:	e7e6      	b.n	9876 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
    98a8:	4608      	mov	r0, r1
    98aa:	e7df      	b.n	986c <tc_sha256_update+0xc>

000098ac <tc_sha256_final>:
{
    98ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98ae:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
    98b0:	4605      	mov	r5, r0
    98b2:	2800      	cmp	r0, #0
    98b4:	d056      	beq.n	9964 <tc_sha256_final+0xb8>
    98b6:	2900      	cmp	r1, #0
    98b8:	d055      	beq.n	9966 <tc_sha256_final+0xba>
	s->bits_hashed += (s->leftover_offset << 3);
    98ba:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    98bc:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
    98c0:	00d8      	lsls	r0, r3, #3
    98c2:	1812      	adds	r2, r2, r0
    98c4:	f141 0100 	adc.w	r1, r1, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    98c8:	1c58      	adds	r0, r3, #1
    98ca:	4423      	add	r3, r4
	s->bits_hashed += (s->leftover_offset << 3);
    98cc:	e9c4 2108 	strd	r2, r1, [r4, #32]
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    98d0:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    98d2:	f04f 0280 	mov.w	r2, #128	; 0x80
    98d6:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
    98d8:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    98dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
    98e0:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    98e4:	d90a      	bls.n	98fc <tc_sha256_final+0x50>
		_set(s->leftover + s->leftover_offset, 0x00,
    98e6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    98ea:	4639      	mov	r1, r7
    98ec:	4430      	add	r0, r6
    98ee:	f000 f83c 	bl	996a <_set>
		compress(s->iv, s->leftover);
    98f2:	4631      	mov	r1, r6
    98f4:	4620      	mov	r0, r4
    98f6:	f7f7 fd77 	bl	13e8 <compress>
		s->leftover_offset = 0;
    98fa:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
    98fc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    98fe:	2100      	movs	r1, #0
    9900:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    9904:	4430      	add	r0, r6
    9906:	f000 f830 	bl	996a <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
    990a:	6a23      	ldr	r3, [r4, #32]
    990c:	ba1a      	rev	r2, r3
    990e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
    9910:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    9912:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
    9914:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    9918:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    991c:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
    991e:	0e1b      	lsrs	r3, r3, #24
    9920:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
    9924:	4631      	mov	r1, r6
    9926:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    9928:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
    992c:	f7f7 fd5c 	bl	13e8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    9930:	1f26      	subs	r6, r4, #4
    9932:	1d2b      	adds	r3, r5, #4
    9934:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
    9938:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t);
    993c:	f803 2c01 	strb.w	r2, [r3, #-1]
		*digest++ = (uint8_t)(t >> 24);
    9940:	0e11      	lsrs	r1, r2, #24
    9942:	f803 1c04 	strb.w	r1, [r3, #-4]
		*digest++ = (uint8_t)(t >> 16);
    9946:	0c11      	lsrs	r1, r2, #16
    9948:	f803 1c03 	strb.w	r1, [r3, #-3]
		*digest++ = (uint8_t)(t >> 8);
    994c:	0a11      	lsrs	r1, r2, #8
    994e:	f803 1c02 	strb.w	r1, [r3, #-2]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    9952:	3304      	adds	r3, #4
    9954:	4283      	cmp	r3, r0
    9956:	d1ef      	bne.n	9938 <tc_sha256_final+0x8c>
	_set(s, 0, sizeof(*s));
    9958:	4620      	mov	r0, r4
    995a:	2270      	movs	r2, #112	; 0x70
    995c:	2100      	movs	r1, #0
    995e:	f000 f804 	bl	996a <_set>
	return TC_CRYPTO_SUCCESS;
    9962:	2001      	movs	r0, #1
}
    9964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    9966:	4608      	mov	r0, r1
    9968:	e7fc      	b.n	9964 <tc_sha256_final+0xb8>

0000996a <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    996a:	f001 b962 	b.w	ac32 <memset>

0000996e <crc16>:

#include <sys/crc.h>

uint16_t crc16(const uint8_t *src, size_t len, uint16_t polynomial,
	    uint16_t initial_value, bool pad)
{
    996e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9972:	4607      	mov	r7, r0
	uint16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
    9974:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9978:	2800      	cmp	r0, #0
    997a:	bf14      	ite	ne
    997c:	2402      	movne	r4, #2
    997e:	2400      	moveq	r4, #0
	uint16_t crc = initial_value;
    9980:	4618      	mov	r0, r3
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
    9982:	1866      	adds	r6, r4, r1
    9984:	2300      	movs	r3, #0

			crc = (crc << 1U);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
    9986:	f04f 0c80 	mov.w	ip, #128	; 0x80
	for (i = 0; i < len + padding; i++) {
    998a:	429e      	cmp	r6, r3
    998c:	d819      	bhi.n	99c2 <crc16+0x54>
			}
		}
	}

	return crc;
}
    998e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9992:	4620      	mov	r0, r4
			crc = (crc << 1U);
    9994:	0044      	lsls	r4, r0, #1
			if (i < len) {
    9996:	428b      	cmp	r3, r1
			crc = (crc << 1U);
    9998:	b2a4      	uxth	r4, r4
			if (i < len) {
    999a:	d208      	bcs.n	99ae <crc16+0x40>
				crc |= !!(src[i] & (0x80U >> b));
    999c:	f817 8003 	ldrb.w	r8, [r7, r3]
    99a0:	fa2c fe05 	lsr.w	lr, ip, r5
    99a4:	ea18 0f0e 	tst.w	r8, lr
    99a8:	bf18      	it	ne
    99aa:	f044 0401 	orrne.w	r4, r4, #1
			if (divide != 0U) {
    99ae:	0400      	lsls	r0, r0, #16
		for (b = 0; b < 8; b++) {
    99b0:	f105 0501 	add.w	r5, r5, #1
				crc = crc ^ polynomial;
    99b4:	bf48      	it	mi
    99b6:	4054      	eormi	r4, r2
		for (b = 0; b < 8; b++) {
    99b8:	2d08      	cmp	r5, #8
    99ba:	d1ea      	bne.n	9992 <crc16+0x24>
	for (i = 0; i < len + padding; i++) {
    99bc:	3301      	adds	r3, #1
    99be:	4620      	mov	r0, r4
    99c0:	e7e3      	b.n	998a <crc16+0x1c>
		for (b = 0; b < 8; b++) {
    99c2:	2500      	movs	r5, #0
    99c4:	e7e6      	b.n	9994 <crc16+0x26>

000099c6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    99c6:	4603      	mov	r3, r0
    99c8:	b158      	cbz	r0, 99e2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    99ca:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    99cc:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    99d0:	2a01      	cmp	r2, #1
    99d2:	d003      	beq.n	99dc <sys_notify_validate+0x16>
    99d4:	2a03      	cmp	r2, #3
    99d6:	d104      	bne.n	99e2 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    99d8:	6802      	ldr	r2, [r0, #0]
    99da:	b112      	cbz	r2, 99e2 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    99dc:	2000      	movs	r0, #0
    99de:	6098      	str	r0, [r3, #8]
    99e0:	4770      	bx	lr
		return -EINVAL;
    99e2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    99e6:	4770      	bx	lr

000099e8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    99e8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    99ea:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    99ec:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    99f0:	2a03      	cmp	r2, #3
    99f2:	f04f 0200 	mov.w	r2, #0
{
    99f6:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    99f8:	bf0c      	ite	eq
    99fa:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    99fc:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    99fe:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9a00:	4770      	bx	lr

00009a02 <arch_printk_char_out>:
}
    9a02:	2000      	movs	r0, #0
    9a04:	4770      	bx	lr

00009a06 <str_out>:
{
    9a06:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    9a08:	688a      	ldr	r2, [r1, #8]
    9a0a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    9a0c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    9a0e:	b114      	cbz	r4, 9a16 <str_out+0x10>
    9a10:	684b      	ldr	r3, [r1, #4]
    9a12:	4293      	cmp	r3, r2
    9a14:	dc01      	bgt.n	9a1a <str_out+0x14>
		ctx->count++;
    9a16:	608d      	str	r5, [r1, #8]
}
    9a18:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    9a1a:	3b01      	subs	r3, #1
    9a1c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    9a1e:	bf08      	it	eq
    9a20:	2200      	moveq	r2, #0
    9a22:	608d      	str	r5, [r1, #8]
    9a24:	bf0c      	ite	eq
    9a26:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    9a28:	54a0      	strbne	r0, [r4, r2]
    9a2a:	e7f5      	b.n	9a18 <str_out+0x12>

00009a2c <printk>:
{
    9a2c:	b40f      	push	{r0, r1, r2, r3}
    9a2e:	b507      	push	{r0, r1, r2, lr}
    9a30:	a904      	add	r1, sp, #16
    9a32:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    9a36:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
    9a38:	f000 f9cd 	bl	9dd6 <z_log_printk>
}
    9a3c:	b003      	add	sp, #12
    9a3e:	f85d eb04 	ldr.w	lr, [sp], #4
    9a42:	b004      	add	sp, #16
    9a44:	4770      	bx	lr

00009a46 <snprintk>:
{
    9a46:	b40c      	push	{r2, r3}
    9a48:	b507      	push	{r0, r1, r2, lr}
    9a4a:	ab04      	add	r3, sp, #16
    9a4c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    9a50:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    9a52:	f7f7 ff2b 	bl	18ac <vsnprintk>
}
    9a56:	b003      	add	sp, #12
    9a58:	f85d eb04 	ldr.w	lr, [sp], #4
    9a5c:	b002      	add	sp, #8
    9a5e:	4770      	bx	lr

00009a60 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9a60:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    9a62:	f013 0307 	ands.w	r3, r3, #7
    9a66:	d105      	bne.n	9a74 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9a68:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	bf0c      	ite	eq
    9a6e:	2000      	moveq	r0, #0
    9a70:	2003      	movne	r0, #3
    9a72:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9a74:	2b02      	cmp	r3, #2
    9a76:	d105      	bne.n	9a84 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    9a78:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	bf14      	ite	ne
    9a7e:	2000      	movne	r0, #0
    9a80:	2004      	moveq	r0, #4
    9a82:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    9a84:	2b01      	cmp	r3, #1
    9a86:	d105      	bne.n	9a94 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    9a88:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    9a8a:	2b00      	cmp	r3, #0
    9a8c:	bf0c      	ite	eq
    9a8e:	2000      	moveq	r0, #0
    9a90:	2005      	movne	r0, #5
    9a92:	4770      	bx	lr
	int evt = EVT_NOP;
    9a94:	2000      	movs	r0, #0
}
    9a96:	4770      	bx	lr

00009a98 <notify_one>:
{
    9a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a9c:	460d      	mov	r5, r1
    9a9e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9aa0:	4619      	mov	r1, r3
    9aa2:	1d28      	adds	r0, r5, #4
{
    9aa4:	4690      	mov	r8, r2
    9aa6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9aa8:	f7ff ff9e 	bl	99e8 <sys_notify_finalize>
	if (cb) {
    9aac:	4604      	mov	r4, r0
    9aae:	b138      	cbz	r0, 9ac0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    9ab0:	4633      	mov	r3, r6
    9ab2:	4642      	mov	r2, r8
    9ab4:	4629      	mov	r1, r5
    9ab6:	4638      	mov	r0, r7
    9ab8:	46a4      	mov	ip, r4
}
    9aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9abe:	4760      	bx	ip
}
    9ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009ac4 <transition_complete>:
{
    9ac4:	b410      	push	{r4}
	__asm__ volatile(
    9ac6:	f04f 0420 	mov.w	r4, #32
    9aca:	f3ef 8211 	mrs	r2, BASEPRI
    9ace:	f384 8811 	msr	BASEPRI, r4
    9ad2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    9ad6:	6141      	str	r1, [r0, #20]
}
    9ad8:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    9ada:	2101      	movs	r1, #1
    9adc:	f7f7 befa 	b.w	18d4 <process_event>

00009ae0 <validate_args>:
{
    9ae0:	b510      	push	{r4, lr}
    9ae2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9ae4:	b140      	cbz	r0, 9af8 <validate_args+0x18>
    9ae6:	b139      	cbz	r1, 9af8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    9ae8:	1d08      	adds	r0, r1, #4
    9aea:	f7ff ff6c 	bl	99c6 <sys_notify_validate>
	if ((rv == 0)
    9aee:	b928      	cbnz	r0, 9afc <validate_args+0x1c>
	    && ((cli->notify.flags
    9af0:	68a3      	ldr	r3, [r4, #8]
    9af2:	f033 0303 	bics.w	r3, r3, #3
    9af6:	d001      	beq.n	9afc <validate_args+0x1c>
		rv = -EINVAL;
    9af8:	f06f 0015 	mvn.w	r0, #21
}
    9afc:	bd10      	pop	{r4, pc}

00009afe <onoff_manager_init>:
{
    9afe:	b538      	push	{r3, r4, r5, lr}
    9b00:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9b02:	4605      	mov	r5, r0
    9b04:	b158      	cbz	r0, 9b1e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9b06:	b151      	cbz	r1, 9b1e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9b08:	680b      	ldr	r3, [r1, #0]
    9b0a:	b143      	cbz	r3, 9b1e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9b0c:	684b      	ldr	r3, [r1, #4]
    9b0e:	b133      	cbz	r3, 9b1e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9b10:	221c      	movs	r2, #28
    9b12:	2100      	movs	r1, #0
    9b14:	f001 f88d 	bl	ac32 <memset>
    9b18:	612c      	str	r4, [r5, #16]
	return 0;
    9b1a:	2000      	movs	r0, #0
}
    9b1c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9b1e:	f06f 0015 	mvn.w	r0, #21
    9b22:	e7fb      	b.n	9b1c <onoff_manager_init+0x1e>

00009b24 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9b24:	b570      	push	{r4, r5, r6, lr}
    9b26:	4604      	mov	r4, r0
    9b28:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    9b2a:	f7ff ffd9 	bl	9ae0 <validate_args>

	if (rv < 0) {
    9b2e:	1e05      	subs	r5, r0, #0
    9b30:	db31      	blt.n	9b96 <onoff_request+0x72>
    9b32:	f04f 0320 	mov.w	r3, #32
    9b36:	f3ef 8111 	mrs	r1, BASEPRI
    9b3a:	f383 8811 	msr	BASEPRI, r3
    9b3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    9b42:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9b44:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    9b46:	f64f 75ff 	movw	r5, #65535	; 0xffff
    9b4a:	42ab      	cmp	r3, r5
    9b4c:	f000 0207 	and.w	r2, r0, #7
    9b50:	d02e      	beq.n	9bb0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    9b52:	2a02      	cmp	r2, #2
    9b54:	d10e      	bne.n	9b74 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    9b56:	3301      	adds	r3, #1
    9b58:	8363      	strh	r3, [r4, #26]
	rv = state;
    9b5a:	4615      	mov	r5, r2
		notify = true;
    9b5c:	2301      	movs	r3, #1
	__asm__ volatile(
    9b5e:	f381 8811 	msr	BASEPRI, r1
    9b62:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    9b66:	b1b3      	cbz	r3, 9b96 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    9b68:	2300      	movs	r3, #0
    9b6a:	4631      	mov	r1, r6
    9b6c:	4620      	mov	r0, r4
    9b6e:	f7ff ff93 	bl	9a98 <notify_one>
    9b72:	e010      	b.n	9b96 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    9b74:	0783      	lsls	r3, r0, #30
    9b76:	d001      	beq.n	9b7c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    9b78:	2a06      	cmp	r2, #6
    9b7a:	d10e      	bne.n	9b9a <onoff_request+0x76>
	parent->next = child;
    9b7c:	2300      	movs	r3, #0
    9b7e:	6033      	str	r3, [r6, #0]
	return list->tail;
    9b80:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    9b82:	b993      	cbnz	r3, 9baa <onoff_request+0x86>
	list->head = node;
    9b84:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    9b88:	4615      	mov	r5, r2
    9b8a:	b962      	cbnz	r2, 9ba6 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    9b8c:	460a      	mov	r2, r1
    9b8e:	4620      	mov	r0, r4
    9b90:	2102      	movs	r1, #2
    9b92:	f7f7 fe9f 	bl	18d4 <process_event>
		}
	}

	return rv;
}
    9b96:	4628      	mov	r0, r5
    9b98:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    9b9a:	2a05      	cmp	r2, #5
    9b9c:	bf0c      	ite	eq
    9b9e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    9ba2:	f06f 0504 	mvnne.w	r5, #4
    9ba6:	2300      	movs	r3, #0
    9ba8:	e7d9      	b.n	9b5e <onoff_request+0x3a>
	parent->next = child;
    9baa:	601e      	str	r6, [r3, #0]
	list->tail = node;
    9bac:	6066      	str	r6, [r4, #4]
}
    9bae:	e7eb      	b.n	9b88 <onoff_request+0x64>
		rv = -EAGAIN;
    9bb0:	f06f 050a 	mvn.w	r5, #10
    9bb4:	e7f7      	b.n	9ba6 <onoff_request+0x82>

00009bb6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9bb6:	4604      	mov	r4, r0
    9bb8:	b508      	push	{r3, lr}
    9bba:	4608      	mov	r0, r1
    9bbc:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    9bbe:	461a      	mov	r2, r3
    9bc0:	47a0      	blx	r4
	return z_impl_k_current_get();
    9bc2:	f7fe ffc9 	bl	8b58 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    9bc6:	f7fa fdf7 	bl	47b8 <z_impl_k_thread_abort>

00009bca <encode_uint>:
{
    9bca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bce:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    9bd0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    9bd2:	2b6f      	cmp	r3, #111	; 0x6f
{
    9bd4:	4680      	mov	r8, r0
    9bd6:	460f      	mov	r7, r1
    9bd8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9bda:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    9bde:	d029      	beq.n	9c34 <encode_uint+0x6a>
    9be0:	d824      	bhi.n	9c2c <encode_uint+0x62>
		return 16;
    9be2:	2b58      	cmp	r3, #88	; 0x58
    9be4:	bf14      	ite	ne
    9be6:	260a      	movne	r6, #10
    9be8:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    9bea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    9bee:	4632      	mov	r2, r6
    9bf0:	2300      	movs	r3, #0
    9bf2:	4640      	mov	r0, r8
    9bf4:	4639      	mov	r1, r7
    9bf6:	f7f6 fad3 	bl	1a0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9bfa:	2a09      	cmp	r2, #9
    9bfc:	b2d4      	uxtb	r4, r2
    9bfe:	d81e      	bhi.n	9c3e <encode_uint+0x74>
    9c00:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    9c02:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9c04:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    9c06:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9c0a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    9c0e:	d301      	bcc.n	9c14 <encode_uint+0x4a>
    9c10:	45d1      	cmp	r9, sl
    9c12:	d811      	bhi.n	9c38 <encode_uint+0x6e>
	if (conv->flag_hash) {
    9c14:	782b      	ldrb	r3, [r5, #0]
    9c16:	069b      	lsls	r3, r3, #26
    9c18:	d505      	bpl.n	9c26 <encode_uint+0x5c>
		if (radix == 8) {
    9c1a:	2e08      	cmp	r6, #8
    9c1c:	d115      	bne.n	9c4a <encode_uint+0x80>
			conv->altform_0 = true;
    9c1e:	78ab      	ldrb	r3, [r5, #2]
    9c20:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    9c24:	70ab      	strb	r3, [r5, #2]
}
    9c26:	4648      	mov	r0, r9
    9c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    9c2c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    9c30:	2b70      	cmp	r3, #112	; 0x70
    9c32:	e7d7      	b.n	9be4 <encode_uint+0x1a>
	switch (specifier) {
    9c34:	2608      	movs	r6, #8
    9c36:	e7d8      	b.n	9bea <encode_uint+0x20>
		value /= radix;
    9c38:	4680      	mov	r8, r0
    9c3a:	460f      	mov	r7, r1
    9c3c:	e7d7      	b.n	9bee <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9c3e:	f1bb 0f19 	cmp.w	fp, #25
    9c42:	bf94      	ite	ls
    9c44:	3437      	addls	r4, #55	; 0x37
    9c46:	3457      	addhi	r4, #87	; 0x57
    9c48:	e7db      	b.n	9c02 <encode_uint+0x38>
		} else if (radix == 16) {
    9c4a:	2e10      	cmp	r6, #16
    9c4c:	d1eb      	bne.n	9c26 <encode_uint+0x5c>
			conv->altform_0c = true;
    9c4e:	78ab      	ldrb	r3, [r5, #2]
    9c50:	f043 0310 	orr.w	r3, r3, #16
    9c54:	e7e6      	b.n	9c24 <encode_uint+0x5a>

00009c56 <outs>:
{
    9c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c5a:	4607      	mov	r7, r0
    9c5c:	4688      	mov	r8, r1
    9c5e:	4615      	mov	r5, r2
    9c60:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9c62:	4614      	mov	r4, r2
    9c64:	42b4      	cmp	r4, r6
    9c66:	eba4 0005 	sub.w	r0, r4, r5
    9c6a:	d302      	bcc.n	9c72 <outs+0x1c>
    9c6c:	b93e      	cbnz	r6, 9c7e <outs+0x28>
    9c6e:	7823      	ldrb	r3, [r4, #0]
    9c70:	b12b      	cbz	r3, 9c7e <outs+0x28>
		int rc = out((int)*sp++, ctx);
    9c72:	f814 0b01 	ldrb.w	r0, [r4], #1
    9c76:	4641      	mov	r1, r8
    9c78:	47b8      	blx	r7
		if (rc < 0) {
    9c7a:	2800      	cmp	r0, #0
    9c7c:	daf2      	bge.n	9c64 <outs+0xe>
}
    9c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009c82 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    9c82:	4770      	bx	lr

00009c84 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    9c84:	2300      	movs	r3, #0
	list->head = NULL;
    9c86:	e9c0 3300 	strd	r3, r3, [r0]
}
    9c8a:	4770      	bx	lr

00009c8c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    9c8c:	6803      	ldr	r3, [r0, #0]
    9c8e:	b923      	cbnz	r3, 9c9a <log_list_add_tail+0xe>
		list->head = msg;
    9c90:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    9c92:	2300      	movs	r3, #0
	list->tail = msg;
    9c94:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    9c96:	600b      	str	r3, [r1, #0]
}
    9c98:	4770      	bx	lr
		list->tail->next = msg;
    9c9a:	6843      	ldr	r3, [r0, #4]
    9c9c:	6019      	str	r1, [r3, #0]
    9c9e:	e7f8      	b.n	9c92 <log_list_add_tail+0x6>

00009ca0 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    9ca0:	6800      	ldr	r0, [r0, #0]
    9ca2:	4770      	bx	lr

00009ca4 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    9ca4:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    9ca6:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    9ca8:	b108      	cbz	r0, 9cae <log_list_head_get+0xa>
		list->head = list->head->next;
    9caa:	6802      	ldr	r2, [r0, #0]
    9cac:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    9cae:	4770      	bx	lr

00009cb0 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    9cb0:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    9cb2:	f7f8 fd39 	bl	2728 <log_msg_chunk_alloc>

	if (msg != NULL) {
    9cb6:	b118      	cbz	r0, 9cc0 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    9cb8:	2301      	movs	r3, #1
    9cba:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    9cbc:	2300      	movs	r3, #0
    9cbe:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
    9cc0:	bd08      	pop	{r3, pc}

00009cc2 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9cc2:	f7f9 bb79 	b.w	33b8 <sys_clock_cycle_get_32>

00009cc6 <dummy_timestamp>:
    9cc6:	2000      	movs	r0, #0
    9cc8:	4770      	bx	lr

00009cca <z_log_get_s_mask>:
{
    9cca:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ccc:	4605      	mov	r5, r0
	uint32_t mask = 0U;
    9cce:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    9cd0:	4603      	mov	r3, r0
	bool arm = false;
    9cd2:	4602      	mov	r2, r0
				mask |= BIT(arg);
    9cd4:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    9cd6:	f815 4b01 	ldrb.w	r4, [r5], #1
    9cda:	b10c      	cbz	r4, 9ce0 <z_log_get_s_mask+0x16>
    9cdc:	428b      	cmp	r3, r1
    9cde:	d300      	bcc.n	9ce2 <z_log_get_s_mask+0x18>
}
    9ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    9ce2:	2c25      	cmp	r4, #37	; 0x25
    9ce4:	d102      	bne.n	9cec <z_log_get_s_mask+0x22>
			arm = !arm;
    9ce6:	f082 0201 	eor.w	r2, r2, #1
    9cea:	e7f4      	b.n	9cd6 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    9cec:	2a00      	cmp	r2, #0
    9cee:	d0f2      	beq.n	9cd6 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    9cf0:	f044 0620 	orr.w	r6, r4, #32
    9cf4:	3e61      	subs	r6, #97	; 0x61
    9cf6:	2e19      	cmp	r6, #25
    9cf8:	d8ed      	bhi.n	9cd6 <z_log_get_s_mask+0xc>
			if (curr == 's') {
    9cfa:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    9cfc:	bf04      	itt	eq
    9cfe:	fa07 f203 	lsleq.w	r2, r7, r3
    9d02:	4310      	orreq	r0, r2
			arg++;
    9d04:	3301      	adds	r3, #1
			arm = false;
    9d06:	2200      	movs	r2, #0
    9d08:	e7e5      	b.n	9cd6 <z_log_get_s_mask+0xc>

00009d0a <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    9d0a:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    9d0c:	f7f8 fb2e 	bl	236c <log_init>
	}

	return 0;
}
    9d10:	2000      	movs	r0, #0
    9d12:	bd08      	pop	{r3, pc}

00009d14 <log_0>:
{
    9d14:	b538      	push	{r3, r4, r5, lr}
    9d16:	4605      	mov	r5, r0
    9d18:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    9d1a:	f7ff ffc9 	bl	9cb0 <z_log_msg_std_alloc>

	if (msg != NULL) {
    9d1e:	b128      	cbz	r0, 9d2c <log_0+0x18>
		msg->str = str;
    9d20:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    9d22:	4621      	mov	r1, r4
}
    9d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    9d28:	f7f8 bc3e 	b.w	25a8 <msg_finalize>
}
    9d2c:	bd38      	pop	{r3, r4, r5, pc}

00009d2e <log_1>:
{
    9d2e:	b570      	push	{r4, r5, r6, lr}
    9d30:	4606      	mov	r6, r0
    9d32:	460d      	mov	r5, r1
    9d34:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    9d36:	f7ff ffbb 	bl	9cb0 <z_log_msg_std_alloc>

	if (msg != NULL) {
    9d3a:	b158      	cbz	r0, 9d54 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    9d3c:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    9d3e:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    9d40:	2101      	movs	r1, #1
    9d42:	f361 1207 	bfi	r2, r1, #4, #4
    9d46:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
    9d48:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
    9d4a:	4621      	mov	r1, r4
}
    9d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    9d50:	f7f8 bc2a 	b.w	25a8 <msg_finalize>
}
    9d54:	bd70      	pop	{r4, r5, r6, pc}

00009d56 <log_2>:
{
    9d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d5a:	4680      	mov	r8, r0
    9d5c:	460f      	mov	r7, r1
    9d5e:	4616      	mov	r6, r2
    9d60:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    9d62:	f7ff ffa5 	bl	9cb0 <z_log_msg_std_alloc>

	if (msg != NULL) {
    9d66:	b168      	cbz	r0, 9d84 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    9d68:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    9d6a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    9d6e:	2202      	movs	r2, #2
    9d70:	f362 1307 	bfi	r3, r2, #4, #4
    9d74:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    9d76:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
    9d7a:	4629      	mov	r1, r5
}
    9d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    9d80:	f7f8 bc12 	b.w	25a8 <msg_finalize>
}
    9d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009d88 <log_3>:
{
    9d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d8c:	4680      	mov	r8, r0
    9d8e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    9d92:	460f      	mov	r7, r1
    9d94:	4616      	mov	r6, r2
    9d96:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    9d98:	f7ff ff8a 	bl	9cb0 <z_log_msg_std_alloc>

	if (msg != NULL) {
    9d9c:	b170      	cbz	r0, 9dbc <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    9d9e:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    9da0:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    9da4:	2203      	movs	r2, #3
    9da6:	f362 1307 	bfi	r3, r2, #4, #4
    9daa:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    9dac:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
    9db0:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
    9db2:	4649      	mov	r1, r9
}
    9db4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    9db8:	f7f8 bbf6 	b.w	25a8 <msg_finalize>
}
    9dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009dc0 <log_n>:
{
    9dc0:	b510      	push	{r4, lr}
    9dc2:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    9dc4:	f000 f8b9 	bl	9f3a <log_msg_create_n>
		if (msg == NULL) {
    9dc8:	b120      	cbz	r0, 9dd4 <log_n+0x14>
		msg_finalize(msg, src_level);
    9dca:	4621      	mov	r1, r4
}
    9dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
    9dd0:	f7f8 bbea 	b.w	25a8 <msg_finalize>
}
    9dd4:	bd10      	pop	{r4, pc}

00009dd6 <z_log_printk>:
{
    9dd6:	b500      	push	{lr}
    9dd8:	b0a3      	sub	sp, #140	; 0x8c
    9dda:	4602      	mov	r2, r0
    9ddc:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
    9dde:	a801      	add	r0, sp, #4
    9de0:	2181      	movs	r1, #129	; 0x81
    9de2:	f7f7 fd63 	bl	18ac <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
    9de6:	2881      	cmp	r0, #129	; 0x81
    9de8:	4602      	mov	r2, r0
    9dea:	a901      	add	r1, sp, #4
    9dec:	bf28      	it	cs
    9dee:	2281      	movcs	r2, #129	; 0x81
    9df0:	2000      	movs	r0, #0
    9df2:	f000 f8fe 	bl	9ff2 <log_msg_hexdump_create>
			if (msg == NULL) {
    9df6:	b118      	cbz	r0, 9e00 <z_log_printk+0x2a>
			msg_finalize(msg, src_level_union.structure);
    9df8:	f04f 0100 	mov.w	r1, #0
    9dfc:	f7f8 fbd4 	bl	25a8 <msg_finalize>
}
    9e00:	b023      	add	sp, #140	; 0x8c
    9e02:	f85d fb04 	ldr.w	pc, [sp], #4

00009e06 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    9e06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e0a:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
    9e0c:	8903      	ldrh	r3, [r0, #8]
{
    9e0e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    9e12:	460e      	mov	r6, r1
    9e14:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
    9e16:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    9e1a:	42a2      	cmp	r2, r4
    9e1c:	d803      	bhi.n	9e26 <log_msg_hexdump_data_op+0x20>
		*length = 0;
    9e1e:	2300      	movs	r3, #0
    9e20:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    9e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    9e26:	680b      	ldr	r3, [r1, #0]
    9e28:	4423      	add	r3, r4
    9e2a:	4293      	cmp	r3, r2
		*length = available_len - offset;
    9e2c:	bf84      	itt	hi
    9e2e:	1b13      	subhi	r3, r2, r4
    9e30:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    9e32:	2a0c      	cmp	r2, #12
	req_len = *length;
    9e34:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    9e38:	d92a      	bls.n	9e90 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
    9e3a:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    9e3c:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    9e40:	d82d      	bhi.n	9e9e <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
    9e42:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    9e44:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    9e46:	454a      	cmp	r2, r9
    9e48:	bf28      	it	cs
    9e4a:	464a      	movcs	r2, r9
    9e4c:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
    9e4e:	4420      	add	r0, r4
		if (put_op) {
    9e50:	b317      	cbz	r7, 9e98 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
    9e52:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    9e54:	f000 fee2 	bl	ac1c <memcpy>
		req_len -= cpy_len;
    9e58:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    9e5c:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
    9e5e:	f1b9 0f00 	cmp.w	r9, #0
    9e62:	d0de      	beq.n	9e22 <log_msg_hexdump_data_op+0x1c>
    9e64:	f1b8 0f00 	cmp.w	r8, #0
    9e68:	d0db      	beq.n	9e22 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    9e6a:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    9e6e:	454d      	cmp	r5, r9
    9e70:	bf28      	it	cs
    9e72:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
    9e74:	1d20      	adds	r0, r4, #4
    9e76:	4440      	add	r0, r8
    9e78:	462a      	mov	r2, r5
		if (put_op) {
    9e7a:	b1bf      	cbz	r7, 9eac <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
    9e7c:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    9e7e:	f000 fecd 	bl	ac1c <memcpy>
		req_len -= cpy_len;
    9e82:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    9e86:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    9e8a:	442e      	add	r6, r5
		offset = 0;
    9e8c:	2400      	movs	r4, #0
    9e8e:	e7e6      	b.n	9e5e <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
    9e90:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    9e92:	f04f 0800 	mov.w	r8, #0
    9e96:	e7d6      	b.n	9e46 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
    9e98:	4601      	mov	r1, r0
    9e9a:	4630      	mov	r0, r6
    9e9c:	e7da      	b.n	9e54 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    9e9e:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    9ea0:	2c1b      	cmp	r4, #27
    9ea2:	d9dc      	bls.n	9e5e <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
    9ea4:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    9ea8:	3c1c      	subs	r4, #28
    9eaa:	e7f9      	b.n	9ea0 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
    9eac:	4601      	mov	r1, r0
    9eae:	4630      	mov	r0, r6
    9eb0:	e7e5      	b.n	9e7e <log_msg_hexdump_data_op+0x78>

00009eb2 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9eb2:	3004      	adds	r0, #4
    9eb4:	f3bf 8f5b 	dmb	ish
    9eb8:	e850 3f00 	ldrex	r3, [r0]
    9ebc:	3301      	adds	r3, #1
    9ebe:	e840 3200 	strex	r2, r3, [r0]
    9ec2:	2a00      	cmp	r2, #0
    9ec4:	d1f8      	bne.n	9eb8 <log_msg_get+0x6>
    9ec6:	f3bf 8f5b 	dmb	ish
}
    9eca:	4770      	bx	lr

00009ecc <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    9ecc:	7a40      	ldrb	r0, [r0, #9]
}
    9ece:	0900      	lsrs	r0, r0, #4
    9ed0:	4770      	bx	lr

00009ed2 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    9ed2:	7a43      	ldrb	r3, [r0, #9]
    9ed4:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    9ed8:	ea4f 1213 	mov.w	r2, r3, lsr #4
    9edc:	d216      	bcs.n	9f0c <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    9ede:	2a03      	cmp	r2, #3
    9ee0:	d803      	bhi.n	9eea <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    9ee2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9ee6:	6940      	ldr	r0, [r0, #20]
    9ee8:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    9eea:	2901      	cmp	r1, #1
    9eec:	d803      	bhi.n	9ef6 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    9eee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9ef2:	6980      	ldr	r0, [r0, #24]
    9ef4:	4770      	bx	lr
	cont = msg->payload.ext.next;
    9ef6:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    9ef8:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    9efa:	2906      	cmp	r1, #6
    9efc:	d803      	bhi.n	9f06 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    9efe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9f02:	6848      	ldr	r0, [r1, #4]
    9f04:	4770      	bx	lr
		cont = cont->next;
    9f06:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    9f08:	3907      	subs	r1, #7
		cont = cont->next;
    9f0a:	e7f6      	b.n	9efa <log_msg_arg_get+0x28>
		return 0;
    9f0c:	2000      	movs	r0, #0
}
    9f0e:	4770      	bx	lr

00009f10 <log_msg_put>:
{
    9f10:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    9f12:	1d02      	adds	r2, r0, #4
    9f14:	f3bf 8f5b 	dmb	ish
    9f18:	e852 1f00 	ldrex	r1, [r2]
    9f1c:	3901      	subs	r1, #1
    9f1e:	e842 1c00 	strex	ip, r1, [r2]
    9f22:	f1bc 0f00 	cmp.w	ip, #0
    9f26:	d1f7      	bne.n	9f18 <log_msg_put+0x8>
    9f28:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    9f2c:	685b      	ldr	r3, [r3, #4]
    9f2e:	b90b      	cbnz	r3, 9f34 <log_msg_put+0x24>
		msg_free(msg);
    9f30:	f7f8 bc0e 	b.w	2750 <msg_free>
}
    9f34:	4770      	bx	lr

00009f36 <log_msg_str_get>:
}
    9f36:	6900      	ldr	r0, [r0, #16]
    9f38:	4770      	bx	lr

00009f3a <log_msg_create_n>:
{
    9f3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f3e:	4680      	mov	r8, r0
    9f40:	460f      	mov	r7, r1
    9f42:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    9f44:	f7f8 fbf0 	bl	2728 <log_msg_chunk_alloc>
	if (msg != NULL) {
    9f48:	4604      	mov	r4, r0
    9f4a:	b358      	cbz	r0, 9fa4 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
    9f4c:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    9f4e:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    9f52:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    9f54:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    9f56:	f8a0 a008 	strh.w	sl, [r0, #8]
    9f5a:	d90c      	bls.n	9f76 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
    9f5c:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
    9f5e:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
    9f62:	f043 0302 	orr.w	r3, r3, #2
    9f66:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    9f68:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
    9f6c:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
    9f70:	f1b9 0f00 	cmp.w	r9, #0
    9f74:	dc0e      	bgt.n	9f94 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
    9f76:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
    9f78:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    9f7c:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    9f80:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    9f82:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    9f84:	d819      	bhi.n	9fba <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
    9f86:	00aa      	lsls	r2, r5, #2
    9f88:	4639      	mov	r1, r7
    9f8a:	f104 0014 	add.w	r0, r4, #20
    9f8e:	f000 fe45 	bl	ac1c <memcpy>
	while (nargs != 0U) {
    9f92:	e007      	b.n	9fa4 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    9f94:	f7f8 fbc8 	bl	2728 <log_msg_chunk_alloc>
		if (cont == NULL) {
    9f98:	4606      	mov	r6, r0
    9f9a:	b930      	cbnz	r0, 9faa <log_msg_create_n+0x70>
			msg_free(msg);
    9f9c:	4620      	mov	r0, r4
    9f9e:	f7f8 fbd7 	bl	2750 <msg_free>
			return NULL;
    9fa2:	4634      	mov	r4, r6
}
    9fa4:	4620      	mov	r0, r4
    9fa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    9faa:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    9fae:	f1a9 0907 	sub.w	r9, r9, #7
    9fb2:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
    9fb6:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
    9fb8:	e7da      	b.n	9f70 <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
    9fba:	4639      	mov	r1, r7
    9fbc:	2208      	movs	r2, #8
    9fbe:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    9fc2:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
    9fc6:	f000 fe29 	bl	ac1c <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    9fca:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    9fcc:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    9fce:	2d07      	cmp	r5, #7
    9fd0:	462e      	mov	r6, r5
    9fd2:	bf28      	it	cs
    9fd4:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    9fd6:	ea4f 0986 	mov.w	r9, r6, lsl #2
    9fda:	4639      	mov	r1, r7
    9fdc:	f108 0004 	add.w	r0, r8, #4
    9fe0:	464a      	mov	r2, r9
    9fe2:	f000 fe1b 	bl	ac1c <memcpy>
	while (nargs != 0U) {
    9fe6:	1bad      	subs	r5, r5, r6
		cont = cont->next;
    9fe8:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
    9fec:	444f      	add	r7, r9
	while (nargs != 0U) {
    9fee:	d1ee      	bne.n	9fce <log_msg_create_n+0x94>
    9ff0:	e7d8      	b.n	9fa4 <log_msg_create_n+0x6a>

00009ff2 <log_msg_hexdump_create>:
{
    9ff2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    9ff6:	f643 75ff 	movw	r5, #16383	; 0x3fff
    9ffa:	4295      	cmp	r5, r2
{
    9ffc:	4680      	mov	r8, r0
    9ffe:	460e      	mov	r6, r1
    a000:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
    a002:	bf28      	it	cs
    a004:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
    a006:	f7f8 fb8f 	bl	2728 <log_msg_chunk_alloc>
	if (msg == NULL) {
    a00a:	4604      	mov	r4, r0
    a00c:	b388      	cbz	r0, a072 <log_msg_hexdump_create+0x80>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    a00e:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
    a010:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
    a014:	2301      	movs	r3, #1
    a016:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    a018:	00ab      	lsls	r3, r5, #2
    a01a:	f043 0301 	orr.w	r3, r3, #1
    a01e:	f002 0202 	and.w	r2, r2, #2
    a022:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    a024:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
    a026:	8103      	strh	r3, [r0, #8]
		(void)memcpy(msg->payload.single.bytes, data, length);
    a028:	f100 0814 	add.w	r8, r0, #20
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    a02c:	d918      	bls.n	a060 <log_msg_hexdump_create+0x6e>
		(void)memcpy(msg->payload.ext.data.bytes,
    a02e:	4631      	mov	r1, r6
    a030:	2208      	movs	r2, #8
    a032:	3018      	adds	r0, #24
    a034:	f000 fdf2 	bl	ac1c <memcpy>
		msg->hdr.params.generic.ext = 1;
    a038:	7a23      	ldrb	r3, [r4, #8]
		msg->payload.ext.next = NULL;
    a03a:	f04f 0900 	mov.w	r9, #0
		msg->hdr.params.generic.ext = 1;
    a03e:	f043 0302 	orr.w	r3, r3, #2
		msg->payload.ext.next = NULL;
    a042:	f8c4 9014 	str.w	r9, [r4, #20]
		msg->hdr.params.generic.ext = 1;
    a046:	7223      	strb	r3, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    a048:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    a04a:	3d08      	subs	r5, #8
	while (length > 0) {
    a04c:	b18d      	cbz	r5, a072 <log_msg_hexdump_create+0x80>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    a04e:	f7f8 fb6b 	bl	2728 <log_msg_chunk_alloc>
		if (cont == NULL) {
    a052:	4607      	mov	r7, r0
    a054:	b980      	cbnz	r0, a078 <log_msg_hexdump_create+0x86>
			msg_free(msg);
    a056:	4620      	mov	r0, r4
    a058:	f7f8 fb7a 	bl	2750 <msg_free>
			return NULL;
    a05c:	463c      	mov	r4, r7
    a05e:	e008      	b.n	a072 <log_msg_hexdump_create+0x80>
		(void)memcpy(msg->payload.single.bytes, data, length);
    a060:	462a      	mov	r2, r5
    a062:	4631      	mov	r1, r6
    a064:	4640      	mov	r0, r8
    a066:	f000 fdd9 	bl	ac1c <memcpy>
		msg->hdr.params.generic.ext = 0;
    a06a:	7a23      	ldrb	r3, [r4, #8]
    a06c:	f36f 0341 	bfc	r3, #1, #1
    a070:	7223      	strb	r3, [r4, #8]
}
    a072:	4620      	mov	r0, r4
    a074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
    a078:	2d1c      	cmp	r5, #28
    a07a:	462f      	mov	r7, r5
    a07c:	bf28      	it	cs
    a07e:	271c      	movcs	r7, #28
		*prev_cont = cont;
    a080:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
    a084:	4631      	mov	r1, r6
		cont->next = NULL;
    a086:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
    a08a:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
    a08c:	463a      	mov	r2, r7
    a08e:	3004      	adds	r0, #4
    a090:	f000 fdc4 	bl	ac1c <memcpy>
		data += chunk_length;
    a094:	443e      	add	r6, r7
		length -= chunk_length;
    a096:	1bed      	subs	r5, r5, r7
    a098:	e7d8      	b.n	a04c <log_msg_hexdump_create+0x5a>

0000a09a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    a09a:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    a09c:	2400      	movs	r4, #0
    a09e:	9400      	str	r4, [sp, #0]
    a0a0:	f7ff feb1 	bl	9e06 <log_msg_hexdump_data_op>
}
    a0a4:	b002      	add	sp, #8
    a0a6:	bd10      	pop	{r4, pc}

0000a0a8 <buffer_write>:
{
    a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0aa:	4606      	mov	r6, r0
    a0ac:	460d      	mov	r5, r1
    a0ae:	4614      	mov	r4, r2
    a0b0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    a0b2:	4621      	mov	r1, r4
    a0b4:	4628      	mov	r0, r5
    a0b6:	463a      	mov	r2, r7
    a0b8:	47b0      	blx	r6
	} while (len != 0);
    a0ba:	1a24      	subs	r4, r4, r0
		buf += processed;
    a0bc:	4405      	add	r5, r0
	} while (len != 0);
    a0be:	d1f8      	bne.n	a0b2 <buffer_write+0xa>
}
    a0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a0c2 <std_print>:
{
    a0c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a0c6:	b08e      	sub	sp, #56	; 0x38
    a0c8:	af0e      	add	r7, sp, #56	; 0x38
    a0ca:	4680      	mov	r8, r0
    a0cc:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    a0ce:	f7ff ff32 	bl	9f36 <log_msg_str_get>
    a0d2:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    a0d4:	4640      	mov	r0, r8
    a0d6:	f7ff fef9 	bl	9ecc <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    a0da:	0083      	lsls	r3, r0, #2
    a0dc:	3307      	adds	r3, #7
    a0de:	f023 0307 	bic.w	r3, r3, #7
    a0e2:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
    a0e6:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    a0e8:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    a0ea:	f04f 0900 	mov.w	r9, #0
    a0ee:	45d1      	cmp	r9, sl
    a0f0:	d116      	bne.n	a120 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    a0f2:	4640      	mov	r0, r8
    a0f4:	f7ff feea 	bl	9ecc <log_msg_nargs_get>
    a0f8:	280f      	cmp	r0, #15
    a0fa:	d81e      	bhi.n	a13a <std_print+0x78>
    a0fc:	e8df f010 	tbh	[pc, r0, lsl #1]
    a100:	00200019 	.word	0x00200019
    a104:	002d0026 	.word	0x002d0026
    a108:	00410036 	.word	0x00410036
    a10c:	005d004e 	.word	0x005d004e
    a110:	0081006e 	.word	0x0081006e
    a114:	00ad0096 	.word	0x00ad0096
    a118:	00e100c6 	.word	0x00e100c6
    a11c:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    a120:	4649      	mov	r1, r9
    a122:	4640      	mov	r0, r8
    a124:	f7ff fed5 	bl	9ed2 <log_msg_arg_get>
    a128:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    a12c:	f109 0901 	add.w	r9, r9, #1
    a130:	e7dd      	b.n	a0ee <std_print+0x2c>
		print_formatted(output, str);
    a132:	4631      	mov	r1, r6
    a134:	4628      	mov	r0, r5
    a136:	f7f8 fb49 	bl	27cc <print_formatted>
}
    a13a:	46bd      	mov	sp, r7
    a13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    a140:	6822      	ldr	r2, [r4, #0]
    a142:	4631      	mov	r1, r6
    a144:	4628      	mov	r0, r5
    a146:	f7f8 fb41 	bl	27cc <print_formatted>
		break;
    a14a:	e7f6      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
    a14c:	e9d4 2300 	ldrd	r2, r3, [r4]
    a150:	4631      	mov	r1, r6
    a152:	4628      	mov	r0, r5
    a154:	f7f8 fb3a 	bl	27cc <print_formatted>
		break;
    a158:	e7ef      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
    a15a:	68a3      	ldr	r3, [r4, #8]
    a15c:	9300      	str	r3, [sp, #0]
    a15e:	e9d4 2300 	ldrd	r2, r3, [r4]
    a162:	4631      	mov	r1, r6
    a164:	4628      	mov	r0, r5
    a166:	f7f8 fb31 	bl	27cc <print_formatted>
		break;
    a16a:	e7e6      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a16c:	68e3      	ldr	r3, [r4, #12]
    a16e:	9301      	str	r3, [sp, #4]
    a170:	68a3      	ldr	r3, [r4, #8]
    a172:	9300      	str	r3, [sp, #0]
    a174:	e9d4 2300 	ldrd	r2, r3, [r4]
    a178:	4631      	mov	r1, r6
    a17a:	4628      	mov	r0, r5
    a17c:	f7f8 fb26 	bl	27cc <print_formatted>
		break;
    a180:	e7db      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a182:	6923      	ldr	r3, [r4, #16]
    a184:	9302      	str	r3, [sp, #8]
    a186:	68e3      	ldr	r3, [r4, #12]
    a188:	9301      	str	r3, [sp, #4]
    a18a:	68a3      	ldr	r3, [r4, #8]
    a18c:	9300      	str	r3, [sp, #0]
    a18e:	e9d4 2300 	ldrd	r2, r3, [r4]
    a192:	4631      	mov	r1, r6
    a194:	4628      	mov	r0, r5
    a196:	f7f8 fb19 	bl	27cc <print_formatted>
		break;
    a19a:	e7ce      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a19c:	6963      	ldr	r3, [r4, #20]
    a19e:	9303      	str	r3, [sp, #12]
    a1a0:	6923      	ldr	r3, [r4, #16]
    a1a2:	9302      	str	r3, [sp, #8]
    a1a4:	68e3      	ldr	r3, [r4, #12]
    a1a6:	9301      	str	r3, [sp, #4]
    a1a8:	68a3      	ldr	r3, [r4, #8]
    a1aa:	9300      	str	r3, [sp, #0]
    a1ac:	e9d4 2300 	ldrd	r2, r3, [r4]
    a1b0:	4631      	mov	r1, r6
    a1b2:	4628      	mov	r0, r5
    a1b4:	f7f8 fb0a 	bl	27cc <print_formatted>
		break;
    a1b8:	e7bf      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a1ba:	69a3      	ldr	r3, [r4, #24]
    a1bc:	9304      	str	r3, [sp, #16]
    a1be:	6963      	ldr	r3, [r4, #20]
    a1c0:	9303      	str	r3, [sp, #12]
    a1c2:	6923      	ldr	r3, [r4, #16]
    a1c4:	9302      	str	r3, [sp, #8]
    a1c6:	68e3      	ldr	r3, [r4, #12]
    a1c8:	9301      	str	r3, [sp, #4]
    a1ca:	68a3      	ldr	r3, [r4, #8]
    a1cc:	9300      	str	r3, [sp, #0]
    a1ce:	e9d4 2300 	ldrd	r2, r3, [r4]
    a1d2:	4631      	mov	r1, r6
    a1d4:	4628      	mov	r0, r5
    a1d6:	f7f8 faf9 	bl	27cc <print_formatted>
		break;
    a1da:	e7ae      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a1dc:	69e3      	ldr	r3, [r4, #28]
    a1de:	9305      	str	r3, [sp, #20]
    a1e0:	69a3      	ldr	r3, [r4, #24]
    a1e2:	9304      	str	r3, [sp, #16]
    a1e4:	6963      	ldr	r3, [r4, #20]
    a1e6:	9303      	str	r3, [sp, #12]
    a1e8:	6923      	ldr	r3, [r4, #16]
    a1ea:	9302      	str	r3, [sp, #8]
    a1ec:	68e3      	ldr	r3, [r4, #12]
    a1ee:	9301      	str	r3, [sp, #4]
    a1f0:	68a3      	ldr	r3, [r4, #8]
    a1f2:	9300      	str	r3, [sp, #0]
    a1f4:	e9d4 2300 	ldrd	r2, r3, [r4]
    a1f8:	4631      	mov	r1, r6
    a1fa:	4628      	mov	r0, r5
    a1fc:	f7f8 fae6 	bl	27cc <print_formatted>
		break;
    a200:	e79b      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a202:	6a23      	ldr	r3, [r4, #32]
    a204:	9306      	str	r3, [sp, #24]
    a206:	69e3      	ldr	r3, [r4, #28]
    a208:	9305      	str	r3, [sp, #20]
    a20a:	69a3      	ldr	r3, [r4, #24]
    a20c:	9304      	str	r3, [sp, #16]
    a20e:	6963      	ldr	r3, [r4, #20]
    a210:	9303      	str	r3, [sp, #12]
    a212:	6923      	ldr	r3, [r4, #16]
    a214:	9302      	str	r3, [sp, #8]
    a216:	68e3      	ldr	r3, [r4, #12]
    a218:	9301      	str	r3, [sp, #4]
    a21a:	68a3      	ldr	r3, [r4, #8]
    a21c:	9300      	str	r3, [sp, #0]
    a21e:	e9d4 2300 	ldrd	r2, r3, [r4]
    a222:	4631      	mov	r1, r6
    a224:	4628      	mov	r0, r5
    a226:	f7f8 fad1 	bl	27cc <print_formatted>
		break;
    a22a:	e786      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a22c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a22e:	9307      	str	r3, [sp, #28]
    a230:	6a23      	ldr	r3, [r4, #32]
    a232:	9306      	str	r3, [sp, #24]
    a234:	69e3      	ldr	r3, [r4, #28]
    a236:	9305      	str	r3, [sp, #20]
    a238:	69a3      	ldr	r3, [r4, #24]
    a23a:	9304      	str	r3, [sp, #16]
    a23c:	6963      	ldr	r3, [r4, #20]
    a23e:	9303      	str	r3, [sp, #12]
    a240:	6923      	ldr	r3, [r4, #16]
    a242:	9302      	str	r3, [sp, #8]
    a244:	68e3      	ldr	r3, [r4, #12]
    a246:	9301      	str	r3, [sp, #4]
    a248:	68a3      	ldr	r3, [r4, #8]
    a24a:	9300      	str	r3, [sp, #0]
    a24c:	e9d4 2300 	ldrd	r2, r3, [r4]
    a250:	4631      	mov	r1, r6
    a252:	4628      	mov	r0, r5
    a254:	f7f8 faba 	bl	27cc <print_formatted>
		break;
    a258:	e76f      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a25a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a25c:	9308      	str	r3, [sp, #32]
    a25e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a260:	9307      	str	r3, [sp, #28]
    a262:	6a23      	ldr	r3, [r4, #32]
    a264:	9306      	str	r3, [sp, #24]
    a266:	69e3      	ldr	r3, [r4, #28]
    a268:	9305      	str	r3, [sp, #20]
    a26a:	69a3      	ldr	r3, [r4, #24]
    a26c:	9304      	str	r3, [sp, #16]
    a26e:	6963      	ldr	r3, [r4, #20]
    a270:	9303      	str	r3, [sp, #12]
    a272:	6923      	ldr	r3, [r4, #16]
    a274:	9302      	str	r3, [sp, #8]
    a276:	68e3      	ldr	r3, [r4, #12]
    a278:	9301      	str	r3, [sp, #4]
    a27a:	68a3      	ldr	r3, [r4, #8]
    a27c:	9300      	str	r3, [sp, #0]
    a27e:	e9d4 2300 	ldrd	r2, r3, [r4]
    a282:	4631      	mov	r1, r6
    a284:	4628      	mov	r0, r5
    a286:	f7f8 faa1 	bl	27cc <print_formatted>
		break;
    a28a:	e756      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a28c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a28e:	9309      	str	r3, [sp, #36]	; 0x24
    a290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a292:	9308      	str	r3, [sp, #32]
    a294:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a296:	9307      	str	r3, [sp, #28]
    a298:	6a23      	ldr	r3, [r4, #32]
    a29a:	9306      	str	r3, [sp, #24]
    a29c:	69e3      	ldr	r3, [r4, #28]
    a29e:	9305      	str	r3, [sp, #20]
    a2a0:	69a3      	ldr	r3, [r4, #24]
    a2a2:	9304      	str	r3, [sp, #16]
    a2a4:	6963      	ldr	r3, [r4, #20]
    a2a6:	9303      	str	r3, [sp, #12]
    a2a8:	6923      	ldr	r3, [r4, #16]
    a2aa:	9302      	str	r3, [sp, #8]
    a2ac:	68e3      	ldr	r3, [r4, #12]
    a2ae:	9301      	str	r3, [sp, #4]
    a2b0:	68a3      	ldr	r3, [r4, #8]
    a2b2:	9300      	str	r3, [sp, #0]
    a2b4:	e9d4 2300 	ldrd	r2, r3, [r4]
    a2b8:	4631      	mov	r1, r6
    a2ba:	4628      	mov	r0, r5
    a2bc:	f7f8 fa86 	bl	27cc <print_formatted>
		break;
    a2c0:	e73b      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a2c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a2c4:	930a      	str	r3, [sp, #40]	; 0x28
    a2c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a2c8:	9309      	str	r3, [sp, #36]	; 0x24
    a2ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a2cc:	9308      	str	r3, [sp, #32]
    a2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a2d0:	9307      	str	r3, [sp, #28]
    a2d2:	6a23      	ldr	r3, [r4, #32]
    a2d4:	9306      	str	r3, [sp, #24]
    a2d6:	69e3      	ldr	r3, [r4, #28]
    a2d8:	9305      	str	r3, [sp, #20]
    a2da:	69a3      	ldr	r3, [r4, #24]
    a2dc:	9304      	str	r3, [sp, #16]
    a2de:	6963      	ldr	r3, [r4, #20]
    a2e0:	9303      	str	r3, [sp, #12]
    a2e2:	6923      	ldr	r3, [r4, #16]
    a2e4:	9302      	str	r3, [sp, #8]
    a2e6:	68e3      	ldr	r3, [r4, #12]
    a2e8:	9301      	str	r3, [sp, #4]
    a2ea:	68a3      	ldr	r3, [r4, #8]
    a2ec:	9300      	str	r3, [sp, #0]
    a2ee:	e9d4 2300 	ldrd	r2, r3, [r4]
    a2f2:	4631      	mov	r1, r6
    a2f4:	4628      	mov	r0, r5
    a2f6:	f7f8 fa69 	bl	27cc <print_formatted>
		break;
    a2fa:	e71e      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a2fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a2fe:	930b      	str	r3, [sp, #44]	; 0x2c
    a300:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a302:	930a      	str	r3, [sp, #40]	; 0x28
    a304:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a306:	9309      	str	r3, [sp, #36]	; 0x24
    a308:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a30a:	9308      	str	r3, [sp, #32]
    a30c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a30e:	9307      	str	r3, [sp, #28]
    a310:	6a23      	ldr	r3, [r4, #32]
    a312:	9306      	str	r3, [sp, #24]
    a314:	69e3      	ldr	r3, [r4, #28]
    a316:	9305      	str	r3, [sp, #20]
    a318:	69a3      	ldr	r3, [r4, #24]
    a31a:	9304      	str	r3, [sp, #16]
    a31c:	6963      	ldr	r3, [r4, #20]
    a31e:	9303      	str	r3, [sp, #12]
    a320:	6923      	ldr	r3, [r4, #16]
    a322:	9302      	str	r3, [sp, #8]
    a324:	68e3      	ldr	r3, [r4, #12]
    a326:	9301      	str	r3, [sp, #4]
    a328:	68a3      	ldr	r3, [r4, #8]
    a32a:	9300      	str	r3, [sp, #0]
    a32c:	e9d4 2300 	ldrd	r2, r3, [r4]
    a330:	4631      	mov	r1, r6
    a332:	4628      	mov	r0, r5
    a334:	f7f8 fa4a 	bl	27cc <print_formatted>
		break;
    a338:	e6ff      	b.n	a13a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
    a33a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a33c:	930c      	str	r3, [sp, #48]	; 0x30
    a33e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a340:	930b      	str	r3, [sp, #44]	; 0x2c
    a342:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a344:	930a      	str	r3, [sp, #40]	; 0x28
    a346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a348:	9309      	str	r3, [sp, #36]	; 0x24
    a34a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a34c:	9308      	str	r3, [sp, #32]
    a34e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a350:	9307      	str	r3, [sp, #28]
    a352:	6a23      	ldr	r3, [r4, #32]
    a354:	9306      	str	r3, [sp, #24]
    a356:	69e3      	ldr	r3, [r4, #28]
    a358:	9305      	str	r3, [sp, #20]
    a35a:	69a3      	ldr	r3, [r4, #24]
    a35c:	9304      	str	r3, [sp, #16]
    a35e:	6963      	ldr	r3, [r4, #20]
    a360:	9303      	str	r3, [sp, #12]
    a362:	6923      	ldr	r3, [r4, #16]
    a364:	9302      	str	r3, [sp, #8]
    a366:	68e3      	ldr	r3, [r4, #12]
    a368:	9301      	str	r3, [sp, #4]
    a36a:	68a3      	ldr	r3, [r4, #8]
    a36c:	9300      	str	r3, [sp, #0]
    a36e:	e9d4 2300 	ldrd	r2, r3, [r4]
    a372:	4631      	mov	r1, r6
    a374:	4628      	mov	r0, r5
    a376:	f7f8 fa29 	bl	27cc <print_formatted>
}
    a37a:	e6de      	b.n	a13a <std_print+0x78>

0000a37c <log_output_flush>:
		     output->control_block->offset,
    a37c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    a37e:	6881      	ldr	r1, [r0, #8]
{
    a380:	b510      	push	{r4, lr}
    a382:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    a384:	e9d2 2300 	ldrd	r2, r3, [r2]
    a388:	6800      	ldr	r0, [r0, #0]
    a38a:	f7ff fe8d 	bl	a0a8 <buffer_write>
	output->control_block->offset = 0;
    a38e:	6863      	ldr	r3, [r4, #4]
    a390:	2200      	movs	r2, #0
    a392:	601a      	str	r2, [r3, #0]
}
    a394:	bd10      	pop	{r4, pc}

0000a396 <out_func>:
{
    a396:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    a398:	684b      	ldr	r3, [r1, #4]
    a39a:	681a      	ldr	r2, [r3, #0]
    a39c:	68cb      	ldr	r3, [r1, #12]
    a39e:	429a      	cmp	r2, r3
{
    a3a0:	4605      	mov	r5, r0
    a3a2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    a3a4:	d102      	bne.n	a3ac <out_func+0x16>
		log_output_flush(out_ctx);
    a3a6:	4608      	mov	r0, r1
    a3a8:	f7ff ffe8 	bl	a37c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a3ac:	6863      	ldr	r3, [r4, #4]
    a3ae:	f3bf 8f5b 	dmb	ish
    a3b2:	e853 2f00 	ldrex	r2, [r3]
    a3b6:	1c51      	adds	r1, r2, #1
    a3b8:	e843 1000 	strex	r0, r1, [r3]
    a3bc:	2800      	cmp	r0, #0
    a3be:	d1f8      	bne.n	a3b2 <out_func+0x1c>
    a3c0:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    a3c4:	68a3      	ldr	r3, [r4, #8]
    a3c6:	549d      	strb	r5, [r3, r2]
}
    a3c8:	2000      	movs	r0, #0
    a3ca:	bd38      	pop	{r3, r4, r5, pc}

0000a3cc <device_get_binding>:
    a3cc:	f7fd bd66 	b.w	7e9c <z_impl_device_get_binding>

0000a3d0 <get_sectors_cb>:
{
    a3d0:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    a3d2:	6802      	ldr	r2, [r0, #0]
    a3d4:	684c      	ldr	r4, [r1, #4]
    a3d6:	42a2      	cmp	r2, r4
    a3d8:	d316      	bcc.n	a408 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    a3da:	688b      	ldr	r3, [r1, #8]
    a3dc:	4423      	add	r3, r4
    a3de:	429a      	cmp	r2, r3
    a3e0:	d206      	bcs.n	a3f0 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    a3e2:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    a3e6:	42ab      	cmp	r3, r5
    a3e8:	d304      	bcc.n	a3f4 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    a3ea:	f06f 030b 	mvn.w	r3, #11
    a3ee:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    a3f0:	2000      	movs	r0, #0
    a3f2:	e00a      	b.n	a40a <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    a3f4:	68cd      	ldr	r5, [r1, #12]
    a3f6:	1b12      	subs	r2, r2, r4
    a3f8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
    a3fc:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    a400:	6842      	ldr	r2, [r0, #4]
    a402:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    a404:	3301      	adds	r3, #1
    a406:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    a408:	2001      	movs	r0, #1
}
    a40a:	bd70      	pop	{r4, r5, r6, pc}

0000a40c <flash_area_close>:
}
    a40c:	4770      	bx	lr

0000a40e <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    a40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
    a412:	1e0c      	subs	r4, r1, #0
{
    a414:	4605      	mov	r5, r0
    a416:	4617      	mov	r7, r2
    a418:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
    a41a:	db10      	blt.n	a43e <flash_area_read+0x30>
    a41c:	6882      	ldr	r2, [r0, #8]
    a41e:	18e3      	adds	r3, r4, r3
    a420:	4293      	cmp	r3, r2
    a422:	d80c      	bhi.n	a43e <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    a424:	68c0      	ldr	r0, [r0, #12]
    a426:	f7ff ffd1 	bl	a3cc <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    a42a:	6869      	ldr	r1, [r5, #4]
    a42c:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    a42e:	6883      	ldr	r3, [r0, #8]
    a430:	681c      	ldr	r4, [r3, #0]
    a432:	463a      	mov	r2, r7
    a434:	4633      	mov	r3, r6
    a436:	46a4      	mov	ip, r4
}
    a438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a43c:	4760      	bx	ip
    a43e:	f06f 0015 	mvn.w	r0, #21
    a442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a446 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    a446:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
    a44a:	f1b1 0900 	subs.w	r9, r1, #0
{
    a44e:	4680      	mov	r8, r0
    a450:	4617      	mov	r7, r2
    a452:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
    a454:	db27      	blt.n	a4a6 <flash_area_write+0x60>
    a456:	6882      	ldr	r2, [r0, #8]
    a458:	444b      	add	r3, r9
    a45a:	4293      	cmp	r3, r2
    a45c:	d823      	bhi.n	a4a6 <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    a45e:	68c0      	ldr	r0, [r0, #12]
    a460:	f7ff ffb4 	bl	a3cc <device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    a464:	f8d8 1004 	ldr.w	r1, [r8, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    a468:	4605      	mov	r5, r0
	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    a46a:	4489      	add	r9, r1
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    a46c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    a470:	f8d8 300c 	ldr.w	r3, [r8, #12]
    a474:	b96b      	cbnz	r3, a492 <flash_area_write+0x4c>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    a476:	f8d8 4004 	ldr.w	r4, [r8, #4]
    a47a:	4633      	mov	r3, r6
    a47c:	463a      	mov	r2, r7
    a47e:	4649      	mov	r1, r9
    a480:	4628      	mov	r0, r5
    a482:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    a484:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
    a488:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    a48a:	b943      	cbnz	r3, a49e <flash_area_write+0x58>

	return rc;
}
    a48c:	4620      	mov	r0, r4
    a48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    a492:	2100      	movs	r1, #0
    a494:	4798      	blx	r3
		if (rc) {
    a496:	4604      	mov	r4, r0
    a498:	2800      	cmp	r0, #0
    a49a:	d0ec      	beq.n	a476 <flash_area_write+0x30>
    a49c:	e7f6      	b.n	a48c <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
    a49e:	2101      	movs	r1, #1
    a4a0:	4628      	mov	r0, r5
    a4a2:	4798      	blx	r3
    a4a4:	e7f2      	b.n	a48c <flash_area_write+0x46>
		return -EINVAL;
    a4a6:	f06f 0415 	mvn.w	r4, #21
    a4aa:	e7ef      	b.n	a48c <flash_area_write+0x46>

0000a4ac <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    a4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
    a4b0:	1e0c      	subs	r4, r1, #0
{
    a4b2:	4605      	mov	r5, r0
    a4b4:	4617      	mov	r7, r2
	return (off >= 0) && ((off + len) <= fa->fa_size);
    a4b6:	db25      	blt.n	a504 <flash_area_erase+0x58>
    a4b8:	18a3      	adds	r3, r4, r2
    a4ba:	6882      	ldr	r2, [r0, #8]
    a4bc:	4293      	cmp	r3, r2
    a4be:	d821      	bhi.n	a504 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    a4c0:	68c0      	ldr	r0, [r0, #12]
    a4c2:	f7ff ff83 	bl	a3cc <device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    a4c6:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    a4c8:	4606      	mov	r6, r0
	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    a4ca:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    a4cc:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    a4d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    a4d4:	b963      	cbnz	r3, a4f0 <flash_area_erase+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    a4d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a4da:	463a      	mov	r2, r7
    a4dc:	4629      	mov	r1, r5
    a4de:	4630      	mov	r0, r6
    a4e0:	4798      	blx	r3

	if (api->write_protection != NULL) {
    a4e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    a4e6:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    a4e8:	b943      	cbnz	r3, a4fc <flash_area_erase+0x50>

	return rc;
}
    a4ea:	4620      	mov	r0, r4
    a4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    a4f0:	2100      	movs	r1, #0
    a4f2:	4798      	blx	r3
		if (rc) {
    a4f4:	4604      	mov	r4, r0
    a4f6:	2800      	cmp	r0, #0
    a4f8:	d0ed      	beq.n	a4d6 <flash_area_erase+0x2a>
    a4fa:	e7f6      	b.n	a4ea <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
    a4fc:	2101      	movs	r1, #1
    a4fe:	4630      	mov	r0, r6
    a500:	4798      	blx	r3
    a502:	e7f2      	b.n	a4ea <flash_area_erase+0x3e>
		return -EINVAL;
    a504:	f06f 0415 	mvn.w	r4, #21
    a508:	e7ef      	b.n	a4ea <flash_area_erase+0x3e>

0000a50a <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    a50a:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    a50c:	68c0      	ldr	r0, [r0, #12]
    a50e:	f7ff ff5d 	bl	a3cc <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    a512:	6883      	ldr	r3, [r0, #8]
    a514:	691b      	ldr	r3, [r3, #16]
    a516:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    a518:	7800      	ldrb	r0, [r0, #0]
    a51a:	bd08      	pop	{r3, pc}

0000a51c <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    a51c:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    a51e:	68c0      	ldr	r0, [r0, #12]
    a520:	f7ff ff54 	bl	a3cc <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    a524:	6883      	ldr	r3, [r0, #8]
    a526:	691b      	ldr	r3, [r3, #16]
    a528:	4798      	blx	r3

	return param->erase_value;
}
    a52a:	7900      	ldrb	r0, [r0, #4]
    a52c:	bd08      	pop	{r3, pc}

0000a52e <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    a52e:	2200      	movs	r2, #0
    a530:	e9c0 2200 	strd	r2, r2, [r0]
    a534:	6082      	str	r2, [r0, #8]
}
    a536:	4770      	bx	lr

0000a538 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    a538:	6903      	ldr	r3, [r0, #16]
    a53a:	b2c9      	uxtb	r1, r1
    a53c:	220c      	movs	r2, #12
    a53e:	fb01 3302 	mla	r3, r1, r2, r3
    a542:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    a544:	f000 0007 	and.w	r0, r0, #7
    a548:	4770      	bx	lr

0000a54a <set_on_state>:
	__asm__ volatile(
    a54a:	f04f 0320 	mov.w	r3, #32
    a54e:	f3ef 8211 	mrs	r2, BASEPRI
    a552:	f383 8811 	msr	BASEPRI, r3
    a556:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a55a:	6803      	ldr	r3, [r0, #0]
    a55c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a560:	f043 0302 	orr.w	r3, r3, #2
    a564:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a566:	f382 8811 	msr	BASEPRI, r2
    a56a:	f3bf 8f6f 	isb	sy
}
    a56e:	4770      	bx	lr

0000a570 <stop>:
{
    a570:	4603      	mov	r3, r0
    a572:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    a574:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    a576:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    a578:	f04f 0420 	mov.w	r4, #32
    a57c:	f3ef 8611 	mrs	r6, BASEPRI
    a580:	f384 8811 	msr	BASEPRI, r4
    a584:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a588:	250c      	movs	r5, #12
    a58a:	fb05 0401 	mla	r4, r5, r1, r0
    a58e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    a590:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    a594:	d001      	beq.n	a59a <stop+0x2a>
    a596:	42a2      	cmp	r2, r4
    a598:	d111      	bne.n	a5be <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    a59a:	fb05 0001 	mla	r0, r5, r1, r0
    a59e:	2201      	movs	r2, #1
    a5a0:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    a5a2:	2000      	movs	r0, #0
	__asm__ volatile(
    a5a4:	f386 8811 	msr	BASEPRI, r6
    a5a8:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    a5ac:	b930      	cbnz	r0, a5bc <stop+0x4c>
	get_sub_config(dev, type)->stop();
    a5ae:	685b      	ldr	r3, [r3, #4]
    a5b0:	220c      	movs	r2, #12
    a5b2:	fb02 3101 	mla	r1, r2, r1, r3
    a5b6:	684b      	ldr	r3, [r1, #4]
    a5b8:	4798      	blx	r3
	return 0;
    a5ba:	2000      	movs	r0, #0
}
    a5bc:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    a5be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a5c2:	e7ef      	b.n	a5a4 <stop+0x34>

0000a5c4 <api_stop>:
	return stop(dev, subsys, CTX_API);
    a5c4:	2280      	movs	r2, #128	; 0x80
    a5c6:	f7ff bfd3 	b.w	a570 <stop>

0000a5ca <async_start>:
{
    a5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5cc:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    a5ce:	6904      	ldr	r4, [r0, #16]
{
    a5d0:	4605      	mov	r5, r0
    a5d2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    a5d4:	f04f 0020 	mov.w	r0, #32
    a5d8:	f3ef 8c11 	mrs	ip, BASEPRI
    a5dc:	f380 8811 	msr	BASEPRI, r0
    a5e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a5e4:	260c      	movs	r6, #12
    a5e6:	fb06 4601 	mla	r6, r6, r1, r4
    a5ea:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a5ec:	f000 0e07 	and.w	lr, r0, #7
    a5f0:	f1be 0f01 	cmp.w	lr, #1
    a5f4:	d110      	bne.n	a618 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a5f6:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    a5f8:	2600      	movs	r6, #0
	__asm__ volatile(
    a5fa:	f38c 8811 	msr	BASEPRI, ip
    a5fe:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    a602:	b93e      	cbnz	r6, a614 <async_start+0x4a>
	subdata->cb = cb;
    a604:	200c      	movs	r0, #12
    a606:	4341      	muls	r1, r0
    a608:	440c      	add	r4, r1
	subdata->user_data = user_data;
    a60a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    a60e:	686b      	ldr	r3, [r5, #4]
    a610:	585b      	ldr	r3, [r3, r1]
    a612:	4798      	blx	r3
}
    a614:	4630      	mov	r0, r6
    a616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    a618:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    a61c:	4287      	cmp	r7, r0
    a61e:	bf14      	ite	ne
    a620:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    a624:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    a628:	e7e7      	b.n	a5fa <async_start+0x30>

0000a62a <api_start>:
{
    a62a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    a62c:	2480      	movs	r4, #128	; 0x80
    a62e:	9400      	str	r4, [sp, #0]
    a630:	f7ff ffcb 	bl	a5ca <async_start>
}
    a634:	b002      	add	sp, #8
    a636:	bd10      	pop	{r4, pc}

0000a638 <onoff_started_callback>:
	return &data->mgr[type];
    a638:	6900      	ldr	r0, [r0, #16]
{
    a63a:	b410      	push	{r4}
	return &data->mgr[type];
    a63c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    a63e:	241c      	movs	r4, #28
    a640:	fb03 0004 	mla	r0, r3, r4, r0
    a644:	2100      	movs	r1, #0
}
    a646:	bc10      	pop	{r4}
	notify(mgr, 0);
    a648:	4710      	bx	r2

0000a64a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a64a:	2000      	movs	r0, #0
    a64c:	f001 b820 	b.w	b690 <nrfx_clock_start>

0000a650 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a650:	2000      	movs	r0, #0
    a652:	f7fc bdef 	b.w	7234 <nrfx_clock_stop>

0000a656 <blocking_start_callback>:
{
    a656:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    a658:	f7fd bf46 	b.w	84e8 <z_impl_k_sem_give>

0000a65c <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    a65c:	4770      	bx	lr

0000a65e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a65e:	4770      	bx	lr

0000a660 <sys_clock_disable>:
    a660:	4770      	bx	lr

0000a662 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    a662:	2000      	movs	r0, #0
    a664:	f7f7 bdd8 	b.w	2218 <sys_reboot>

0000a668 <console_write>:
{
    a668:	b570      	push	{r4, r5, r6, lr}
    a66a:	4606      	mov	r6, r0
    a66c:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    a66e:	2400      	movs	r4, #0
    a670:	42ac      	cmp	r4, r5
    a672:	db00      	blt.n	a676 <console_write+0xe>
}
    a674:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    a676:	5d30      	ldrb	r0, [r6, r4]
    a678:	f7f8 ffe2 	bl	3640 <console_out>
    a67c:	3001      	adds	r0, #1
    a67e:	d0f9      	beq.n	a674 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    a680:	3401      	adds	r4, #1
    a682:	e7f5      	b.n	a670 <console_write+0x8>

0000a684 <u32toa>:
{
    a684:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t d = 1;
    a686:	2301      	movs	r3, #1
        d *= 10;
    a688:	240a      	movs	r4, #10
    while (val / d >= 10) {
    a68a:	fbb1 f2f3 	udiv	r2, r1, r3
    a68e:	2a09      	cmp	r2, #9
    a690:	d806      	bhi.n	a6a0 <u32toa+0x1c>
    dst = tgt;
    a692:	4602      	mov	r2, r0
    int n = 0;
    a694:	2500      	movs	r5, #0
        d /= 10;
    a696:	260a      	movs	r6, #10
    while (d) {
    a698:	b923      	cbnz	r3, a6a4 <u32toa+0x20>
    *dst = '\0';
    a69a:	7013      	strb	r3, [r2, #0]
}
    a69c:	1a10      	subs	r0, r2, r0
    a69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= 10;
    a6a0:	4363      	muls	r3, r4
    a6a2:	e7f2      	b.n	a68a <u32toa+0x6>
        dgt = val / d;
    a6a4:	fbb1 f4f3 	udiv	r4, r1, r3
        d /= 10;
    a6a8:	fbb3 fcf6 	udiv	ip, r3, r6
        val %= d;
    a6ac:	fb03 1714 	mls	r7, r3, r4, r1
        if (n || dgt > 0 || d == 0) {
    a6b0:	b91d      	cbnz	r5, a6ba <u32toa+0x36>
    a6b2:	4299      	cmp	r1, r3
    a6b4:	d201      	bcs.n	a6ba <u32toa+0x36>
    a6b6:	2b09      	cmp	r3, #9
    a6b8:	d803      	bhi.n	a6c2 <u32toa+0x3e>
            *dst++ = dgt + '0';
    a6ba:	3430      	adds	r4, #48	; 0x30
    a6bc:	f802 4b01 	strb.w	r4, [r2], #1
            ++n;
    a6c0:	3501      	adds	r5, #1
            *dst++ = dgt + '0';
    a6c2:	4663      	mov	r3, ip
    a6c4:	4639      	mov	r1, r7
    a6c6:	e7e7      	b.n	a698 <u32toa+0x14>

0000a6c8 <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(cbor_state_t *state,
		void *const result, uint32_t result_len)
{
    a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6ca:	4604      	mov	r4, r0
	cbor_trace();
	cbor_assert(result_len != 0, "0-length result not supported.\n");
	cbor_assert(result != NULL, NULL);

	FAIL_IF((state->elem_count == 0) \
    a6cc:	6880      	ldr	r0, [r0, #8]
{
    a6ce:	460d      	mov	r5, r1
    a6d0:	4617      	mov	r7, r2
	FAIL_IF((state->elem_count == 0) \
    a6d2:	b1a0      	cbz	r0, a6fe <value_extract+0x36>
    a6d4:	6823      	ldr	r3, [r4, #0]
    a6d6:	68e1      	ldr	r1, [r4, #12]
    a6d8:	428b      	cmp	r3, r1
    a6da:	d21d      	bcs.n	a718 <value_extract+0x50>
		|| (state->payload >= state->payload_end));

	uint8_t *u8_result  = (uint8_t *)result;
	uint8_t additional = ADDITIONAL(*state->payload);
    a6dc:	781e      	ldrb	r6, [r3, #0]

	state->payload_bak = state->payload;
    a6de:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    a6e0:	3301      	adds	r3, #1
	uint8_t additional = ADDITIONAL(*state->payload);
    a6e2:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
    a6e6:	6023      	str	r3, [r4, #0]

	memset(result, 0, result_len);
    a6e8:	2100      	movs	r1, #0
    a6ea:	4628      	mov	r0, r5
    a6ec:	f000 faa1 	bl	ac32 <memset>
	if (additional <= VALUE_IN_HEADER) {
    a6f0:	2e17      	cmp	r6, #23
    a6f2:	d805      	bhi.n	a700 <value_extract+0x38>
#ifdef CONFIG_BIG_ENDIAN
		u8_result[result_len - 1] = additional;
#else
		u8_result[0] = additional;
    a6f4:	702e      	strb	r6, [r5, #0]
#endif /* CONFIG_BIG_ENDIAN */

		(state->payload) += len;
	}

	(state->elem_count)--;
    a6f6:	68a3      	ldr	r3, [r4, #8]
    a6f8:	3b01      	subs	r3, #1
    a6fa:	60a3      	str	r3, [r4, #8]
	return true;
    a6fc:	2001      	movs	r0, #1
}
    a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (24 <= additional && additional <= 27) {
    a700:	3e18      	subs	r6, #24
    a702:	b2f3      	uxtb	r3, r6
    a704:	2b03      	cmp	r3, #3
		FAIL_AND_DECR_IF(len > result_len);
    a706:	6822      	ldr	r2, [r4, #0]
	if (24 <= additional && additional <= 27) {
    a708:	d808      	bhi.n	a71c <value_extract+0x54>
		return 1 << (additional - 24);
    a70a:	2301      	movs	r3, #1
    a70c:	fa03 f606 	lsl.w	r6, r3, r6
		FAIL_AND_DECR_IF(len > result_len);
    a710:	42b7      	cmp	r7, r6
    a712:	d204      	bcs.n	a71e <value_extract+0x56>
		FAIL_AND_DECR_IF((state->payload + len)
    a714:	3a01      	subs	r2, #1
    a716:	6022      	str	r2, [r4, #0]
	FAIL_IF((state->elem_count == 0) \
    a718:	2000      	movs	r0, #0
    a71a:	e7f0      	b.n	a6fe <value_extract+0x36>
	return 0;
    a71c:	2600      	movs	r6, #0
		FAIL_AND_DECR_IF((state->payload + len)
    a71e:	68e1      	ldr	r1, [r4, #12]
    a720:	1993      	adds	r3, r2, r6
    a722:	4299      	cmp	r1, r3
    a724:	d3f6      	bcc.n	a714 <value_extract+0x4c>
    a726:	1e72      	subs	r2, r6, #1
    a728:	3d01      	subs	r5, #1
		for (uint32_t i = 0; i < len; i++) {
    a72a:	1c51      	adds	r1, r2, #1
			u8_result[i] = (state->payload)[len - i - 1];
    a72c:	6823      	ldr	r3, [r4, #0]
		for (uint32_t i = 0; i < len; i++) {
    a72e:	d102      	bne.n	a736 <value_extract+0x6e>
		(state->payload) += len;
    a730:	441e      	add	r6, r3
    a732:	6026      	str	r6, [r4, #0]
    a734:	e7df      	b.n	a6f6 <value_extract+0x2e>
			u8_result[i] = (state->payload)[len - i - 1];
    a736:	5c9b      	ldrb	r3, [r3, r2]
    a738:	f805 3f01 	strb.w	r3, [r5, #1]!
		for (uint32_t i = 0; i < len; i++) {
    a73c:	3a01      	subs	r2, #1
    a73e:	e7f4      	b.n	a72a <value_extract+0x62>

0000a740 <uint32_decode>:
}


static bool uint32_decode(cbor_state_t *state, uint32_t *result)
{
	if (!value_extract(state, result, 4)) {
    a740:	2204      	movs	r2, #4
    a742:	f7ff bfc1 	b.w	a6c8 <value_extract>

0000a746 <strx_start_decode>:
}


static bool strx_start_decode(cbor_state_t *state,
		cbor_string_type_t *result, cbor_major_type_t exp_major_type)
{
    a746:	b538      	push	{r3, r4, r5, lr}
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    a748:	6803      	ldr	r3, [r0, #0]
    a74a:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    a74c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
{
    a750:	4604      	mov	r4, r0
    a752:	460d      	mov	r5, r1
	if (major_type != exp_major_type) {
    a754:	d001      	beq.n	a75a <strx_start_decode+0x14>

	if ((state->payload + result->len) > state->payload_end) {
		cbor_print("error: 0x%x > 0x%x\r\n",
		(uint32_t)(state->payload + result->len),
		(uint32_t)state->payload_end);
		FAIL_RESTORE();
    a756:	2000      	movs	r0, #0
	}

	result->value = state->payload;
	return true;
}
    a758:	bd38      	pop	{r3, r4, r5, pc}
	if (!uint32_decode(state, &result->len)) {
    a75a:	3104      	adds	r1, #4
    a75c:	f7ff fff0 	bl	a740 <uint32_decode>
    a760:	2800      	cmp	r0, #0
    a762:	d0f8      	beq.n	a756 <strx_start_decode+0x10>
	if ((state->payload + result->len) > state->payload_end) {
    a764:	6822      	ldr	r2, [r4, #0]
    a766:	686b      	ldr	r3, [r5, #4]
    a768:	68e1      	ldr	r1, [r4, #12]
    a76a:	4413      	add	r3, r2
    a76c:	4299      	cmp	r1, r3
    a76e:	d205      	bcs.n	a77c <strx_start_decode+0x36>
		FAIL_RESTORE();
    a770:	6863      	ldr	r3, [r4, #4]
    a772:	6023      	str	r3, [r4, #0]
    a774:	68a3      	ldr	r3, [r4, #8]
    a776:	3301      	adds	r3, #1
    a778:	60a3      	str	r3, [r4, #8]
    a77a:	e7ec      	b.n	a756 <strx_start_decode+0x10>
	result->value = state->payload;
    a77c:	602a      	str	r2, [r5, #0]
	return true;
    a77e:	e7eb      	b.n	a758 <strx_start_decode+0x12>

0000a780 <list_map_start_decode>:
}


static bool list_map_start_decode(cbor_state_t *state,
		cbor_major_type_t exp_major_type)
{
    a780:	b513      	push	{r0, r1, r4, lr}
	uint32_t new_elem_count;
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    a782:	6803      	ldr	r3, [r0, #0]
    a784:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    a786:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
{
    a78a:	4604      	mov	r4, r0
	if (major_type != exp_major_type) {
    a78c:	d002      	beq.n	a794 <list_map_start_decode+0x14>
		FAIL();
    a78e:	2000      	movs	r0, #0
	if (!new_backup(state, new_elem_count)) {
		FAIL_RESTORE();
	}

	return true;
}
    a790:	b002      	add	sp, #8
    a792:	bd10      	pop	{r4, pc}
	if (!uint32_decode(state, &new_elem_count)) {
    a794:	a901      	add	r1, sp, #4
    a796:	f7ff ffd3 	bl	a740 <uint32_decode>
    a79a:	2800      	cmp	r0, #0
    a79c:	d0f7      	beq.n	a78e <list_map_start_decode+0xe>
	if (!new_backup(state, new_elem_count)) {
    a79e:	9901      	ldr	r1, [sp, #4]
    a7a0:	4620      	mov	r0, r4
    a7a2:	f000 f954 	bl	aa4e <new_backup>
    a7a6:	2800      	cmp	r0, #0
    a7a8:	d1f2      	bne.n	a790 <list_map_start_decode+0x10>
		FAIL_RESTORE();
    a7aa:	6863      	ldr	r3, [r4, #4]
    a7ac:	6023      	str	r3, [r4, #0]
    a7ae:	68a3      	ldr	r3, [r4, #8]
    a7b0:	3301      	adds	r3, #1
    a7b2:	60a3      	str	r3, [r4, #8]
    a7b4:	e7ec      	b.n	a790 <list_map_start_decode+0x10>

0000a7b6 <intx32_decode>:
{
    a7b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    a7b8:	6803      	ldr	r3, [r0, #0]
    a7ba:	781b      	ldrb	r3, [r3, #0]
	if (major_type != CBOR_MAJOR_TYPE_PINT
    a7bc:	2b3f      	cmp	r3, #63	; 0x3f
{
    a7be:	4604      	mov	r4, r0
    a7c0:	460d      	mov	r5, r1
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    a7c2:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != CBOR_MAJOR_TYPE_PINT
    a7c6:	d80d      	bhi.n	a7e4 <intx32_decode+0x2e>
	if (!value_extract(state, &uint_result, 4)) {
    a7c8:	2204      	movs	r2, #4
    a7ca:	eb0d 0102 	add.w	r1, sp, r2
    a7ce:	f7ff ff7b 	bl	a6c8 <value_extract>
    a7d2:	b168      	cbz	r0, a7f0 <intx32_decode+0x3a>
	if (uint_result >= (1 << (8*sizeof(uint_result)-1))) {
    a7d4:	9b01      	ldr	r3, [sp, #4]
    a7d6:	2b00      	cmp	r3, #0
    a7d8:	da06      	bge.n	a7e8 <intx32_decode+0x32>
		FAIL_RESTORE();
    a7da:	6863      	ldr	r3, [r4, #4]
    a7dc:	6023      	str	r3, [r4, #0]
    a7de:	68a3      	ldr	r3, [r4, #8]
    a7e0:	3301      	adds	r3, #1
    a7e2:	60a3      	str	r3, [r4, #8]
		FAIL();
    a7e4:	2000      	movs	r0, #0
    a7e6:	e003      	b.n	a7f0 <intx32_decode+0x3a>
	if (major_type == CBOR_MAJOR_TYPE_NINT) {
    a7e8:	2e01      	cmp	r6, #1
		int_result = -1 - uint_result;
    a7ea:	bf08      	it	eq
    a7ec:	43db      	mvneq	r3, r3
	*result = int_result;
    a7ee:	602b      	str	r3, [r5, #0]
}
    a7f0:	b002      	add	sp, #8
    a7f2:	bd70      	pop	{r4, r5, r6, pc}

0000a7f4 <strx_decode>:
{
    a7f4:	b538      	push	{r3, r4, r5, lr}
    a7f6:	4604      	mov	r4, r0
    a7f8:	460d      	mov	r5, r1
	if (!strx_start_decode(state, result, exp_major_type)) {
    a7fa:	f7ff ffa4 	bl	a746 <strx_start_decode>
    a7fe:	b118      	cbz	r0, a808 <strx_decode+0x14>
	(state->payload) += result->len;
    a800:	6823      	ldr	r3, [r4, #0]
    a802:	686a      	ldr	r2, [r5, #4]
    a804:	4413      	add	r3, r2
    a806:	6023      	str	r3, [r4, #0]
}
    a808:	bd38      	pop	{r3, r4, r5, pc}

0000a80a <strx_expect>:
{
    a80a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a80c:	460e      	mov	r6, r1
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    a80e:	4669      	mov	r1, sp
{
    a810:	4604      	mov	r4, r0
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    a812:	f7ff ffef 	bl	a7f4 <strx_decode>
    a816:	4605      	mov	r5, r0
    a818:	b148      	cbz	r0, a82e <strx_expect+0x24>
	if ((tmp_result.len != result->len)
    a81a:	9a01      	ldr	r2, [sp, #4]
    a81c:	6873      	ldr	r3, [r6, #4]
    a81e:	429a      	cmp	r2, r3
    a820:	d008      	beq.n	a834 <strx_expect+0x2a>
		FAIL_RESTORE();
    a822:	6863      	ldr	r3, [r4, #4]
    a824:	6023      	str	r3, [r4, #0]
    a826:	68a3      	ldr	r3, [r4, #8]
    a828:	3301      	adds	r3, #1
    a82a:	60a3      	str	r3, [r4, #8]
    a82c:	2500      	movs	r5, #0
}
    a82e:	4628      	mov	r0, r5
    a830:	b002      	add	sp, #8
    a832:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    a834:	9900      	ldr	r1, [sp, #0]
    a836:	6830      	ldr	r0, [r6, #0]
    a838:	f000 f9c7 	bl	abca <memcmp>
    a83c:	2800      	cmp	r0, #0
    a83e:	d0f6      	beq.n	a82e <strx_expect+0x24>
    a840:	e7ef      	b.n	a822 <strx_expect+0x18>

0000a842 <bstrx_decode>:
	return strx_decode(state, result, CBOR_MAJOR_TYPE_BSTR);
    a842:	2202      	movs	r2, #2
    a844:	f7ff bfd6 	b.w	a7f4 <strx_decode>

0000a848 <tstrx_expect>:
	return strx_expect(state, result, CBOR_MAJOR_TYPE_TSTR);
    a848:	2203      	movs	r2, #3
    a84a:	f7ff bfde 	b.w	a80a <strx_expect>

0000a84e <map_start_decode>:
	return list_map_start_decode(state, CBOR_MAJOR_TYPE_LIST);
}


bool map_start_decode(cbor_state_t *state)
{
    a84e:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    a850:	2105      	movs	r1, #5
{
    a852:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    a854:	f7ff ff94 	bl	a780 <list_map_start_decode>

	if (ret) {
    a858:	b110      	cbz	r0, a860 <map_start_decode+0x12>
		state->elem_count *= 2;
    a85a:	68a3      	ldr	r3, [r4, #8]
    a85c:	005b      	lsls	r3, r3, #1
    a85e:	60a3      	str	r3, [r4, #8]
	}
	return ret;
}
    a860:	bd10      	pop	{r4, pc}

0000a862 <list_map_end_decode>:


bool list_map_end_decode(cbor_state_t *state)
{
	if (!restore_backup(state,
    a862:	2200      	movs	r2, #0
    a864:	2107      	movs	r1, #7
    a866:	f000 b908 	b.w	aa7a <restore_backup>

0000a86a <map_end_decode>:
    a86a:	f7ff bffa 	b.w	a862 <list_map_end_decode>

0000a86e <multi_decode>:
		uint32_t *num_decode,
		cbor_decoder_t decoder,
		cbor_state_t *state,
		void *result,
		uint32_t result_len)
{
    a86e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a872:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
    a876:	4682      	mov	sl, r0
    a878:	4688      	mov	r8, r1
    a87a:	4616      	mov	r6, r2
    a87c:	469b      	mov	fp, r3
	for (uint32_t i = 0; i < max_decode; i++) {
    a87e:	2400      	movs	r4, #0
    a880:	4544      	cmp	r4, r8
    a882:	d102      	bne.n	a88a <multi_decode+0x1c>
			}
			return true;
		}
	}
	cbor_print("Found %zu elements.\n", max_decode);
	*num_decode = max_decode;
    a884:	6034      	str	r4, [r6, #0]
	return true;
    a886:	2001      	movs	r0, #1
    a888:	e013      	b.n	a8b2 <multi_decode+0x44>
		uint8_t const *payload_bak = state->payload;
    a88a:	682a      	ldr	r2, [r5, #0]
    a88c:	9201      	str	r2, [sp, #4]
		if (!decoder(state,
    a88e:	4639      	mov	r1, r7
    a890:	4628      	mov	r0, r5
		uint32_t elem_count_bak = state->elem_count;
    a892:	f8d5 9008 	ldr.w	r9, [r5, #8]
		if (!decoder(state,
    a896:	47d8      	blx	fp
    a898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a89a:	9a01      	ldr	r2, [sp, #4]
    a89c:	441f      	add	r7, r3
    a89e:	b958      	cbnz	r0, a8b8 <multi_decode+0x4a>
			if (i < min_decode) {
    a8a0:	4554      	cmp	r4, sl
			*num_decode = i;
    a8a2:	6034      	str	r4, [r6, #0]
			if (i < min_decode) {
    a8a4:	bf38      	it	cc
    a8a6:	2000      	movcc	r0, #0
			state->payload = payload_bak;
    a8a8:	602a      	str	r2, [r5, #0]
			state->elem_count = elem_count_bak;
    a8aa:	f8c5 9008 	str.w	r9, [r5, #8]
			if (i < min_decode) {
    a8ae:	bf28      	it	cs
    a8b0:	2001      	movcs	r0, #1
}
    a8b2:	b003      	add	sp, #12
    a8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint32_t i = 0; i < max_decode; i++) {
    a8b8:	3401      	adds	r4, #1
    a8ba:	e7e1      	b.n	a880 <multi_decode+0x12>

0000a8bc <get_result_len>:
	return true;
}


static uint32_t get_result_len(const void *const input, uint32_t max_result_len)
{
    a8bc:	b510      	push	{r4, lr}
    a8be:	4603      	mov	r3, r0
	uint8_t *u8_result  = (uint8_t *)input;
	size_t i;

	for (i = 0; i < max_result_len; i++) {
    a8c0:	2200      	movs	r2, #0
    a8c2:	4408      	add	r0, r1
#ifdef CONFIG_BIG_ENDIAN
		size_t idx = i;
#else
		size_t idx = max_result_len - 1 - i;
#endif
		if (u8_result[idx] != 0) {
    a8c4:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
    a8c8:	b914      	cbnz	r4, a8d0 <get_result_len+0x14>
	for (i = 0; i < max_result_len; i++) {
    a8ca:	3201      	adds	r2, #1
    a8cc:	4291      	cmp	r1, r2
    a8ce:	d1f9      	bne.n	a8c4 <get_result_len+0x8>
			break;
		}
	}
	max_result_len -= i;
    a8d0:	1a89      	subs	r1, r1, r2

	/* According to specification result length can be encoded on 1, 2, 4
	 * or 8 bytes.
	 */
	cbor_assert(max_result_len <= 8, "Up to 8 bytes can be used to encode length.\n");
	size_t encode_byte_cnt = 1;
    a8d2:	2001      	movs	r0, #1
	max_result_len -= i;
    a8d4:	2204      	movs	r2, #4

	for (size_t i = 0; i <= 3; i++) {
		if (max_result_len <= encode_byte_cnt) {
    a8d6:	4281      	cmp	r1, r0
    a8d8:	d904      	bls.n	a8e4 <get_result_len+0x28>
	for (size_t i = 0; i <= 3; i++) {
    a8da:	3a01      	subs	r2, #1
			max_result_len = encode_byte_cnt;
			break;
		}

		encode_byte_cnt *= 2;
    a8dc:	ea4f 0040 	mov.w	r0, r0, lsl #1
	for (size_t i = 0; i <= 3; i++) {
    a8e0:	d1f9      	bne.n	a8d6 <get_result_len+0x1a>
    a8e2:	4608      	mov	r0, r1
	}

	if ((max_result_len == 1) && (u8_result[0] <= VALUE_IN_HEADER)) {
    a8e4:	2801      	cmp	r0, #1
    a8e6:	d104      	bne.n	a8f2 <get_result_len+0x36>
    a8e8:	7818      	ldrb	r0, [r3, #0]
    a8ea:	2817      	cmp	r0, #23
    a8ec:	bf94      	ite	ls
    a8ee:	2000      	movls	r0, #0
    a8f0:	2001      	movhi	r0, #1
		max_result_len = 0;
	}

	return max_result_len;
}
    a8f2:	bd10      	pop	{r4, pc}

0000a8f4 <get_additional>:
	switch(len) {
    a8f4:	2808      	cmp	r0, #8
    a8f6:	d80f      	bhi.n	a918 <get_additional+0x24>
    a8f8:	e8df f000 	tbb	[pc, r0]
    a8fc:	08080506 	.word	0x08080506
    a900:	0a0a0a0a 	.word	0x0a0a0a0a
    a904:	0c          	.byte	0x0c
    a905:	00          	.byte	0x00
    a906:	2118      	movs	r1, #24
}
    a908:	4608      	mov	r0, r1
    a90a:	4770      	bx	lr
		case 2: return 25;
    a90c:	2119      	movs	r1, #25
    a90e:	e7fb      	b.n	a908 <get_additional+0x14>
		case 4: return 26;
    a910:	211a      	movs	r1, #26
    a912:	e7f9      	b.n	a908 <get_additional+0x14>
		case 8: return 27;
    a914:	211b      	movs	r1, #27
    a916:	e7f7      	b.n	a908 <get_additional+0x14>
	return 0;
    a918:	2100      	movs	r1, #0
    a91a:	e7f5      	b.n	a908 <get_additional+0x14>

0000a91c <value_encode>:


static bool value_encode(cbor_state_t *state, cbor_major_type_t major_type,
		const void *const input, uint32_t max_result_len)
{
    a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a920:	4604      	mov	r4, r0
    a922:	460f      	mov	r7, r1
	cbor_assert(max_result_len != 0, "0-length result not supported.\n");
	return value_encode_len(state, major_type, input,
    a924:	4610      	mov	r0, r2
    a926:	4619      	mov	r1, r3
{
    a928:	4616      	mov	r6, r2
	return value_encode_len(state, major_type, input,
    a92a:	f7ff ffc7 	bl	a8bc <get_result_len>
	if ((state->payload + 1 + result_len) > state->payload_end) {
    a92e:	6822      	ldr	r2, [r4, #0]
    a930:	68e1      	ldr	r1, [r4, #12]
    a932:	1c43      	adds	r3, r0, #1
    a934:	4413      	add	r3, r2
    a936:	4299      	cmp	r1, r3
	return value_encode_len(state, major_type, input,
    a938:	4605      	mov	r5, r0
	if ((state->payload + 1 + result_len) > state->payload_end) {
    a93a:	d31d      	bcc.n	a978 <value_encode+0x5c>
	if ((state->payload + 1) > state->payload_end) {
    a93c:	f102 0801 	add.w	r8, r2, #1
    a940:	4541      	cmp	r1, r8
    a942:	d319      	bcc.n	a978 <value_encode+0x5c>
	if (!encode_header_byte(state, major_type,
    a944:	7831      	ldrb	r1, [r6, #0]
    a946:	f7ff ffd5 	bl	a8f4 <get_additional>
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    a94a:	f000 001f 	and.w	r0, r0, #31
    a94e:	ea40 1147 	orr.w	r1, r0, r7, lsl #5
    a952:	f8c4 8000 	str.w	r8, [r4]
    a956:	1973      	adds	r3, r6, r5
    a958:	7011      	strb	r1, [r2, #0]
	for (; result_len > 0; result_len--) {
    a95a:	42b3      	cmp	r3, r6
    a95c:	d105      	bne.n	a96a <value_encode+0x4e>
	state->elem_count++;
    a95e:	68a3      	ldr	r3, [r4, #8]
    a960:	3301      	adds	r3, #1
    a962:	60a3      	str	r3, [r4, #8]
	return true;
    a964:	2001      	movs	r0, #1
				get_result_len(input, max_result_len));
}
    a966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(state->payload_mut++) = u8_result[result_len - 1];
    a96a:	6822      	ldr	r2, [r4, #0]
    a96c:	1c51      	adds	r1, r2, #1
    a96e:	6021      	str	r1, [r4, #0]
    a970:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    a974:	7011      	strb	r1, [r2, #0]
	for (; result_len > 0; result_len--) {
    a976:	e7f0      	b.n	a95a <value_encode+0x3e>
		FAIL();
    a978:	2000      	movs	r0, #0
    a97a:	e7f4      	b.n	a966 <value_encode+0x4a>

0000a97c <uint32_encode>:
}


static bool uint32_encode(cbor_state_t *state, const uint32_t *input,
		cbor_major_type_t major_type)
{
    a97c:	b410      	push	{r4}
    a97e:	460c      	mov	r4, r1
	if (!value_encode(state, major_type, input, 4)) {
    a980:	2304      	movs	r3, #4
{
    a982:	4611      	mov	r1, r2
	if (!value_encode(state, major_type, input, 4)) {
    a984:	4622      	mov	r2, r4
		FAIL();
	}
	return true;
}
    a986:	bc10      	pop	{r4}
	if (!value_encode(state, major_type, input, 4)) {
    a988:	f7ff bfc8 	b.w	a91c <value_encode>

0000a98c <strx_encode>:
}


static bool strx_encode(cbor_state_t *state,
		const cbor_string_type_t *input, cbor_major_type_t major_type)
{
    a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a98e:	460e      	mov	r6, r1
{
    a990:	4604      	mov	r4, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a992:	f856 3b04 	ldr.w	r3, [r6], #4
{
    a996:	460d      	mov	r5, r1
    a998:	4617      	mov	r7, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a99a:	b173      	cbz	r3, a9ba <strx_encode+0x2e>
    a99c:	2104      	movs	r1, #4
    a99e:	4630      	mov	r0, r6
    a9a0:	f7ff ff8c 	bl	a8bc <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    a9a4:	686a      	ldr	r2, [r5, #4]
    a9a6:	6823      	ldr	r3, [r4, #0]
    a9a8:	3201      	adds	r2, #1
    a9aa:	4413      	add	r3, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a9ac:	68e2      	ldr	r2, [r4, #12]
			+ 1 + input->len + (size_t)state->payload)
    a9ae:	4403      	add	r3, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    a9b0:	429a      	cmp	r2, r3
    a9b2:	d202      	bcs.n	a9ba <strx_encode+0x2e>
	if (!strx_start_encode(state, input, major_type)) {
		FAIL();
    a9b4:	2600      	movs	r6, #0
	if (state->payload_mut != input->value) {
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    a9b6:	4630      	mov	r0, r6
    a9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!uint32_encode(state, &input->len, major_type)) {
    a9ba:	4631      	mov	r1, r6
    a9bc:	463a      	mov	r2, r7
    a9be:	4620      	mov	r0, r4
    a9c0:	f7ff ffdc 	bl	a97c <uint32_encode>
    a9c4:	4606      	mov	r6, r0
    a9c6:	2800      	cmp	r0, #0
    a9c8:	d0f4      	beq.n	a9b4 <strx_encode+0x28>
	if (state->payload_mut != input->value) {
    a9ca:	6820      	ldr	r0, [r4, #0]
    a9cc:	6829      	ldr	r1, [r5, #0]
    a9ce:	4288      	cmp	r0, r1
    a9d0:	d002      	beq.n	a9d8 <strx_encode+0x4c>
		memmove(state->payload_mut, input->value, input->len);
    a9d2:	686a      	ldr	r2, [r5, #4]
    a9d4:	f000 f90a 	bl	abec <memmove>
	state->payload += input->len;
    a9d8:	6823      	ldr	r3, [r4, #0]
    a9da:	686a      	ldr	r2, [r5, #4]
    a9dc:	4413      	add	r3, r2
    a9de:	6023      	str	r3, [r4, #0]
	return true;
    a9e0:	e7e9      	b.n	a9b6 <strx_encode+0x2a>

0000a9e2 <uintx32_put>:
{
    a9e2:	b507      	push	{r0, r1, r2, lr}
	if (!uint32_encode(state, &input, CBOR_MAJOR_TYPE_PINT)) {
    a9e4:	2200      	movs	r2, #0
{
    a9e6:	9101      	str	r1, [sp, #4]
	if (!uint32_encode(state, &input, CBOR_MAJOR_TYPE_PINT)) {
    a9e8:	a901      	add	r1, sp, #4
    a9ea:	f7ff ffc7 	bl	a97c <uint32_encode>
}
    a9ee:	b003      	add	sp, #12
    a9f0:	f85d fb04 	ldr.w	pc, [sp], #4

0000a9f4 <tstrx_encode>:
}


bool tstrx_encode(cbor_state_t *state, const cbor_string_type_t *input)
{
	return strx_encode(state, input, CBOR_MAJOR_TYPE_TSTR);
    a9f4:	2203      	movs	r2, #3
    a9f6:	f7ff bfc9 	b.w	a98c <strx_encode>

0000a9fa <list_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    a9fa:	6803      	ldr	r3, [r0, #0]
    a9fc:	68c1      	ldr	r1, [r0, #12]
    a9fe:	1c5a      	adds	r2, r3, #1
    aa00:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    aa02:	bf9f      	itttt	ls
    aa04:	6002      	strls	r2, [r0, #0]
    aa06:	229f      	movls	r2, #159	; 0x9f
#else
	if (!encode_header_byte(state, major_type, 31)) {
		FAIL();
	}
#endif
	return true;
    aa08:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    aa0a:	701a      	strbls	r2, [r3, #0]
		FAIL();
    aa0c:	bf88      	it	hi
    aa0e:	2000      	movhi	r0, #0


bool list_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
}
    aa10:	4770      	bx	lr

0000aa12 <map_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    aa12:	6803      	ldr	r3, [r0, #0]
    aa14:	68c1      	ldr	r1, [r0, #12]
    aa16:	1c5a      	adds	r2, r3, #1
    aa18:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    aa1a:	bf9f      	itttt	ls
    aa1c:	6002      	strls	r2, [r0, #0]
    aa1e:	22bf      	movls	r2, #191	; 0xbf
	return true;
    aa20:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    aa22:	701a      	strbls	r2, [r3, #0]
		FAIL();
    aa24:	bf88      	it	hi
    aa26:	2000      	movhi	r0, #0


bool map_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_MAP);
}
    aa28:	4770      	bx	lr

0000aa2a <list_map_end_encode>:
	if ((state->payload + 1) > state->payload_end) {
    aa2a:	6803      	ldr	r3, [r0, #0]
    aa2c:	68c1      	ldr	r1, [r0, #12]
    aa2e:	1c5a      	adds	r2, r3, #1
    aa30:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    aa32:	bf9f      	itttt	ls
    aa34:	6002      	strls	r2, [r0, #0]
    aa36:	22ff      	movls	r2, #255	; 0xff
#else
	if (!encode_header_byte(state, CBOR_MAJOR_TYPE_PRIM, 31)) {
		FAIL();
	}
#endif
	return true;
    aa38:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    aa3a:	701a      	strbls	r2, [r3, #0]
		FAIL();
    aa3c:	bf88      	it	hi
    aa3e:	2000      	movhi	r0, #0
}
    aa40:	4770      	bx	lr

0000aa42 <list_end_encode>:


bool list_end_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_end_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
    aa42:	2204      	movs	r2, #4
    aa44:	f7ff bff1 	b.w	aa2a <list_map_end_encode>

0000aa48 <map_end_encode>:
}


bool map_end_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_end_encode(state, max_num, CBOR_MAJOR_TYPE_MAP);
    aa48:	2205      	movs	r2, #5
    aa4a:	f7ff bfee 	b.w	aa2a <list_map_end_encode>

0000aa4e <new_backup>:
_Static_assert((sizeof(size_t) == sizeof(void *)),
	"This code needs size_t to be the same length as pointers.");

bool new_backup(cbor_state_t *state, uint32_t new_elem_count)
{
	if ((state->backups->current_backup + 1)
    aa4e:	6902      	ldr	r2, [r0, #16]
{
    aa50:	b538      	push	{r3, r4, r5, lr}
	if ((state->backups->current_backup + 1)
    aa52:	6853      	ldr	r3, [r2, #4]
{
    aa54:	460d      	mov	r5, r1
	if ((state->backups->current_backup + 1)
    aa56:	6891      	ldr	r1, [r2, #8]
    aa58:	3301      	adds	r3, #1
    aa5a:	428b      	cmp	r3, r1
{
    aa5c:	4604      	mov	r4, r0
	if ((state->backups->current_backup + 1)
    aa5e:	d20a      	bcs.n	aa76 <new_backup+0x28>
		>= state->backups->num_backups) {
		FAIL();
	}

	uint32_t i = ++(state->backups->current_backup);
	memcpy(&state->backups->backup_list[i], state,
    aa60:	6810      	ldr	r0, [r2, #0]
	uint32_t i = ++(state->backups->current_backup);
    aa62:	6053      	str	r3, [r2, #4]
	memcpy(&state->backups->backup_list[i], state,
    aa64:	2214      	movs	r2, #20
    aa66:	4621      	mov	r1, r4
    aa68:	fb02 0003 	mla	r0, r2, r3, r0
    aa6c:	f000 f8d6 	bl	ac1c <memcpy>
		sizeof(cbor_state_t));

	state->elem_count = new_elem_count;
    aa70:	60a5      	str	r5, [r4, #8]

	return true;
    aa72:	2001      	movs	r0, #1
}
    aa74:	bd38      	pop	{r3, r4, r5, pc}
		FAIL();
    aa76:	2000      	movs	r0, #0
    aa78:	e7fc      	b.n	aa74 <new_backup+0x26>

0000aa7a <restore_backup>:


bool restore_backup(cbor_state_t *state, uint32_t flags,
		uint32_t max_elem_count)
{
    aa7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa7e:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint32_t elem_count = state->elem_count;

	if (state->backups->current_backup == 0) {
    aa80:	6902      	ldr	r2, [r0, #16]
    aa82:	6853      	ldr	r3, [r2, #4]
{
    aa84:	4604      	mov	r4, r0
    aa86:	460d      	mov	r5, r1
	if (state->backups->current_backup == 0) {
    aa88:	b913      	cbnz	r3, aa90 <restore_backup+0x16>
		FAIL();
    aa8a:	2000      	movs	r0, #0
	if (flags & FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & FLAG_RESTORE) {
    aa90:	07e9      	lsls	r1, r5, #31
	const uint8_t *payload = state->payload;
    aa92:	6807      	ldr	r7, [r0, #0]
	const uint32_t elem_count = state->elem_count;
    aa94:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (flags & FLAG_RESTORE) {
    aa98:	d505      	bpl.n	aaa6 <restore_backup+0x2c>
		memcpy(state, &state->backups->backup_list[i],
    aa9a:	6811      	ldr	r1, [r2, #0]
    aa9c:	2214      	movs	r2, #20
    aa9e:	fb02 1103 	mla	r1, r2, r3, r1
    aaa2:	f000 f8bb 	bl	ac1c <memcpy>
	if (flags & FLAG_DISCARD) {
    aaa6:	07aa      	lsls	r2, r5, #30
		state->backups->current_backup--;
    aaa8:	bf41      	itttt	mi
    aaaa:	6922      	ldrmi	r2, [r4, #16]
    aaac:	6853      	ldrmi	r3, [r2, #4]
    aaae:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
    aab2:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    aab4:	45b0      	cmp	r8, r6
    aab6:	d8e8      	bhi.n	aa8a <restore_backup+0x10>
	if (flags & FLAG_TRANSFER_PAYLOAD) {
    aab8:	076b      	lsls	r3, r5, #29
		state->payload = payload;
    aaba:	bf48      	it	mi
    aabc:	6027      	strmi	r7, [r4, #0]
	return true;
    aabe:	2001      	movs	r0, #1
    aac0:	e7e4      	b.n	aa8c <restore_backup+0x12>

0000aac2 <union_start_code>:


bool union_start_code(cbor_state_t *state)
{
	if (!new_backup(state, state->elem_count)) {
    aac2:	6881      	ldr	r1, [r0, #8]
    aac4:	f7ff bfc3 	b.w	aa4e <new_backup>

0000aac8 <union_elem_code>:
}


bool union_elem_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_RESTORE, state->elem_count)) {
    aac8:	6882      	ldr	r2, [r0, #8]
    aaca:	2101      	movs	r1, #1
    aacc:	f7ff bfd5 	b.w	aa7a <restore_backup>

0000aad0 <union_end_code>:
	return true;
}

bool union_end_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_DISCARD, state->elem_count)) {
    aad0:	6882      	ldr	r2, [r0, #8]
    aad2:	2102      	movs	r1, #2
    aad4:	f7ff bfd1 	b.w	aa7a <restore_backup>

0000aad8 <entry_function>:
}

bool entry_function(const uint8_t *payload, uint32_t payload_len,
		const void *struct_ptr, uint32_t *payload_len_out,
		cbor_encoder_t func, uint32_t elem_count, uint32_t num_backups)
{
    aad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aadc:	b088      	sub	sp, #32
    aade:	af00      	add	r7, sp, #0
    aae0:	4605      	mov	r5, r0
    aae2:	6c38      	ldr	r0, [r7, #64]	; 0x40
		.backup_list = state_backups,
		.current_backup = 0,
		.num_backups = num_backups + 1,
	};

	state.backups = &backups;
    aae4:	61ff      	str	r7, [r7, #28]
	cbor_state_t state_backups[num_backups + 1];
    aae6:	2414      	movs	r4, #20
{
    aae8:	460e      	mov	r6, r1
	cbor_state_t state_backups[num_backups + 1];
    aaea:	fb00 4404 	mla	r4, r0, r4, r4
	cbor_state_t state = {
    aaee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    aaf0:	6179      	str	r1, [r7, #20]
	cbor_state_t state_backups[num_backups + 1];
    aaf2:	3407      	adds	r4, #7
		.payload_end = payload + payload_len,
    aaf4:	19a9      	adds	r1, r5, r6
{
    aaf6:	4698      	mov	r8, r3
	cbor_state_t state = {
    aaf8:	61b9      	str	r1, [r7, #24]
    aafa:	2300      	movs	r3, #0
	cbor_state_t state_backups[num_backups + 1];
    aafc:	1c41      	adds	r1, r0, #1
    aafe:	f024 0407 	bic.w	r4, r4, #7
	cbor_state_backups_t backups = {
    ab02:	e9c7 3101 	strd	r3, r1, [r7, #4]
	cbor_state_t state = {
    ab06:	e9c7 5303 	strd	r5, r3, [r7, #12]
	cbor_state_t state_backups[num_backups + 1];
    ab0a:	ebad 0d04 	sub.w	sp, sp, r4

	bool result = func(&state, struct_ptr);
    ab0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	cbor_state_backups_t backups = {
    ab10:	f8c7 d000 	str.w	sp, [r7]
	bool result = func(&state, struct_ptr);
    ab14:	4611      	mov	r1, r2
    ab16:	f107 000c 	add.w	r0, r7, #12
    ab1a:	4798      	blx	r3

	if (result && (payload_len_out != NULL)) {
    ab1c:	b150      	cbz	r0, ab34 <entry_function+0x5c>
    ab1e:	f1b8 0f00 	cmp.w	r8, #0
    ab22:	d007      	beq.n	ab34 <entry_function+0x5c>
		*payload_len_out = MIN(payload_len,
    ab24:	68fb      	ldr	r3, [r7, #12]
    ab26:	1b5b      	subs	r3, r3, r5
    ab28:	42b3      	cmp	r3, r6
    ab2a:	bf94      	ite	ls
    ab2c:	f8c8 3000 	strls.w	r3, [r8]
    ab30:	f8c8 6000 	strhi.w	r6, [r8]
				(size_t)state.payload - (size_t)payload);
	}
	return result;
}
    ab34:	3720      	adds	r7, #32
    ab36:	46bd      	mov	sp, r7
    ab38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ab3c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    ab3c:	2100      	movs	r1, #0
    ab3e:	2001      	movs	r0, #1
    ab40:	f7f9 bb2c 	b.w	419c <z_arm_fatal_error>

0000ab44 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    ab44:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    ab46:	6800      	ldr	r0, [r0, #0]
    ab48:	f7f9 bb28 	b.w	419c <z_arm_fatal_error>

0000ab4c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    ab4c:	b508      	push	{r3, lr}
	handler();
    ab4e:	f7f9 fb5d 	bl	420c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    ab52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    ab56:	f7f9 bdd1 	b.w	46fc <z_arm_exc_exit>

0000ab5a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    ab5a:	3901      	subs	r1, #1
    ab5c:	4603      	mov	r3, r0
    ab5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ab62:	b90a      	cbnz	r2, ab68 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    ab64:	701a      	strb	r2, [r3, #0]

	return dest;
}
    ab66:	4770      	bx	lr
		*d = *s;
    ab68:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    ab6c:	e7f7      	b.n	ab5e <strcpy+0x4>

0000ab6e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    ab6e:	b570      	push	{r4, r5, r6, lr}
    ab70:	4605      	mov	r5, r0
    ab72:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    ab74:	b142      	cbz	r2, ab88 <strncpy+0x1a>
    ab76:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
    ab7a:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
    ab7c:	b92c      	cbnz	r4, ab8a <strncpy+0x1c>
    ab7e:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
    ab80:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
    ab84:	429a      	cmp	r2, r3
    ab86:	d1fb      	bne.n	ab80 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
    ab88:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    ab8a:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
    ab8e:	4632      	mov	r2, r6
    ab90:	e7ef      	b.n	ab72 <strncpy+0x4>

0000ab92 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    ab92:	4603      	mov	r3, r0
	size_t n = 0;
    ab94:	2000      	movs	r0, #0

	while (*s != '\0') {
    ab96:	5c1a      	ldrb	r2, [r3, r0]
    ab98:	b902      	cbnz	r2, ab9c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    ab9a:	4770      	bx	lr
		n++;
    ab9c:	3001      	adds	r0, #1
    ab9e:	e7fa      	b.n	ab96 <strlen+0x4>

0000aba0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    aba0:	4603      	mov	r3, r0
	size_t n = 0;
    aba2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    aba4:	5c1a      	ldrb	r2, [r3, r0]
    aba6:	b10a      	cbz	r2, abac <strnlen+0xc>
    aba8:	4288      	cmp	r0, r1
    abaa:	d100      	bne.n	abae <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    abac:	4770      	bx	lr
		n++;
    abae:	3001      	adds	r0, #1
    abb0:	e7f8      	b.n	aba4 <strnlen+0x4>

0000abb2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    abb2:	1e43      	subs	r3, r0, #1
    abb4:	3901      	subs	r1, #1
    abb6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    abba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    abbe:	4282      	cmp	r2, r0
    abc0:	d101      	bne.n	abc6 <strcmp+0x14>
    abc2:	2a00      	cmp	r2, #0
    abc4:	d1f7      	bne.n	abb6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    abc6:	1a10      	subs	r0, r2, r0
    abc8:	4770      	bx	lr

0000abca <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    abca:	b510      	push	{r4, lr}
    abcc:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    abce:	b15a      	cbz	r2, abe8 <memcmp+0x1e>
    abd0:	3901      	subs	r1, #1
    abd2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    abd4:	f813 0b01 	ldrb.w	r0, [r3], #1
    abd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    abdc:	42a3      	cmp	r3, r4
    abde:	d001      	beq.n	abe4 <memcmp+0x1a>
    abe0:	4290      	cmp	r0, r2
    abe2:	d0f7      	beq.n	abd4 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    abe4:	1a80      	subs	r0, r0, r2
}
    abe6:	bd10      	pop	{r4, pc}
		return 0;
    abe8:	4610      	mov	r0, r2
    abea:	e7fc      	b.n	abe6 <memcmp+0x1c>

0000abec <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    abec:	1a43      	subs	r3, r0, r1
    abee:	4293      	cmp	r3, r2
{
    abf0:	b510      	push	{r4, lr}
    abf2:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    abf6:	d308      	bcc.n	ac0a <memmove+0x1e>
    abf8:	3901      	subs	r1, #1
	char *dest = d;
    abfa:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    abfc:	429a      	cmp	r2, r3
    abfe:	d007      	beq.n	ac10 <memmove+0x24>
			*dest = *src;
    ac00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ac04:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    ac08:	e7f8      	b.n	abfc <memmove+0x10>
    ac0a:	440a      	add	r2, r1
		while (n > 0) {
    ac0c:	428a      	cmp	r2, r1
    ac0e:	d100      	bne.n	ac12 <memmove+0x26>
		}
	}

	return d;
}
    ac10:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    ac12:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    ac16:	f803 4d01 	strb.w	r4, [r3, #-1]!
    ac1a:	e7f7      	b.n	ac0c <memmove+0x20>

0000ac1c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    ac1c:	b510      	push	{r4, lr}
    ac1e:	1e43      	subs	r3, r0, #1
    ac20:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    ac22:	4291      	cmp	r1, r2
    ac24:	d100      	bne.n	ac28 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    ac26:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    ac28:	f811 4b01 	ldrb.w	r4, [r1], #1
    ac2c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    ac30:	e7f7      	b.n	ac22 <memcpy+0x6>

0000ac32 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    ac32:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    ac34:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    ac36:	4603      	mov	r3, r0
	while (n > 0) {
    ac38:	4293      	cmp	r3, r2
    ac3a:	d100      	bne.n	ac3e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    ac3c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    ac3e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    ac42:	e7f9      	b.n	ac38 <memset+0x6>

0000ac44 <_stdout_hook_default>:
}
    ac44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ac48:	4770      	bx	lr

0000ac4a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    ac4a:	b084      	sub	sp, #16
    ac4c:	ab04      	add	r3, sp, #16
    ac4e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    ac52:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ac56:	2b06      	cmp	r3, #6
    ac58:	d108      	bne.n	ac6c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    ac5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ac5e:	2201      	movs	r2, #1
    ac60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    ac64:	f3bf 8f4f 	dsb	sy
        __WFE();
    ac68:	bf20      	wfe
    while (true)
    ac6a:	e7fd      	b.n	ac68 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    ac6c:	b004      	add	sp, #16
    ac6e:	4770      	bx	lr

0000ac70 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    ac70:	b084      	sub	sp, #16
    ac72:	ab04      	add	r3, sp, #16
    ac74:	e903 0007 	stmdb	r3, {r0, r1, r2}
    ac78:	2300      	movs	r3, #0
    ac7a:	f383 8811 	msr	BASEPRI, r3
    ac7e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    ac82:	b004      	add	sp, #16
    ac84:	4770      	bx	lr

0000ac86 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ac86:	6843      	ldr	r3, [r0, #4]
    ac88:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ac8a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    ac8e:	600b      	str	r3, [r1, #0]
}
    ac90:	2000      	movs	r0, #0
    ac92:	4770      	bx	lr

0000ac94 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ac94:	6843      	ldr	r3, [r0, #4]
    ac96:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    ac98:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    ac9c:	4042      	eors	r2, r0
    ac9e:	400a      	ands	r2, r1
    aca0:	4042      	eors	r2, r0
    p_reg->OUT = value;
    aca2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    aca6:	2000      	movs	r0, #0
    aca8:	4770      	bx	lr

0000acaa <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    acaa:	6843      	ldr	r3, [r0, #4]
    acac:	685b      	ldr	r3, [r3, #4]
}
    acae:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    acb0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    acb4:	4770      	bx	lr

0000acb6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    acb6:	6843      	ldr	r3, [r0, #4]
    acb8:	685b      	ldr	r3, [r3, #4]
}
    acba:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    acbc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    acc0:	4770      	bx	lr

0000acc2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    acc2:	6843      	ldr	r3, [r0, #4]
    acc4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    acc6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    acca:	404b      	eors	r3, r1
    p_reg->OUT = value;
    accc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    acd0:	2000      	movs	r0, #0
    acd2:	4770      	bx	lr

0000acd4 <gpio_nrfx_manage_callback>:
	return port->data;
    acd4:	6903      	ldr	r3, [r0, #16]
	return list->head;
    acd6:	6858      	ldr	r0, [r3, #4]
{
    acd8:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    acda:	b158      	cbz	r0, acf4 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    acdc:	2400      	movs	r4, #0
    acde:	4281      	cmp	r1, r0
    ace0:	d112      	bne.n	ad08 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    ace2:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    ace4:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    ace6:	b954      	cbnz	r4, acfe <gpio_nrfx_manage_callback+0x2a>
    ace8:	428d      	cmp	r5, r1
	list->head = node;
    acea:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    acec:	d100      	bne.n	acf0 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    acee:	6098      	str	r0, [r3, #8]
	parent->next = child;
    acf0:	2000      	movs	r0, #0
    acf2:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    acf4:	b96a      	cbnz	r2, ad12 <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    acf6:	2000      	movs	r0, #0
}
    acf8:	bd30      	pop	{r4, r5, pc}
    acfa:	4628      	mov	r0, r5
    acfc:	e7ef      	b.n	acde <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    acfe:	428d      	cmp	r5, r1
	parent->next = child;
    ad00:	6020      	str	r0, [r4, #0]
	list->tail = node;
    ad02:	bf08      	it	eq
    ad04:	609c      	streq	r4, [r3, #8]
}
    ad06:	e7f3      	b.n	acf0 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    ad08:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ad0a:	4604      	mov	r4, r0
    ad0c:	2d00      	cmp	r5, #0
    ad0e:	d1f4      	bne.n	acfa <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    ad10:	b13a      	cbz	r2, ad22 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    ad12:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    ad14:	685a      	ldr	r2, [r3, #4]
    ad16:	600a      	str	r2, [r1, #0]
	list->head = node;
    ad18:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    ad1a:	2800      	cmp	r0, #0
    ad1c:	d1eb      	bne.n	acf6 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    ad1e:	6099      	str	r1, [r3, #8]
}
    ad20:	e7ea      	b.n	acf8 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    ad22:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    ad26:	e7e7      	b.n	acf8 <gpio_nrfx_manage_callback+0x24>

0000ad28 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
    ad28:	b570      	push	{r4, r5, r6, lr}
    ad2a:	460e      	mov	r6, r1
    ad2c:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ad2e:	4601      	mov	r1, r0
    ad30:	b150      	cbz	r0, ad48 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
    ad32:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
    ad34:	688a      	ldr	r2, [r1, #8]
    ad36:	402a      	ands	r2, r5
    ad38:	d002      	beq.n	ad40 <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    ad3a:	684b      	ldr	r3, [r1, #4]
    ad3c:	4630      	mov	r0, r6
    ad3e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    ad40:	b114      	cbz	r4, ad48 <gpio_fire_callbacks.isra.0+0x20>
    ad42:	4621      	mov	r1, r4
    ad44:	6824      	ldr	r4, [r4, #0]
    ad46:	e7f5      	b.n	ad34 <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
    ad48:	bd70      	pop	{r4, r5, r6, pc}

0000ad4a <cfg_level_pins>:
{
    ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
    ad4e:	6907      	ldr	r7, [r0, #16]
	return port->config;
    ad50:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    ad54:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    ad56:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    ad5a:	4313      	orrs	r3, r2
    ad5c:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    ad60:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    ad62:	2500      	movs	r5, #0
	while (level_pins) {
    ad64:	b90c      	cbnz	r4, ad6a <cfg_level_pins+0x20>
}
    ad66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    ad6a:	4226      	tst	r6, r4
    ad6c:	d010      	beq.n	ad90 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ad6e:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ad70:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    ad74:	40e9      	lsrs	r1, r5
    ad76:	f001 0101 	and.w	r1, r1, #1
    ad7a:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    ad7e:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    ad82:	b2c9      	uxtb	r1, r1
    ad84:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    ad88:	f7f9 fe9a 	bl	4ac0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    ad8c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    ad90:	3501      	adds	r5, #1
		bit <<= 1;
    ad92:	0076      	lsls	r6, r6, #1
    ad94:	e7e6      	b.n	ad64 <cfg_level_pins+0x1a>

0000ad96 <lis2dh_sample_fetch>:
	if (chan == SENSOR_CHAN_ALL) {
    ad96:	2938      	cmp	r1, #56	; 0x38
{
    ad98:	b510      	push	{r4, lr}
    ad9a:	4604      	mov	r4, r0
	if (chan == SENSOR_CHAN_ALL) {
    ad9c:	d107      	bne.n	adae <lis2dh_sample_fetch+0x18>
		status = lis2dh_fetch_xyz(dev, chan);
    ad9e:	f7fa f96f 	bl	5080 <lis2dh_fetch_xyz.constprop.0>
		if (status == 0) {
    ada2:	b970      	cbnz	r0, adc2 <lis2dh_sample_fetch+0x2c>
			status = lis2dh_sample_fetch_temp(dev);
    ada4:	4620      	mov	r0, r4
}
    ada6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		status = lis2dh_sample_fetch_temp(dev);
    adaa:	f7fa b825 	b.w	4df8 <lis2dh_sample_fetch_temp>
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
    adae:	2903      	cmp	r1, #3
    adb0:	d103      	bne.n	adba <lis2dh_sample_fetch+0x24>
}
    adb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		status = lis2dh_fetch_xyz(dev, chan);
    adb6:	f7fa b963 	b.w	5080 <lis2dh_fetch_xyz.constprop.0>
	} else if (chan == SENSOR_CHAN_DIE_TEMP) {
    adba:	290c      	cmp	r1, #12
    adbc:	d0f3      	beq.n	ada6 <lis2dh_sample_fetch+0x10>
	int status = -ENODATA;
    adbe:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
    adc2:	bd10      	pop	{r4, pc}

0000adc4 <i2c_transfer>:
}


extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
    adc4:	b410      	push	{r4}
				      uint16_t addr)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	return api->transfer(dev, msgs, num_msgs, addr);
    adc6:	6884      	ldr	r4, [r0, #8]
    adc8:	6864      	ldr	r4, [r4, #4]
    adca:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
    adcc:	bc10      	pop	{r4}
    adce:	4760      	bx	ip

0000add0 <lis2dh_i2c_write_data>:
{
    add0:	b530      	push	{r4, r5, lr}
    add2:	461d      	mov	r5, r3
    add4:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
    add6:	6903      	ldr	r3, [r0, #16]
{
    add8:	4604      	mov	r4, r0
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
    adda:	f061 017f 	orn	r1, r1, #127	; 0x7f
    adde:	6818      	ldr	r0, [r3, #0]
    ade0:	f88d 1007 	strb.w	r1, [sp, #7]
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
    ade4:	f10d 0107 	add.w	r1, sp, #7
    ade8:	6863      	ldr	r3, [r4, #4]
    adea:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
    adec:	2101      	movs	r1, #1
    adee:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    adf0:	2100      	movs	r1, #0
    adf2:	891b      	ldrh	r3, [r3, #8]
    adf4:	f88d 1010 	strb.w	r1, [sp, #16]
    adf8:	e9cd 2505 	strd	r2, r5, [sp, #20]

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;

	return i2c_transfer(dev, msg, 2, dev_addr);
    adfc:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    adfe:	2202      	movs	r2, #2
    ae00:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
    ae04:	f7ff ffde 	bl	adc4 <i2c_transfer>
}
    ae08:	b009      	add	sp, #36	; 0x24
    ae0a:	bd30      	pop	{r4, r5, pc}

0000ae0c <lis2dh_i2c_read_data>:
{
    ae0c:	b530      	push	{r4, r5, lr}
    ae0e:	4604      	mov	r4, r0
    ae10:	b089      	sub	sp, #36	; 0x24
    ae12:	461d      	mov	r5, r3
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
    ae14:	6903      	ldr	r3, [r0, #16]
    ae16:	f061 017f 	orn	r1, r1, #127	; 0x7f
    ae1a:	6818      	ldr	r0, [r3, #0]
    ae1c:	6863      	ldr	r3, [r4, #4]
    ae1e:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    ae22:	f10d 0107 	add.w	r1, sp, #7
    ae26:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    ae28:	2101      	movs	r1, #1
    ae2a:	891b      	ldrh	r3, [r3, #8]
    ae2c:	9103      	str	r1, [sp, #12]
    ae2e:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    ae32:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    ae34:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    ae36:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    ae3a:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
    ae3e:	a902      	add	r1, sp, #8
    ae40:	2202      	movs	r2, #2
    ae42:	f7ff ffbf 	bl	adc4 <i2c_transfer>
}
    ae46:	b009      	add	sp, #36	; 0x24
    ae48:	bd30      	pop	{r4, r5, pc}

0000ae4a <lis2dh_i2c_write_reg>:
{
    ae4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ae4c:	4603      	mov	r3, r0
	return i2c_reg_write_byte(data->bus,
    ae4e:	6900      	ldr	r0, [r0, #16]
    ae50:	685b      	ldr	r3, [r3, #4]
    ae52:	6800      	ldr	r0, [r0, #0]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    ae54:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
    ae58:	2202      	movs	r2, #2
    ae5a:	891b      	ldrh	r3, [r3, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
    ae5c:	f88d 1000 	strb.w	r1, [sp]
	msg.len = num_bytes;
    ae60:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    ae62:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
    ae66:	a901      	add	r1, sp, #4
    ae68:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
    ae6a:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
    ae6e:	f7ff ffa9 	bl	adc4 <i2c_transfer>
}
    ae72:	b005      	add	sp, #20
    ae74:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae78 <lis2dh_i2c_read_reg>:
{
    ae78:	b510      	push	{r4, lr}
    ae7a:	4603      	mov	r3, r0
    ae7c:	b088      	sub	sp, #32
	return i2c_reg_read_byte(data->bus,
    ae7e:	6900      	ldr	r0, [r0, #16]
    ae80:	685b      	ldr	r3, [r3, #4]
    ae82:	6800      	ldr	r0, [r0, #0]
    ae84:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    ae88:	f10d 0107 	add.w	r1, sp, #7
    ae8c:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    ae8e:	2101      	movs	r1, #1
    ae90:	891b      	ldrh	r3, [r3, #8]
    ae92:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
    ae94:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    ae98:	2207      	movs	r2, #7
    ae9a:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
    ae9e:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
    aea0:	2202      	movs	r2, #2
    aea2:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
    aea4:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
    aea8:	f7ff ff8c 	bl	adc4 <i2c_transfer>
}
    aeac:	b008      	add	sp, #32
    aeae:	bd10      	pop	{r4, pc}

0000aeb0 <lis2dh_i2c_update_reg>:
{
    aeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aeb4:	4698      	mov	r8, r3
	return i2c_reg_update_byte(data->bus,
    aeb6:	6903      	ldr	r3, [r0, #16]
    aeb8:	f8d3 9000 	ldr.w	r9, [r3]
				   cfg->bus_cfg.i2c_slv_addr,
    aebc:	6843      	ldr	r3, [r0, #4]
{
    aebe:	b088      	sub	sp, #32
    aec0:	f893 a008 	ldrb.w	sl, [r3, #8]
    aec4:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
    aec8:	2300      	movs	r3, #0
	msg[0].len = num_write;
    aeca:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
    aecc:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
    aed0:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
    aed4:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    aed8:	2307      	movs	r3, #7
    aeda:	460e      	mov	r6, r1
    aedc:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
    aede:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    aee0:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
    aee4:	2202      	movs	r2, #2
    aee6:	4653      	mov	r3, sl
    aee8:	a902      	add	r1, sp, #8
    aeea:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
    aeec:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
    aeee:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
    aef0:	f7ff ff68 	bl	adc4 <i2c_transfer>
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
	if (rc != 0) {
    aef4:	b9b8      	cbnz	r0, af26 <lis2dh_i2c_update_reg+0x76>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
    aef6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    aefa:	ea23 0104 	bic.w	r1, r3, r4
    aefe:	ea04 0408 	and.w	r4, r4, r8
    af02:	430c      	orrs	r4, r1
	if (new_value == old_value) {
    af04:	42a3      	cmp	r3, r4
    af06:	d00e      	beq.n	af26 <lis2dh_i2c_update_reg+0x76>
	msg.len = num_bytes;
    af08:	2302      	movs	r3, #2
    af0a:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    af0c:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
    af10:	463a      	mov	r2, r7
    af12:	4653      	mov	r3, sl
    af14:	a902      	add	r1, sp, #8
    af16:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
    af18:	f88d 6004 	strb.w	r6, [sp, #4]
    af1c:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
    af20:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
    af22:	f7ff ff4f 	bl	adc4 <i2c_transfer>
}
    af26:	b008      	add	sp, #32
    af28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000af2c <gpio_pin_configure_dt.constprop.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    af2c:	b4f0      	push	{r4, r5, r6, r7}
    af2e:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
    af30:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
    af32:	795e      	ldrb	r6, [r3, #5]
	return gpio_pin_configure(spec->port,
    af34:	7919      	ldrb	r1, [r3, #4]
    af36:	f446 7280 	orr.w	r2, r6, #256	; 0x100
	struct gpio_driver_data *data =
    af3a:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
    af3c:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    af3e:	2301      	movs	r3, #1
    af40:	fa03 f401 	lsl.w	r4, r3, r1
    af44:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    af46:	f016 0f01 	tst.w	r6, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    af4a:	bf14      	ite	ne
    af4c:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    af4e:	43a3      	biceq	r3, r4
    af50:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    af52:	683b      	ldr	r3, [r7, #0]
}
    af54:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    af56:	4718      	bx	r3

0000af58 <gpio_pin_interrupt_configure_dt.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    af58:	b430      	push	{r4, r5}
    af5a:	4603      	mov	r3, r0
    af5c:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    af5e:	6800      	ldr	r0, [r0, #0]
    af60:	7919      	ldrb	r1, [r3, #4]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    af62:	0413      	lsls	r3, r2, #16
	const struct gpio_driver_api *api =
    af64:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    af66:	d507      	bpl.n	af78 <gpio_pin_interrupt_configure_dt.isra.0+0x20>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    af68:	6905      	ldr	r5, [r0, #16]
    af6a:	2301      	movs	r3, #1
    af6c:	682d      	ldr	r5, [r5, #0]
    af6e:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    af70:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    af72:	bf18      	it	ne
    af74:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    af78:	69a4      	ldr	r4, [r4, #24]
    af7a:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
    af7e:	46a4      	mov	ip, r4
    af80:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
    af84:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    af86:	4760      	bx	ip

0000af88 <lis2dh_gpio_int1_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    af88:	f101 0320 	add.w	r3, r1, #32
    af8c:	f3bf 8f5b 	dmb	ish
    af90:	e853 2f00 	ldrex	r2, [r3]
    af94:	f042 0210 	orr.w	r2, r2, #16
    af98:	e843 2000 	strex	r0, r2, [r3]
    af9c:	2800      	cmp	r0, #0
    af9e:	d1f7      	bne.n	af90 <lis2dh_gpio_int1_callback+0x8>
    afa0:	f3bf 8f5b 	dmb	ish
    afa4:	f501 6095 	add.w	r0, r1, #1192	; 0x4a8
    afa8:	f7fd ba9e 	b.w	84e8 <z_impl_k_sem_give>

0000afac <lis2dh_gpio_int2_callback>:
    afac:	f101 0314 	add.w	r3, r1, #20
    afb0:	f3bf 8f5b 	dmb	ish
    afb4:	e853 2f00 	ldrex	r2, [r3]
    afb8:	f042 0220 	orr.w	r2, r2, #32
    afbc:	e843 2000 	strex	r0, r2, [r3]
    afc0:	2800      	cmp	r0, #0
    afc2:	d1f7      	bne.n	afb4 <lis2dh_gpio_int2_callback+0x8>
    afc4:	f3bf 8f5b 	dmb	ish
    afc8:	f201 409c 	addw	r0, r1, #1180	; 0x49c
    afcc:	f7fd ba8c 	b.w	84e8 <z_impl_k_sem_give>

0000afd0 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    afd0:	2301      	movs	r3, #1
    afd2:	fa03 f101 	lsl.w	r1, r3, r1
    afd6:	6903      	ldr	r3, [r0, #16]
    afd8:	681b      	ldr	r3, [r3, #0]
    afda:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    afdc:	bf18      	it	ne
    afde:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    afe2:	b112      	cbz	r2, afea <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
    afe4:	6883      	ldr	r3, [r0, #8]
    afe6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    afe8:	4718      	bx	r3
    afea:	6883      	ldr	r3, [r0, #8]
    afec:	691b      	ldr	r3, [r3, #16]
    afee:	e7fb      	b.n	afe8 <gpio_pin_set.isra.0+0x18>

0000aff0 <_spi_context_cs_control>:
{
    aff0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    aff2:	6805      	ldr	r5, [r0, #0]
{
    aff4:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
    aff6:	b1fd      	cbz	r5, b038 <_spi_context_cs_control+0x48>
    aff8:	68ab      	ldr	r3, [r5, #8]
    affa:	b1eb      	cbz	r3, b038 <_spi_context_cs_control+0x48>
    affc:	6818      	ldr	r0, [r3, #0]
    affe:	b1d8      	cbz	r0, b038 <_spi_context_cs_control+0x48>
		if (on) {
    b000:	b151      	cbz	r1, b018 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
    b002:	7a19      	ldrb	r1, [r3, #8]
    b004:	2201      	movs	r2, #1
    b006:	f7ff ffe3 	bl	afd0 <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    b00a:	6823      	ldr	r3, [r4, #0]
    b00c:	689b      	ldr	r3, [r3, #8]
    b00e:	6858      	ldr	r0, [r3, #4]
}
    b010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    b014:	f000 bdc2 	b.w	bb9c <z_impl_k_busy_wait>
			if (!force_off &&
    b018:	b912      	cbnz	r2, b020 <_spi_context_cs_control+0x30>
    b01a:	88aa      	ldrh	r2, [r5, #4]
    b01c:	0492      	lsls	r2, r2, #18
    b01e:	d40b      	bmi.n	b038 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
    b020:	6858      	ldr	r0, [r3, #4]
    b022:	f000 fdbb 	bl	bb9c <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
    b026:	6823      	ldr	r3, [r4, #0]
    b028:	689b      	ldr	r3, [r3, #8]
    b02a:	2200      	movs	r2, #0
    b02c:	7a19      	ldrb	r1, [r3, #8]
    b02e:	6818      	ldr	r0, [r3, #0]
}
    b030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
    b034:	f7ff bfcc 	b.w	afd0 <gpio_pin_set.isra.0>
}
    b038:	bd38      	pop	{r3, r4, r5, pc}

0000b03a <spi_context_unlock_unconditionally>:
{
    b03a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    b03c:	2201      	movs	r2, #1
    b03e:	2100      	movs	r1, #0
{
    b040:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    b042:	f7ff ffd5 	bl	aff0 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    b046:	6923      	ldr	r3, [r4, #16]
    b048:	b933      	cbnz	r3, b058 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    b04a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    b04c:	f104 0008 	add.w	r0, r4, #8
}
    b050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b054:	f7fd ba48 	b.w	84e8 <z_impl_k_sem_give>
    b058:	bd10      	pop	{r4, pc}

0000b05a <spi_nrfx_release>:
	return dev->data;
    b05a:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    b05c:	6803      	ldr	r3, [r0, #0]
    b05e:	428b      	cmp	r3, r1
{
    b060:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    b062:	d106      	bne.n	b072 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    b064:	f890 4054 	ldrb.w	r4, [r0, #84]	; 0x54
    b068:	b934      	cbnz	r4, b078 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    b06a:	f7ff ffe6 	bl	b03a <spi_context_unlock_unconditionally>
	return 0;
    b06e:	4620      	mov	r0, r4
}
    b070:	bd10      	pop	{r4, pc}
		return -EINVAL;
    b072:	f06f 0015 	mvn.w	r0, #21
    b076:	e7fb      	b.n	b070 <spi_nrfx_release+0x16>
		return -EBUSY;
    b078:	f06f 000f 	mvn.w	r0, #15
    b07c:	e7f8      	b.n	b070 <spi_nrfx_release+0x16>

0000b07e <k_sem_give>:
    b07e:	f7fd ba33 	b.w	84e8 <z_impl_k_sem_give>

0000b082 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
    b082:	b918      	cbnz	r0, b08c <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
    b084:	f101 0020 	add.w	r0, r1, #32
    b088:	f7ff bff9 	b.w	b07e <k_sem_give>
}
    b08c:	4770      	bx	lr

0000b08e <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    b08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b096:	3010      	adds	r0, #16
    b098:	f7fd ba46 	b.w	8528 <z_impl_k_sem_take>

0000b09c <qspi_trans_lock.isra.0>:
    b09c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b0a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b0a4:	f7fd ba40 	b.w	8528 <z_impl_k_sem_take>

0000b0a8 <qspi_nor_write_protection_set>:
{
    b0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
    b0aa:	2200      	movs	r2, #0
    b0ac:	4291      	cmp	r1, r2
    b0ae:	bf14      	ite	ne
    b0b0:	2304      	movne	r3, #4
    b0b2:	2306      	moveq	r3, #6
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    b0b4:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
    b0b6:	e9cd 2201 	strd	r2, r2, [sp, #4]
    b0ba:	9203      	str	r2, [sp, #12]
    b0bc:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    b0c0:	f7fa fda6 	bl	5c10 <qspi_send_cmd>
		ret = -EIO;
    b0c4:	2800      	cmp	r0, #0
}
    b0c6:	bf18      	it	ne
    b0c8:	f06f 0004 	mvnne.w	r0, #4
    b0cc:	b005      	add	sp, #20
    b0ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000b0d2 <qspi_rdsr>:
{
    b0d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = -1;
    b0d4:	23ff      	movs	r3, #255	; 0xff
    b0d6:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
    b0da:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
    b0de:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
    b0e0:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
    b0e2:	2301      	movs	r3, #1
    b0e4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    b0e8:	2305      	movs	r3, #5
    b0ea:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_send_cmd(dev, &cmd, false);
    b0ee:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    b0f0:	ab01      	add	r3, sp, #4
    b0f2:	9204      	str	r2, [sp, #16]
    b0f4:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
    b0f6:	f7fa fd8b 	bl	5c10 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
    b0fa:	2800      	cmp	r0, #0
    b0fc:	bfa8      	it	ge
    b0fe:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
    b102:	b007      	add	sp, #28
    b104:	f85d fb04 	ldr.w	pc, [sp], #4

0000b108 <is_regular_addr_valid>:
{
    b108:	b538      	push	{r3, r4, r5, lr}
    b10a:	4604      	mov	r4, r0
    b10c:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    b10e:	f000 faeb 	bl	b6e8 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    b112:	4284      	cmp	r4, r0
    b114:	d209      	bcs.n	b12a <is_regular_addr_valid+0x22>
    b116:	2c00      	cmp	r4, #0
    b118:	db07      	blt.n	b12a <is_regular_addr_valid+0x22>
	    addr < 0 ||
    b11a:	42a8      	cmp	r0, r5
    b11c:	d305      	bcc.n	b12a <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    b11e:	442c      	add	r4, r5
	    len > flash_size ||
    b120:	4284      	cmp	r4, r0
    b122:	bf8c      	ite	hi
    b124:	2000      	movhi	r0, #0
    b126:	2001      	movls	r0, #1
}
    b128:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    b12a:	2000      	movs	r0, #0
    b12c:	e7fc      	b.n	b128 <is_regular_addr_valid+0x20>

0000b12e <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    b12e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b132:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
    b134:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    b136:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
    b13a:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
    b13c:	f8c4 8000 	str.w	r8, [r4]
{
    b140:	460d      	mov	r5, r1
    b142:	4616      	mov	r6, r2
	info->index = 0U;
    b144:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
    b148:	aa01      	add	r2, sp, #4
    b14a:	4669      	mov	r1, sp
    b14c:	4798      	blx	r3

	while (layout_size--) {
    b14e:	e9dd 7c00 	ldrd	r7, ip, [sp]
    b152:	4640      	mov	r0, r8
		info->size = layout->pages_size;
    b154:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
    b158:	4560      	cmp	r0, ip
    b15a:	d104      	bne.n	b166 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    b15c:	f06f 0015 	mvn.w	r0, #21
}
    b160:	b003      	add	sp, #12
    b162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
    b166:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
    b16a:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
    b16c:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
    b16e:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
    b172:	b985      	cbnz	r5, b196 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
    b174:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
    b176:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
    b17a:	4543      	cmp	r3, r8
    b17c:	bf28      	it	cs
    b17e:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
    b180:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
    b184:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
    b186:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
    b188:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
    b18a:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
    b18c:	f100 0001 	add.w	r0, r0, #1
    b190:	d9e2      	bls.n	b158 <flash_get_page_info+0x2a>
			return 0;
    b192:	2000      	movs	r0, #0
    b194:	e7e4      	b.n	b160 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
    b196:	1aab      	subs	r3, r5, r2
    b198:	fbb3 f3f9 	udiv	r3, r3, r9
    b19c:	e7eb      	b.n	b176 <flash_get_page_info+0x48>

0000b19e <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    b19e:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    b1a0:	2200      	movs	r2, #0
    b1a2:	f7ff bfc4 	b.w	b12e <flash_get_page_info>

0000b1a6 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    b1a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    b1aa:	6883      	ldr	r3, [r0, #8]
{
    b1ac:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
    b1ae:	695b      	ldr	r3, [r3, #20]
{
    b1b0:	4688      	mov	r8, r1
    b1b2:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    b1b4:	a901      	add	r1, sp, #4
    b1b6:	aa02      	add	r2, sp, #8
    b1b8:	4798      	blx	r3
	off_t off = 0;
    b1ba:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    b1bc:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    b1be:	4625      	mov	r5, r4
    b1c0:	9b02      	ldr	r3, [sp, #8]
    b1c2:	42ab      	cmp	r3, r5
    b1c4:	d802      	bhi.n	b1cc <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    b1c6:	b006      	add	sp, #24
    b1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
    b1cc:	9f01      	ldr	r7, [sp, #4]
    b1ce:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
    b1d2:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
    b1d4:	687b      	ldr	r3, [r7, #4]
    b1d6:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    b1d8:	683a      	ldr	r2, [r7, #0]
    b1da:	42b2      	cmp	r2, r6
    b1dc:	eb0a 0306 	add.w	r3, sl, r6
    b1e0:	d802      	bhi.n	b1e8 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    b1e2:	3501      	adds	r5, #1
    b1e4:	469a      	mov	sl, r3
    b1e6:	e7eb      	b.n	b1c0 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    b1e8:	4649      	mov	r1, r9
    b1ea:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    b1ec:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    b1ee:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    b1f0:	47c0      	blx	r8
    b1f2:	2800      	cmp	r0, #0
    b1f4:	d0e7      	beq.n	b1c6 <flash_page_foreach+0x20>
			off += page_info.size;
    b1f6:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    b1f8:	3601      	adds	r6, #1
			off += page_info.size;
    b1fa:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    b1fc:	e7ec      	b.n	b1d8 <flash_page_foreach+0x32>

0000b1fe <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    b1fe:	6902      	ldr	r2, [r0, #16]
{
    b200:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    b202:	e892 0003 	ldmia.w	r2, {r0, r1}
    b206:	e883 0003 	stmia.w	r3, {r0, r1}
}
    b20a:	2000      	movs	r0, #0
    b20c:	4770      	bx	lr

0000b20e <uart_nrfx_irq_update>:
}
    b20e:	2001      	movs	r0, #1
    b210:	4770      	bx	lr

0000b212 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    b212:	6902      	ldr	r2, [r0, #16]
{
    b214:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    b216:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    b21a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    b21e:	2000      	movs	r0, #0
    b220:	4770      	bx	lr

0000b222 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    b222:	6843      	ldr	r3, [r0, #4]
    b224:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b226:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b22a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b22e:	4770      	bx	lr

0000b230 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    b230:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    b232:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    b234:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b236:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b23a:	b148      	cbz	r0, b250 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    b23c:	7d52      	ldrb	r2, [r2, #21]
    b23e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b240:	2000      	movs	r0, #0
    b242:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b246:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b24a:	2201      	movs	r2, #1
    b24c:	601a      	str	r2, [r3, #0]
	return 0;
    b24e:	4770      	bx	lr
		return -1;
    b250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    b254:	4770      	bx	lr

0000b256 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b256:	2a00      	cmp	r2, #0
{
    b258:	b510      	push	{r4, lr}
    b25a:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b25c:	dd0f      	ble.n	b27e <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    b25e:	6843      	ldr	r3, [r0, #4]
    b260:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b262:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b266:	b148      	cbz	r0, b27c <uarte_nrfx_fifo_read+0x26>
	return dev->data;
    b268:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b26a:	2000      	movs	r0, #0
    b26c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b270:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    b274:	7d52      	ldrb	r2, [r2, #21]
    b276:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b278:	2001      	movs	r0, #1
    b27a:	6018      	str	r0, [r3, #0]
}
    b27c:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    b27e:	2000      	movs	r0, #0
    b280:	e7fc      	b.n	b27c <uarte_nrfx_fifo_read+0x26>

0000b282 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    b282:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    b284:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    b286:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    b288:	f04f 0020 	mov.w	r0, #32
    b28c:	f3ef 8311 	mrs	r3, BASEPRI
    b290:	f380 8811 	msr	BASEPRI, r0
    b294:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    b298:	68c9      	ldr	r1, [r1, #12]
    b29a:	2000      	movs	r0, #0
    b29c:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    b29e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    b2a2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    b2a6:	f383 8811 	msr	BASEPRI, r3
    b2aa:	f3bf 8f6f 	isb	sy
}
    b2ae:	4770      	bx	lr

0000b2b0 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    b2b0:	6903      	ldr	r3, [r0, #16]
    b2b2:	68db      	ldr	r3, [r3, #12]
    b2b4:	2201      	movs	r2, #1
    b2b6:	739a      	strb	r2, [r3, #14]
}
    b2b8:	4770      	bx	lr

0000b2ba <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    b2ba:	6903      	ldr	r3, [r0, #16]
    b2bc:	68db      	ldr	r3, [r3, #12]
    b2be:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    b2c0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    b2c4:	b962      	cbnz	r2, b2e0 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    b2c6:	6842      	ldr	r2, [r0, #4]
    b2c8:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b2ca:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    b2ce:	b140      	cbz	r0, b2e2 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    b2d0:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    b2d4:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    b2d8:	d003      	beq.n	b2e2 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    b2da:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    b2dc:	2001      	movs	r0, #1
    b2de:	4770      	bx	lr
    b2e0:	2000      	movs	r0, #0
}
    b2e2:	4770      	bx	lr

0000b2e4 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    b2e4:	6843      	ldr	r3, [r0, #4]
    b2e6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b2e8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    b2ec:	3800      	subs	r0, #0
    b2ee:	bf18      	it	ne
    b2f0:	2001      	movne	r0, #1
    b2f2:	4770      	bx	lr

0000b2f4 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    b2f4:	6843      	ldr	r3, [r0, #4]
    b2f6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b2f8:	2210      	movs	r2, #16
    b2fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b2fe:	4770      	bx	lr

0000b300 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    b300:	6843      	ldr	r3, [r0, #4]
    b302:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    b304:	2210      	movs	r2, #16
    b306:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b30a:	4770      	bx	lr

0000b30c <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    b30c:	6843      	ldr	r3, [r0, #4]
    b30e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b310:	f44f 7200 	mov.w	r2, #512	; 0x200
    b314:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b318:	4770      	bx	lr

0000b31a <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    b31a:	6843      	ldr	r3, [r0, #4]
    b31c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    b31e:	f44f 7200 	mov.w	r2, #512	; 0x200
    b322:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b326:	4770      	bx	lr

0000b328 <uarte_nrfx_irq_update>:
}
    b328:	2001      	movs	r0, #1
    b32a:	4770      	bx	lr

0000b32c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    b32c:	6903      	ldr	r3, [r0, #16]
    b32e:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    b330:	e9c3 1200 	strd	r1, r2, [r3]
}
    b334:	4770      	bx	lr

0000b336 <uarte_nrfx_irq_is_pending>:
{
    b336:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    b338:	6843      	ldr	r3, [r0, #4]
    b33a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    b33c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    b340:	025b      	lsls	r3, r3, #9
{
    b342:	4604      	mov	r4, r0
		||
    b344:	d405      	bmi.n	b352 <uarte_nrfx_irq_is_pending+0x1c>
    b346:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b34a:	f010 0010 	ands.w	r0, r0, #16
    b34e:	d106      	bne.n	b35e <uarte_nrfx_irq_is_pending+0x28>
}
    b350:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    b352:	f7ff ffb2 	bl	b2ba <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    b356:	2800      	cmp	r0, #0
    b358:	d0f5      	beq.n	b346 <uarte_nrfx_irq_is_pending+0x10>
		||
    b35a:	2001      	movs	r0, #1
    b35c:	e7f8      	b.n	b350 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    b35e:	4620      	mov	r0, r4
    b360:	f7ff ffc0 	bl	b2e4 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    b364:	3800      	subs	r0, #0
    b366:	bf18      	it	ne
    b368:	2001      	movne	r0, #1
    b36a:	e7f1      	b.n	b350 <uarte_nrfx_irq_is_pending+0x1a>

0000b36c <tx_start.isra.0>:
	return config->uarte_regs;
    b36c:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b36e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b372:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b376:	2200      	movs	r2, #0
    b378:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    b37c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    b380:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    b384:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b388:	6842      	ldr	r2, [r0, #4]
    b38a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b38c:	bf41      	itttt	mi
    b38e:	2208      	movmi	r2, #8
    b390:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    b394:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    b398:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b39c:	2201      	movs	r2, #1
    b39e:	609a      	str	r2, [r3, #8]
}
    b3a0:	4770      	bx	lr

0000b3a2 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    b3a2:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    b3a4:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b3a6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b3aa:	b940      	cbnz	r0, b3be <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b3ac:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b3ae:	071b      	lsls	r3, r3, #28
    b3b0:	d406      	bmi.n	b3c0 <is_tx_ready.isra.0+0x1e>
    b3b2:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    b3b6:	3800      	subs	r0, #0
    b3b8:	bf18      	it	ne
    b3ba:	2001      	movne	r0, #1
    b3bc:	4770      	bx	lr
    b3be:	2001      	movs	r0, #1
}
    b3c0:	4770      	bx	lr

0000b3c2 <uarte_nrfx_fifo_fill>:
{
    b3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    b3c4:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    b3c6:	68f3      	ldr	r3, [r6, #12]
    b3c8:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b3ca:	f3bf 8f5b 	dmb	ish
    b3ce:	4294      	cmp	r4, r2
    b3d0:	bfa8      	it	ge
    b3d2:	4614      	movge	r4, r2
{
    b3d4:	4605      	mov	r5, r0
    b3d6:	3310      	adds	r3, #16
    b3d8:	2201      	movs	r2, #1
    b3da:	e853 0f00 	ldrex	r0, [r3]
    b3de:	2800      	cmp	r0, #0
    b3e0:	d103      	bne.n	b3ea <uarte_nrfx_fifo_fill+0x28>
    b3e2:	e843 2700 	strex	r7, r2, [r3]
    b3e6:	2f00      	cmp	r7, #0
    b3e8:	d1f7      	bne.n	b3da <uarte_nrfx_fifo_fill+0x18>
    b3ea:	f3bf 8f5b 	dmb	ish
    b3ee:	bf0c      	ite	eq
    b3f0:	4613      	moveq	r3, r2
    b3f2:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    b3f4:	d01d      	beq.n	b432 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    b3f6:	461c      	mov	r4, r3
}
    b3f8:	4620      	mov	r0, r4
    b3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    b3fc:	68f2      	ldr	r2, [r6, #12]
    b3fe:	5cc8      	ldrb	r0, [r1, r3]
    b400:	6892      	ldr	r2, [r2, #8]
    b402:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    b404:	3301      	adds	r3, #1
    b406:	42a3      	cmp	r3, r4
    b408:	dbf8      	blt.n	b3fc <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    b40a:	f04f 0320 	mov.w	r3, #32
    b40e:	f3ef 8711 	mrs	r7, BASEPRI
    b412:	f383 8811 	msr	BASEPRI, r3
    b416:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    b41a:	6868      	ldr	r0, [r5, #4]
    b41c:	f7ff ffc1 	bl	b3a2 <is_tx_ready.isra.0>
    b420:	68f3      	ldr	r3, [r6, #12]
    b422:	b940      	cbnz	r0, b436 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    b424:	6118      	str	r0, [r3, #16]
		len = 0;
    b426:	4604      	mov	r4, r0
	__asm__ volatile(
    b428:	f387 8811 	msr	BASEPRI, r7
    b42c:	f3bf 8f6f 	isb	sy
	return len;
    b430:	e7e2      	b.n	b3f8 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    b432:	2300      	movs	r3, #0
    b434:	e7e7      	b.n	b406 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    b436:	6899      	ldr	r1, [r3, #8]
    b438:	6868      	ldr	r0, [r5, #4]
    b43a:	4622      	mov	r2, r4
    b43c:	f7ff ff96 	bl	b36c <tx_start.isra.0>
    b440:	e7f2      	b.n	b428 <uarte_nrfx_fifo_fill+0x66>

0000b442 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    b442:	6843      	ldr	r3, [r0, #4]
    b444:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    b446:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    b44a:	05d1      	lsls	r1, r2, #23
{
    b44c:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    b44e:	d518      	bpl.n	b482 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b450:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    b454:	b1aa      	cbz	r2, b482 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    b456:	f04f 0120 	mov.w	r1, #32
    b45a:	f3ef 8211 	mrs	r2, BASEPRI
    b45e:	f381 8811 	msr	BASEPRI, r1
    b462:	f3bf 8f6f 	isb	sy
    b466:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    b46a:	b131      	cbz	r1, b47a <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b46c:	2100      	movs	r1, #0
    b46e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    b472:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b476:	2101      	movs	r1, #1
    b478:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    b47a:	f382 8811 	msr	BASEPRI, r2
    b47e:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b482:	6842      	ldr	r2, [r0, #4]
    b484:	6852      	ldr	r2, [r2, #4]
    b486:	06d2      	lsls	r2, r2, #27
    b488:	d51a      	bpl.n	b4c0 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    b48a:	f04f 0220 	mov.w	r2, #32
    b48e:	f3ef 8111 	mrs	r1, BASEPRI
    b492:	f382 8811 	msr	BASEPRI, r2
    b496:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b49a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b49e:	b112      	cbz	r2, b4a6 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b4a0:	2200      	movs	r2, #0
    b4a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    b4a6:	6902      	ldr	r2, [r0, #16]
    b4a8:	68d2      	ldr	r2, [r2, #12]
    b4aa:	b10a      	cbz	r2, b4b0 <uarte_nrfx_isr_int+0x6e>
    b4ac:	6912      	ldr	r2, [r2, #16]
    b4ae:	b91a      	cbnz	r2, b4b8 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    b4b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    b4b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    b4b8:	f381 8811 	msr	BASEPRI, r1
    b4bc:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    b4c0:	6902      	ldr	r2, [r0, #16]
    b4c2:	68d2      	ldr	r2, [r2, #12]
    b4c4:	b15a      	cbz	r2, b4de <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4c6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    b4ca:	b151      	cbz	r1, b4e2 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
    b4cc:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    b4ce:	2100      	movs	r1, #0
    b4d0:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    b4d2:	b134      	cbz	r4, b4e2 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    b4d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b4d8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    b4dc:	7391      	strb	r1, [r2, #14]
}
    b4de:	bc10      	pop	{r4}
    b4e0:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4e2:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    b4e6:	b121      	cbz	r1, b4f2 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b4e8:	2100      	movs	r1, #0
    b4ea:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    b4ee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    b4f2:	6813      	ldr	r3, [r2, #0]
    b4f4:	2b00      	cmp	r3, #0
    b4f6:	d0f2      	beq.n	b4de <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    b4f8:	6851      	ldr	r1, [r2, #4]
}
    b4fa:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    b4fc:	4718      	bx	r3

0000b4fe <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b4fe:	f7fd bd5d 	b.w	8fbc <nrf_cc3xx_platform_init_no_rng>

0000b502 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    b502:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b504:	f7f7 ff72 	bl	33ec <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b508:	f7f8 f824 	bl	3554 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    b50c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    b510:	f7fd bd54 	b.w	8fbc <nrf_cc3xx_platform_init_no_rng>

0000b514 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    b514:	b538      	push	{r3, r4, r5, lr}
    b516:	460c      	mov	r4, r1
    b518:	4615      	mov	r5, r2
    b51a:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
    b51c:	f7fe fffe 	bl	a51c <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    b520:	4621      	mov	r1, r4
    b522:	42a9      	cmp	r1, r5
    b524:	d101      	bne.n	b52a <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    b526:	2001      	movs	r0, #1
}
    b528:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    b52a:	f811 3b01 	ldrb.w	r3, [r1], #1
    b52e:	4298      	cmp	r0, r3
    b530:	d0f7      	beq.n	b522 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    b532:	2000      	movs	r0, #0
    b534:	e7f8      	b.n	b528 <bootutil_buffer_is_erased.part.0+0x14>

0000b536 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    b536:	6880      	ldr	r0, [r0, #8]
}
    b538:	3828      	subs	r0, #40	; 0x28
    b53a:	4770      	bx	lr

0000b53c <boot_magic_compatible_check>:
    switch (tbl_val) {
    b53c:	2804      	cmp	r0, #4
    b53e:	d009      	beq.n	b554 <boot_magic_compatible_check+0x18>
    b540:	2805      	cmp	r0, #5
    b542:	d103      	bne.n	b54c <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    b544:	1e48      	subs	r0, r1, #1
    b546:	bf18      	it	ne
    b548:	2001      	movne	r0, #1
    b54a:	4770      	bx	lr
        return tbl_val == val;
    b54c:	1a43      	subs	r3, r0, r1
    b54e:	4258      	negs	r0, r3
    b550:	4158      	adcs	r0, r3
    b552:	4770      	bx	lr
    switch (tbl_val) {
    b554:	2001      	movs	r0, #1
}
    b556:	4770      	bx	lr

0000b558 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    b558:	b111      	cbz	r1, b560 <bootutil_buffer_is_erased+0x8>
    b55a:	b10a      	cbz	r2, b560 <bootutil_buffer_is_erased+0x8>
    b55c:	f7ff bfda 	b.w	b514 <bootutil_buffer_is_erased.part.0>
}
    b560:	2000      	movs	r0, #0
    b562:	4770      	bx	lr

0000b564 <boot_read_flag>:
{
    b564:	b538      	push	{r3, r4, r5, lr}
    b566:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    b568:	2301      	movs	r3, #1
{
    b56a:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    b56c:	4622      	mov	r2, r4
{
    b56e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    b570:	f7fe ff4d 	bl	a40e <flash_area_read>
    if (rc < 0) {
    b574:	2800      	cmp	r0, #0
    b576:	db10      	blt.n	b59a <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    b578:	2201      	movs	r2, #1
    b57a:	4621      	mov	r1, r4
    b57c:	4628      	mov	r0, r5
    b57e:	f7ff ffeb 	bl	b558 <bootutil_buffer_is_erased>
    b582:	b118      	cbz	r0, b58c <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    b584:	2303      	movs	r3, #3
    b586:	7023      	strb	r3, [r4, #0]
    return 0;
    b588:	2000      	movs	r0, #0
}
    b58a:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    b58c:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
    b58e:	2b01      	cmp	r3, #1
    b590:	bf0c      	ite	eq
    b592:	2301      	moveq	r3, #1
    b594:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    b596:	7023      	strb	r3, [r4, #0]
    b598:	e7f7      	b.n	b58a <boot_read_flag+0x26>
        return BOOT_EFLASH;
    b59a:	2001      	movs	r0, #1
    b59c:	e7f5      	b.n	b58a <boot_read_flag+0x26>

0000b59e <boot_write_trailer>:
{
    b59e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    b5a2:	461d      	mov	r5, r3
    b5a4:	4606      	mov	r6, r0
    b5a6:	460f      	mov	r7, r1
    b5a8:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    b5aa:	f7fe ffae 	bl	a50a <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    b5ae:	1944      	adds	r4, r0, r5
    b5b0:	3c01      	subs	r4, #1
    b5b2:	4240      	negs	r0, r0
    b5b4:	4004      	ands	r4, r0
    b5b6:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    b5b8:	2c08      	cmp	r4, #8
    b5ba:	d81a      	bhi.n	b5f2 <boot_write_trailer+0x54>
    erased_val = flash_area_erased_val(fap);
    b5bc:	4630      	mov	r0, r6
    b5be:	f7fe ffad 	bl	a51c <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
    b5c2:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
    b5c4:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    b5c6:	4641      	mov	r1, r8
    b5c8:	4668      	mov	r0, sp
    b5ca:	f7ff fb27 	bl	ac1c <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    b5ce:	1b62      	subs	r2, r4, r5
    b5d0:	4649      	mov	r1, r9
    b5d2:	eb0d 0005 	add.w	r0, sp, r5
    b5d6:	f7ff fb2c 	bl	ac32 <memset>
    rc = flash_area_write(fap, off, buf, align);
    b5da:	4623      	mov	r3, r4
    b5dc:	466a      	mov	r2, sp
    b5de:	4639      	mov	r1, r7
    b5e0:	4630      	mov	r0, r6
    b5e2:	f7fe ff30 	bl	a446 <flash_area_write>
    if (rc != 0) {
    b5e6:	3800      	subs	r0, #0
    b5e8:	bf18      	it	ne
    b5ea:	2001      	movne	r0, #1
}
    b5ec:	b003      	add	sp, #12
    b5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    b5f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b5f6:	e7f9      	b.n	b5ec <boot_write_trailer+0x4e>

0000b5f8 <boot_write_trailer_flag>:
{
    b5f8:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    b5fa:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    b5fc:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    b600:	aa01      	add	r2, sp, #4
    b602:	f7ff ffcc 	bl	b59e <boot_write_trailer>
}
    b606:	b003      	add	sp, #12
    b608:	f85d fb04 	ldr.w	pc, [sp], #4

0000b60c <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    b60c:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    b60e:	2201      	movs	r2, #1
    b610:	3918      	subs	r1, #24
    b612:	f7ff bff1 	b.w	b5f8 <boot_write_trailer_flag>

0000b616 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    b616:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    b618:	3a18      	subs	r2, #24
    b61a:	f7ff bfa3 	b.w	b564 <boot_read_flag>

0000b61e <boot_read_swap_state_by_id>:
{
    b61e:	b513      	push	{r0, r1, r4, lr}
    b620:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    b622:	b2c0      	uxtb	r0, r0
    b624:	a901      	add	r1, sp, #4
    b626:	f7f7 fb5d 	bl	2ce4 <flash_area_open>
    if (rc != 0) {
    b62a:	b950      	cbnz	r0, b642 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    b62c:	4621      	mov	r1, r4
    b62e:	9801      	ldr	r0, [sp, #4]
    b630:	f7fb fc06 	bl	6e40 <boot_read_swap_state>
    b634:	4604      	mov	r4, r0
    flash_area_close(fap);
    b636:	9801      	ldr	r0, [sp, #4]
    b638:	f7fe fee8 	bl	a40c <flash_area_close>
}
    b63c:	4620      	mov	r0, r4
    b63e:	b002      	add	sp, #8
    b640:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    b642:	2401      	movs	r4, #1
    b644:	e7fa      	b.n	b63c <boot_read_swap_state_by_id+0x1e>

0000b646 <boot_write_swap_info>:
{
    b646:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    b648:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    b64c:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    b650:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    b652:	2301      	movs	r3, #1
    b654:	f10d 0207 	add.w	r2, sp, #7
    b658:	3928      	subs	r1, #40	; 0x28
    b65a:	f7ff ffa0 	bl	b59e <boot_write_trailer>
}
    b65e:	b003      	add	sp, #12
    b660:	f85d fb04 	ldr.w	pc, [sp], #4

0000b664 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    b668:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    b66c:	f1a0 0308 	sub.w	r3, r0, #8
    b670:	4258      	negs	r0, r3
    b672:	4158      	adcs	r0, r3
    b674:	4770      	bx	lr

0000b676 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    b676:	4700      	bx	r0

0000b678 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    b678:	f000 ba90 	b.w	bb9c <z_impl_k_busy_wait>

0000b67c <nrfx_clock_enable>:
{
    b67c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    b67e:	2000      	movs	r0, #0
    b680:	f7f8 fd1a 	bl	40b8 <arch_irq_is_enabled>
    b684:	b918      	cbnz	r0, b68e <nrfx_clock_enable+0x12>
}
    b686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    b68a:	f7f8 bcf1 	b.w	4070 <arch_irq_enable>
    b68e:	bd08      	pop	{r3, pc}

0000b690 <nrfx_clock_start>:
    switch (domain)
    b690:	b110      	cbz	r0, b698 <nrfx_clock_start+0x8>
    b692:	2801      	cmp	r0, #1
    b694:	d01d      	beq.n	b6d2 <nrfx_clock_start+0x42>
    b696:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b69c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b6a0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    b6a4:	03c9      	lsls	r1, r1, #15
    b6a6:	d512      	bpl.n	b6ce <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    b6a8:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    b6ac:	2a01      	cmp	r2, #1
    b6ae:	d10e      	bne.n	b6ce <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    b6b0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b6b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b6b8:	2200      	movs	r2, #0
    b6ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    b6be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    b6c2:	2202      	movs	r2, #2
    b6c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b6c8:	2201      	movs	r2, #1
    b6ca:	609a      	str	r2, [r3, #8]
}
    b6cc:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    b6ce:	2200      	movs	r2, #0
    b6d0:	e7ee      	b.n	b6b0 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b6d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b6d6:	2200      	movs	r2, #0
    b6d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b6dc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    b6e0:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b6e4:	6018      	str	r0, [r3, #0]
}
    b6e6:	4770      	bx	lr

0000b6e8 <nrfx_nvmc_flash_size_get>:
    b6e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b6ec:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
    b6ee:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    b6f0:	4350      	muls	r0, r2
    b6f2:	4770      	bx	lr

0000b6f4 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    b6f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b6f8:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    b6fa:	4770      	bx	lr

0000b6fc <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    b6fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b700:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    b702:	4770      	bx	lr

0000b704 <nrf_gpio_cfg_default>:
{
    b704:	b507      	push	{r0, r1, r2, lr}
    b706:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b708:	a801      	add	r0, sp, #4
    b70a:	f7fb fec9 	bl	74a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b70e:	9b01      	ldr	r3, [sp, #4]
    b710:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b714:	2202      	movs	r2, #2
    b716:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    b71a:	b003      	add	sp, #12
    b71c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b720 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
    b720:	2302      	movs	r3, #2
    b722:	f7fb becb 	b.w	74bc <qspi_xfer>

0000b726 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
    b726:	2303      	movs	r3, #3
    b728:	f7fb bec8 	b.w	74bc <qspi_xfer>

0000b72c <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
    b72c:	2100      	movs	r1, #0
    b72e:	2002      	movs	r0, #2
    b730:	f7fc b92a 	b.w	7988 <nrfx_qspi_erase>

0000b734 <nrf_gpio_pin_set>:
{
    b734:	b507      	push	{r0, r1, r2, lr}
    b736:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b738:	a801      	add	r0, sp, #4
    b73a:	f7fc f98b 	bl	7a54 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    b73e:	9a01      	ldr	r2, [sp, #4]
    b740:	2301      	movs	r3, #1
    b742:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    b744:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    b748:	b003      	add	sp, #12
    b74a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b74e <nrf_gpio_pin_clear>:
{
    b74e:	b507      	push	{r0, r1, r2, lr}
    b750:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b752:	a801      	add	r0, sp, #4
    b754:	f7fc f97e 	bl	7a54 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b758:	9a01      	ldr	r2, [sp, #4]
    b75a:	2301      	movs	r3, #1
    b75c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    b75e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    b762:	b003      	add	sp, #12
    b764:	f85d fb04 	ldr.w	pc, [sp], #4

0000b768 <transfer_byte>:
{
    b768:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    b76a:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    b76e:	698a      	ldr	r2, [r1, #24]
    b770:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    b772:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    b776:	6a0b      	ldr	r3, [r1, #32]
    b778:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    b77a:	bf3e      	ittt	cc
    b77c:	694a      	ldrcc	r2, [r1, #20]
    b77e:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    b782:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    b784:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
    b786:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
    b78a:	1c53      	adds	r3, r2, #1
    b78c:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    b78e:	3202      	adds	r2, #2
    if (p_cb->abort)
    b790:	b13c      	cbz	r4, b7a2 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    b792:	690c      	ldr	r4, [r1, #16]
    b794:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    b796:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    b798:	bf38      	it	cc
    b79a:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    b79c:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    b79e:	bf88      	it	hi
    b7a0:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    b7a2:	690d      	ldr	r5, [r1, #16]
    b7a4:	4295      	cmp	r5, r2
    b7a6:	d905      	bls.n	b7b4 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    b7a8:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
    b7aa:	5c9b      	ldrb	r3, [r3, r2]
    b7ac:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    b7b0:	2001      	movs	r0, #1
    b7b2:	e00a      	b.n	b7ca <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    b7b4:	698c      	ldr	r4, [r1, #24]
    b7b6:	4294      	cmp	r4, r2
    b7b8:	d901      	bls.n	b7be <transfer_byte+0x56>
    b7ba:	7fcb      	ldrb	r3, [r1, #31]
    b7bc:	e7f6      	b.n	b7ac <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    b7be:	42ab      	cmp	r3, r5
    b7c0:	d3f6      	bcc.n	b7b0 <transfer_byte+0x48>
    b7c2:	42a3      	cmp	r3, r4
    b7c4:	bf2c      	ite	cs
    b7c6:	2000      	movcs	r0, #0
    b7c8:	2001      	movcc	r0, #1
}
    b7ca:	b003      	add	sp, #12
    b7cc:	bd30      	pop	{r4, r5, pc}

0000b7ce <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    b7ce:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    b7d0:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    b7d2:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    b7d4:	bf9c      	itt	ls
    b7d6:	6880      	ldrls	r0, [r0, #8]
    b7d8:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    b7da:	3b01      	subs	r3, #1
    b7dc:	1a98      	subs	r0, r3, r2
}
    b7de:	4770      	bx	lr

0000b7e0 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    b7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    b7e4:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    b7e8:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    b7ea:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    b7ee:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    b7f0:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    b7f2:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    b7f4:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    b7f6:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    b7f8:	d904      	bls.n	b804 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    b7fa:	f7ff fa0f 	bl	ac1c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    b7fe:	60ec      	str	r4, [r5, #12]
}
    b800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    b804:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    b806:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    b80a:	f7ff fa07 	bl	ac1c <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    b80e:	6868      	ldr	r0, [r5, #4]
    b810:	4622      	mov	r2, r4
    b812:	eb07 0108 	add.w	r1, r7, r8
    b816:	e7f0      	b.n	b7fa <_WriteNoCheck+0x1a>

0000b818 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    b818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    b81c:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    b81e:	4606      	mov	r6, r0
    b820:	4689      	mov	r9, r1
    b822:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    b824:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    b828:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    b82a:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    b82c:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    b82e:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    b830:	bf28      	it	cs
    b832:	18e4      	addcs	r4, r4, r3
    b834:	3c01      	subs	r4, #1
    b836:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    b838:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    b83a:	42bc      	cmp	r4, r7
    b83c:	bf28      	it	cs
    b83e:	463c      	movcs	r4, r7
    b840:	4294      	cmp	r4, r2
    b842:	bf28      	it	cs
    b844:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    b846:	4649      	mov	r1, r9
    b848:	4428      	add	r0, r5
    b84a:	4622      	mov	r2, r4
    b84c:	f7ff f9e6 	bl	ac1c <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    b850:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    b852:	4425      	add	r5, r4
      WrOff = 0u;
    b854:	42ab      	cmp	r3, r5
    b856:	bf08      	it	eq
    b858:	2500      	moveq	r5, #0
  } while (NumBytes);
    b85a:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    b85c:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    b85e:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    b860:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    b862:	d1e1      	bne.n	b828 <_WriteBlocking+0x10>
}
    b864:	4640      	mov	r0, r8
    b866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b86a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    b86a:	f7fc ba41 	b.w	7cf0 <_DoInit>

0000b86e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    b86e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    b870:	f7ff fffb 	bl	b86a <SEGGER_RTT_Init>

	return 0;
}
    b874:	2000      	movs	r0, #0
    b876:	bd08      	pop	{r3, pc}

0000b878 <z_device_state_init>:
}
    b878:	4770      	bx	lr

0000b87a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    b87a:	b138      	cbz	r0, b88c <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    b87c:	68c3      	ldr	r3, [r0, #12]
    b87e:	8818      	ldrh	r0, [r3, #0]
    b880:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b884:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    b888:	4258      	negs	r0, r3
    b88a:	4158      	adcs	r0, r3
}
    b88c:	4770      	bx	lr

0000b88e <device_busy_set>:
	atomic_set_bit(&dev->pm->atomic_flags,
		       PM_DEVICE_ATOMIC_FLAGS_BUSY_BIT);
#else
	ARG_UNUSED(dev);
#endif
}
    b88e:	4770      	bx	lr

0000b890 <device_busy_clear>:
    b890:	4770      	bx	lr

0000b892 <arch_system_halt>:
	__asm__ volatile(
    b892:	f04f 0220 	mov.w	r2, #32
    b896:	f3ef 8311 	mrs	r3, BASEPRI
    b89a:	f382 8811 	msr	BASEPRI, r2
    b89e:	f3bf 8f6f 	isb	sy
	for (;;) {
    b8a2:	e7fe      	b.n	b8a2 <arch_system_halt+0x10>

0000b8a4 <k_mem_slab_init>:
{
    b8a4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    b8a6:	2400      	movs	r4, #0
    b8a8:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b8aa:	ea41 0402 	orr.w	r4, r1, r2
    b8ae:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    b8b2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    b8b6:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b8b8:	d10c      	bne.n	b8d4 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    b8ba:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    b8bc:	42a3      	cmp	r3, r4
    b8be:	d103      	bne.n	b8c8 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    b8c0:	e9c0 0000 	strd	r0, r0, [r0]
}
    b8c4:	2000      	movs	r0, #0
}
    b8c6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    b8c8:	6945      	ldr	r5, [r0, #20]
    b8ca:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    b8cc:	3401      	adds	r4, #1
		slab->free_list = p;
    b8ce:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    b8d0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    b8d2:	e7f3      	b.n	b8bc <k_mem_slab_init+0x18>
		return -EINVAL;
    b8d4:	f06f 0015 	mvn.w	r0, #21
	return rc;
    b8d8:	e7f5      	b.n	b8c6 <k_mem_slab_init+0x22>

0000b8da <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    b8da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8dc:	4604      	mov	r4, r0
    b8de:	460d      	mov	r5, r1
    b8e0:	f04f 0320 	mov.w	r3, #32
    b8e4:	f3ef 8611 	mrs	r6, BASEPRI
    b8e8:	f383 8811 	msr	BASEPRI, r3
    b8ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    b8f0:	6947      	ldr	r7, [r0, #20]
    b8f2:	b977      	cbnz	r7, b912 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    b8f4:	f000 f8f6 	bl	bae4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    b8f8:	b158      	cbz	r0, b912 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    b8fa:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    b8fc:	6142      	str	r2, [r0, #20]
    b8fe:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    b900:	f000 f8a9 	bl	ba56 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    b904:	4631      	mov	r1, r6
    b906:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    b90a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    b90e:	f7fc be79 	b.w	8604 <z_reschedule>
	**(char ***) mem = slab->free_list;
    b912:	682b      	ldr	r3, [r5, #0]
    b914:	6962      	ldr	r2, [r4, #20]
    b916:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    b918:	682b      	ldr	r3, [r5, #0]
    b91a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    b91c:	69a3      	ldr	r3, [r4, #24]
    b91e:	3b01      	subs	r3, #1
    b920:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    b922:	f386 8811 	msr	BASEPRI, r6
    b926:	f3bf 8f6f 	isb	sy
}
    b92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b92c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b92c:	f3ef 8005 	mrs	r0, IPSR
}
    b930:	3800      	subs	r0, #0
    b932:	bf18      	it	ne
    b934:	2001      	movne	r0, #1
    b936:	4770      	bx	lr

0000b938 <z_impl_k_thread_name_set>:
}
    b938:	f06f 0057 	mvn.w	r0, #87	; 0x57
    b93c:	4770      	bx	lr

0000b93e <k_thread_name_get>:
}
    b93e:	2000      	movs	r0, #0
    b940:	4770      	bx	lr

0000b942 <z_pm_save_idle_exit>:
{
    b942:	b508      	push	{r3, lr}
	pm_system_resume();
    b944:	f7f7 fa2c 	bl	2da0 <pm_system_resume>
}
    b948:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    b94c:	f7fe be87 	b.w	a65e <sys_clock_idle_exit>

0000b950 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    b950:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b954:	428b      	cmp	r3, r1
    b956:	d001      	beq.n	b95c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    b958:	f7fd b808 	b.w	896c <z_set_prio>
}
    b95c:	2000      	movs	r0, #0
    b95e:	4770      	bx	lr

0000b960 <z_impl_k_mutex_init>:
{
    b960:	4603      	mov	r3, r0
	mutex->owner = NULL;
    b962:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    b964:	e9c3 0002 	strd	r0, r0, [r3, #8]
    b968:	e9c3 3300 	strd	r3, r3, [r3]
}
    b96c:	4770      	bx	lr

0000b96e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    b96e:	b13a      	cbz	r2, b980 <z_impl_k_sem_init+0x12>
    b970:	428a      	cmp	r2, r1
    b972:	d305      	bcc.n	b980 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    b974:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b978:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    b97c:	2000      	movs	r0, #0
    b97e:	4770      	bx	lr
		return -EINVAL;
    b980:	f06f 0015 	mvn.w	r0, #21
}
    b984:	4770      	bx	lr

0000b986 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    b986:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    b98a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b98c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b98e:	2300      	movs	r3, #0
	node->prev = NULL;
    b990:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    b994:	4770      	bx	lr

0000b996 <unpend_thread_no_timeout>:
{
    b996:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    b998:	f7ff fff5 	bl	b986 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b99c:	7b43      	ldrb	r3, [r0, #13]
    b99e:	f023 0302 	bic.w	r3, r3, #2
    b9a2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    b9a4:	2300      	movs	r3, #0
    b9a6:	6083      	str	r3, [r0, #8]
}
    b9a8:	bd08      	pop	{r3, pc}

0000b9aa <z_unpend_thread_no_timeout>:
{
    b9aa:	b508      	push	{r3, lr}
	__asm__ volatile(
    b9ac:	f04f 0320 	mov.w	r3, #32
    b9b0:	f3ef 8111 	mrs	r1, BASEPRI
    b9b4:	f383 8811 	msr	BASEPRI, r3
    b9b8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    b9bc:	f7ff ffeb 	bl	b996 <unpend_thread_no_timeout>
	__asm__ volatile(
    b9c0:	f381 8811 	msr	BASEPRI, r1
    b9c4:	f3bf 8f6f 	isb	sy
}
    b9c8:	bd08      	pop	{r3, pc}

0000b9ca <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b9ca:	4603      	mov	r3, r0
    b9cc:	b920      	cbnz	r0, b9d8 <z_reschedule_irqlock+0xe>
    b9ce:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    b9d2:	b90a      	cbnz	r2, b9d8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    b9d4:	f7f8 bafe 	b.w	3fd4 <arch_swap>
    b9d8:	f383 8811 	msr	BASEPRI, r3
    b9dc:	f3bf 8f6f 	isb	sy
}
    b9e0:	4770      	bx	lr

0000b9e2 <z_reschedule_unlocked>:
	__asm__ volatile(
    b9e2:	f04f 0320 	mov.w	r3, #32
    b9e6:	f3ef 8011 	mrs	r0, BASEPRI
    b9ea:	f383 8811 	msr	BASEPRI, r3
    b9ee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b9f2:	f7ff bfea 	b.w	b9ca <z_reschedule_irqlock>

0000b9f6 <z_priq_dumb_best>:
{
    b9f6:	4603      	mov	r3, r0
	return list->head == list;
    b9f8:	6800      	ldr	r0, [r0, #0]
}
    b9fa:	4283      	cmp	r3, r0
    b9fc:	bf08      	it	eq
    b9fe:	2000      	moveq	r0, #0
    ba00:	4770      	bx	lr

0000ba02 <add_to_waitq_locked>:
{
    ba02:	b538      	push	{r3, r4, r5, lr}
    ba04:	4604      	mov	r4, r0
    ba06:	460d      	mov	r5, r1
	unready_thread(thread);
    ba08:	f7fc fe42 	bl	8690 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    ba0c:	7b63      	ldrb	r3, [r4, #13]
    ba0e:	f043 0302 	orr.w	r3, r3, #2
    ba12:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    ba14:	b195      	cbz	r5, ba3c <add_to_waitq_locked+0x3a>
    ba16:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    ba18:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba1a:	429d      	cmp	r5, r3
    ba1c:	d015      	beq.n	ba4a <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ba1e:	b1a3      	cbz	r3, ba4a <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    ba20:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    ba24:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    ba28:	4291      	cmp	r1, r2
    ba2a:	d008      	beq.n	ba3e <add_to_waitq_locked+0x3c>
		return b2 - b1;
    ba2c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    ba2e:	2a00      	cmp	r2, #0
    ba30:	dd05      	ble.n	ba3e <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    ba32:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ba34:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    ba38:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    ba3a:	605c      	str	r4, [r3, #4]
}
    ba3c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    ba3e:	686a      	ldr	r2, [r5, #4]
    ba40:	4293      	cmp	r3, r2
    ba42:	d002      	beq.n	ba4a <add_to_waitq_locked+0x48>
    ba44:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ba46:	2b00      	cmp	r3, #0
    ba48:	d1ec      	bne.n	ba24 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    ba4a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    ba4c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    ba50:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ba52:	606c      	str	r4, [r5, #4]
}
    ba54:	e7f2      	b.n	ba3c <add_to_waitq_locked+0x3a>

0000ba56 <z_ready_thread>:
{
    ba56:	b510      	push	{r4, lr}
    ba58:	f04f 0320 	mov.w	r3, #32
    ba5c:	f3ef 8411 	mrs	r4, BASEPRI
    ba60:	f383 8811 	msr	BASEPRI, r3
    ba64:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    ba68:	f7fc ff2c 	bl	88c4 <ready_thread>
	__asm__ volatile(
    ba6c:	f384 8811 	msr	BASEPRI, r4
    ba70:	f3bf 8f6f 	isb	sy
}
    ba74:	bd10      	pop	{r4, pc}

0000ba76 <z_thread_timeout>:
{
    ba76:	b510      	push	{r4, lr}
    ba78:	4601      	mov	r1, r0
	__asm__ volatile(
    ba7a:	f04f 0320 	mov.w	r3, #32
    ba7e:	f3ef 8411 	mrs	r4, BASEPRI
    ba82:	f383 8811 	msr	BASEPRI, r3
    ba86:	f3bf 8f6f 	isb	sy
		if (!killed) {
    ba8a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    ba8e:	f013 0f28 	tst.w	r3, #40	; 0x28
    ba92:	d10d      	bne.n	bab0 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    ba94:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    ba98:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    ba9a:	b10b      	cbz	r3, baa0 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    ba9c:	f7ff ff7b 	bl	b996 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    baa0:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    baa4:	f023 0314 	bic.w	r3, r3, #20
    baa8:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    baac:	f7fc ff0a 	bl	88c4 <ready_thread>
	__asm__ volatile(
    bab0:	f384 8811 	msr	BASEPRI, r4
    bab4:	f3bf 8f6f 	isb	sy
}
    bab8:	bd10      	pop	{r4, pc}

0000baba <z_unpend1_no_timeout>:
{
    baba:	b510      	push	{r4, lr}
	__asm__ volatile(
    babc:	f04f 0320 	mov.w	r3, #32
    bac0:	f3ef 8411 	mrs	r4, BASEPRI
    bac4:	f383 8811 	msr	BASEPRI, r3
    bac8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    bacc:	f7ff ff93 	bl	b9f6 <z_priq_dumb_best>
		if (thread != NULL) {
    bad0:	4601      	mov	r1, r0
    bad2:	b108      	cbz	r0, bad8 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    bad4:	f7ff ff5f 	bl	b996 <unpend_thread_no_timeout>
	__asm__ volatile(
    bad8:	f384 8811 	msr	BASEPRI, r4
    badc:	f3bf 8f6f 	isb	sy
}
    bae0:	4608      	mov	r0, r1
    bae2:	bd10      	pop	{r4, pc}

0000bae4 <z_unpend_first_thread>:
{
    bae4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    bae6:	f04f 0320 	mov.w	r3, #32
    baea:	f3ef 8511 	mrs	r5, BASEPRI
    baee:	f383 8811 	msr	BASEPRI, r3
    baf2:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    baf6:	f7ff ff7e 	bl	b9f6 <z_priq_dumb_best>
		if (thread != NULL) {
    bafa:	4604      	mov	r4, r0
    bafc:	b120      	cbz	r0, bb08 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    bafe:	f7ff ff4a 	bl	b996 <unpend_thread_no_timeout>
    bb02:	3018      	adds	r0, #24
    bb04:	f000 f806 	bl	bb14 <z_abort_timeout>
	__asm__ volatile(
    bb08:	f385 8811 	msr	BASEPRI, r5
    bb0c:	f3bf 8f6f 	isb	sy
}
    bb10:	4620      	mov	r0, r4
    bb12:	bd38      	pop	{r3, r4, r5, pc}

0000bb14 <z_abort_timeout>:
{
    bb14:	b510      	push	{r4, lr}
	__asm__ volatile(
    bb16:	f04f 0220 	mov.w	r2, #32
    bb1a:	f3ef 8411 	mrs	r4, BASEPRI
    bb1e:	f382 8811 	msr	BASEPRI, r2
    bb22:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    bb26:	6803      	ldr	r3, [r0, #0]
    bb28:	b13b      	cbz	r3, bb3a <z_abort_timeout+0x26>
			remove_timeout(to);
    bb2a:	f7fd f8b9 	bl	8ca0 <remove_timeout>
			ret = 0;
    bb2e:	2000      	movs	r0, #0
	__asm__ volatile(
    bb30:	f384 8811 	msr	BASEPRI, r4
    bb34:	f3bf 8f6f 	isb	sy
}
    bb38:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    bb3a:	f06f 0015 	mvn.w	r0, #21
    bb3e:	e7f7      	b.n	bb30 <z_abort_timeout+0x1c>

0000bb40 <z_get_next_timeout_expiry>:
{
    bb40:	b510      	push	{r4, lr}
	__asm__ volatile(
    bb42:	f04f 0320 	mov.w	r3, #32
    bb46:	f3ef 8411 	mrs	r4, BASEPRI
    bb4a:	f383 8811 	msr	BASEPRI, r3
    bb4e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    bb52:	f7fd f87d 	bl	8c50 <next_timeout>
	__asm__ volatile(
    bb56:	f384 8811 	msr	BASEPRI, r4
    bb5a:	f3bf 8f6f 	isb	sy
}
    bb5e:	bd10      	pop	{r4, pc}

0000bb60 <z_set_timeout_expiry>:
{
    bb60:	b570      	push	{r4, r5, r6, lr}
    bb62:	4604      	mov	r4, r0
    bb64:	460d      	mov	r5, r1
	__asm__ volatile(
    bb66:	f04f 0320 	mov.w	r3, #32
    bb6a:	f3ef 8611 	mrs	r6, BASEPRI
    bb6e:	f383 8811 	msr	BASEPRI, r3
    bb72:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    bb76:	f7fd f86b 	bl	8c50 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    bb7a:	2801      	cmp	r0, #1
    bb7c:	dd05      	ble.n	bb8a <z_set_timeout_expiry+0x2a>
    bb7e:	42a0      	cmp	r0, r4
    bb80:	db03      	blt.n	bb8a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    bb82:	4629      	mov	r1, r5
    bb84:	4620      	mov	r0, r4
    bb86:	f7f7 fbd7 	bl	3338 <sys_clock_set_timeout>
	__asm__ volatile(
    bb8a:	f386 8811 	msr	BASEPRI, r6
    bb8e:	f3bf 8f6f 	isb	sy
}
    bb92:	bd70      	pop	{r4, r5, r6, pc}

0000bb94 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    bb94:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    bb96:	f7fd f973 	bl	8e80 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    bb9a:	bd08      	pop	{r3, pc}

0000bb9c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    bb9c:	b108      	cbz	r0, bba2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    bb9e:	f7f8 bf0d 	b.w	49bc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    bba2:	4770      	bx	lr

0000bba4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    bba4:	b510      	push	{r4, lr}
    bba6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    bba8:	f7ff ffb4 	bl	bb14 <z_abort_timeout>

	if (inactive) {
    bbac:	b9b0      	cbnz	r0, bbdc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    bbae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bbb0:	b10b      	cbz	r3, bbb6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    bbb2:	4620      	mov	r0, r4
    bbb4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    bbb6:	f104 0018 	add.w	r0, r4, #24
    bbba:	f7ff ff7e 	bl	baba <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    bbbe:	b168      	cbz	r0, bbdc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    bbc0:	f7ff ff49 	bl	ba56 <z_ready_thread>
	__asm__ volatile(
    bbc4:	f04f 0320 	mov.w	r3, #32
    bbc8:	f3ef 8011 	mrs	r0, BASEPRI
    bbcc:	f383 8811 	msr	BASEPRI, r3
    bbd0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    bbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    bbd8:	f7ff bef7 	b.w	b9ca <z_reschedule_irqlock>
    bbdc:	bd10      	pop	{r4, pc}
	...

0000bbe0 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    bbe0:	f7fb ba2e 	b.w	7040 <SystemInit>
